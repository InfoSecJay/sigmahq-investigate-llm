title: New PowerShell Instance Created
id: ac7102b4-9e1e-4802-9b4f-17c5524c015c
related:
- id: 58cb02d5-78ce-4692-b3e1-dce850aae41a
  type: derived
status: test
description: Detects the execution of PowerShell via the creation of a named pipe
  starting with PSHost
references:
- https://threathunterplaybook.com/hunts/windows/190610-PwshAlternateHosts/notebook.html
- https://threathunterplaybook.com/hunts/windows/190410-LocalPwshExecution/notebook.html
author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
date: 2019-09-12
modified: 2023-11-30
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: pipe_created
  definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon
    config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon
    configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth
    verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config,
    https://github.com/olafhartong/sysmon-modular. How to test detection? You can
    check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'
detection:
  selection:
    PipeName|startswith: '\PSHost'
  condition: selection
falsepositives:
- Likely
level: informational
notes: |
  ### Technical Context
  The detection rule "New PowerShell Instance Created" is designed to identify the execution of PowerShell via the creation of named pipes that start with "PSHost". This behavior typically indicates a PowerShell instance is being spawned, often in scenarios where attackers use PowerShell for malicious activity, including script execution and system exploitation. The rule primarily leverages Windows Sysmon's named pipe event logs (Event ID 17 and Event ID 18) to monitor for this specific activity. By focusing on the `PipeName` that starts with `\PSHost`, the rule effectively narrows down potentially malicious activity, as legitimate applications rarely use this naming convention in such a manner. 
  This detection is relevant to the MITRE ATT&CK framework, specifically under the tactic of "Execution" and the technique T1059.001 (PowerShell). When executed, the detection will trigger alerts that can help security analysts identify and respond to potentially harmful PowerShell executions, allowing for timely investigations into unusual behavior that may signify broader compromise.
  ### Investigation Steps
  - **Check Sysmon Logs**: Utilize your Sysmon logs to search for Event IDs 17 and 18 that correspond to the named pipe creations starting with `\PSHost`. This will provide insight into the context in which the PowerShell instances were created.
    
  - **Analyze Command-Line Arguments**: If available, examine the command line arguments passed to the PowerShell instance using Enterprise tools such as EDR. This can help identify the intent behind the PowerShell execution and ascertain whether it aligns with known operational activities.
  - **Review Event Correlation**: Correlate these PowerShell instances with other security events in the SIEM to understand if there were any preceding suspicious activities (like unusual logins or lateral movements) that could indicate an attack chain.
  - **Assess Network Traffic**: Use the NDR to review any outbound connections made by the process to detect any potentially malicious communications, such as connections to known command and control servers or data exfiltration attempts.
  ### Prioritization
  This alert is classified as informational, which suggests that while it may indicate the execution of PowerShell, not all occurrences warrant immediate concern. Contextual analysis is required to determine if the activity is part of normal operations or indicative of malicious intent.
  ### Blind Spots and Assumptions
  This rule may not fire in cases where systematic logging for named pipe events is not configured in Sysmon, as Event IDs 17 and 18 must be properly logged for detection. Additionally, there is an assumption that adversaries may utilize obfuscation techniques, such as altering pipe names or executing PowerShell scripts in traditional or less monitored environments, which could result in missed detections. It's important to recognize that legitimate administrative activities within an enterprise may also generate similar alerts, potentially leading to false positives that need careful analysis.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
