title: Alternate PowerShell Hosts Pipe
id: 58cb02d5-78ce-4692-b3e1-dce850aae41a
related:
- id: ac7102b4-9e1e-4802-9b4f-17c5524c015c
  type: derived
status: test
description: Detects alternate PowerShell hosts potentially bypassing detections looking
  for powershell.exe
references:
- https://threathunterplaybook.com/hunts/windows/190610-PwshAlternateHosts/notebook.html
- https://threathunterplaybook.com/hunts/windows/190410-LocalPwshExecution/notebook.html
author: Roberto Rodriguez @Cyb3rWard0g, Tim Shelton
date: 2019-09-12
modified: 2024-10-07
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: pipe_created
  definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon
    config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon
    configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth
    verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config,
    https://github.com/olafhartong/sysmon-modular. How to test detection? You can
    check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'
detection:
  selection:
    PipeName|startswith: '\PSHost'
  filter_main_generic:
    Image|contains:
    - ':\Program Files\PowerShell\7-preview\pwsh.exe'         # Powershell 7
    - ':\Program Files\PowerShell\7\pwsh.exe'         # Powershell 7
    - ':\Windows\system32\dsac.exe'
    - ':\Windows\system32\inetsrv\w3wp.exe'           # this is sad :,( but it triggers FPs on Exchange servers
    - ':\Windows\System32\sdiagnhost.exe'
    - ':\Windows\system32\ServerManager.exe'
    - ':\Windows\system32\wbem\wmiprvse.exe'
    - ':\Windows\System32\WindowsPowerShell\v1.0\powershell_ise.exe'
    - ':\Windows\System32\WindowsPowerShell\v1.0\powershell.exe'
    - ':\Windows\System32\wsmprovhost.exe'
    - ':\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell_ise.exe'
    - ':\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe'
  filter_optional_sqlserver:   # Microsoft SQL Server\130\Tools\
    Image|startswith:
    - 'C:\Program Files (x86)\'
    - 'C:\Program Files\'
    Image|contains: '\Microsoft SQL Server\'
    Image|endswith: '\Tools\Binn\SQLPS.exe'
  filter_optional_azure_connected_machine_agent:
        # Azure Connected Machine Agent (https://devblogs.microsoft.com/powershell/azure-policy-guest-configuration-client/)
    Image|startswith: 'C:\Program Files\AzureConnectedMachineAgent\GCArcService'
    Image|endswith: '\GC\gc_worker.exe'
  filter_optional_citrix:
    Image|startswith: 'C:\Program Files\Citrix\'
  filter_optional_exchange:
    Image|startswith: 'C:\Program Files\Microsoft\Exchange Server\'
  filter_main_null:
    Image:
  condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- Programs using PowerShell directly without invocation of a dedicated interpreter.
level: medium
notes: |
  n
  ### Technical Context
  The "Alternate PowerShell Hosts Pipe" detection rule is designed to identify alternative instances of PowerShell that may attempt to evade traditional detection mechanisms. Specifically, it focuses on the creation of named pipes that start with '\PSHost', which is often an indicator of PowerShell activity that does not utilize the standard `powershell.exe` executable. The rule captures logs from Windows Sysmon, particularly monitoring events related to named pipe creation (Event ID 17) to detect potential misuse or malicious behavior. This aligns with the MITRE ATT&CK tactic of Execution (ID: T1059.001) related to script execution via PowerShell. By filtering out noise from commonly legitimate applications, such as SQL Server or Citrix, the rule enhances the accuracy of identifying anomalous PowerShell usage.
  ### Investigation Steps
  - **Check Named Pipe Activity:** Utilize Sysmon logs to examine named pipe creation events. Look for any instances of pipes named starting with "PSHost" to correlate with other suspicious activity.
  - **Review Process Tree:** Use EDR to investigate the process tree for any anomalies linked to the identified named pipes. Pay close attention to parent processes and any unusual command lines executed by these processes.
  - **Analyze PowerShell Execution:** Review PowerShell command history using logs from the Windows Event Logs to ascertain whether there were any suspicious commands run at the same time as the detected pipe activity. Focus on obfuscation or unusual scripts.
  - **Cross-reference with Threat Intelligence:** Leverage threat intelligence feeds and SIEM capabilities to enrich the investigation. Look for known bad actors or tactics associated with PowerShell misuse during the relevant time frame.
  ### Prioritization
  The alert generated by this rule carries a medium severity level due to the potential for misuse or abuse of PowerShell. Although not every instance of the alert is malicious, it warrants timely investigation due to the risk associated with unauthorized command execution on enterprise systems.
  ### Blind Spots and Assumptions
  This rule assumes that the logging for named pipes is correctly configured in Sysmon. If the logging is misconfigured or disabled, the detection mechanism will not function as intended. Additionally, the rule may produce false negatives if attackers utilize legitimate PowerShell hosts without named pipes or employ methods to disguise their activities. It's important for detection engineers and SOC analysts to be aware of these limitations and remain vigilant in monitoring for malicious PowerShell activity through alternative methods.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
