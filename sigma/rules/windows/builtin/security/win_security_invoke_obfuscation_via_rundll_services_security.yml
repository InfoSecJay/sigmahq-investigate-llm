title: Invoke-Obfuscation RUNDLL LAUNCHER - Security
id: f241cf1b-3a6b-4e1a-b4f9-133c00dd95ca
related:
- id: 11b52f18-aaec-4d60-9143-5dd8cc4706b9
  type: derived
status: test
description: Detects Obfuscated Powershell via RUNDLL LAUNCHER
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task 23)
author: Timur Zinniatullin, oscd.community
date: 2020-10-18
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: security
  definition: The 'System Security Extension' audit subcategory need to be enabled
    to log the EID 4697
detection:
  selection:
    EventID: 4697
    ServiceFileName|contains|all:
    - 'rundll32.exe'
    - 'shell32.dll'
    - 'shellexec_rundll'
    - 'powershell'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule aims to detect instances where obfuscated PowerShell scripts are executed using the RUNDLL launcher, a common technique used by attackers to evade detection. The rule focuses on Event ID 4697, which is logged when a service is installed in Windows. By examining the relevant service file names associated with RUNDLL, such as `rundll32.exe`, `shell32.dll`, and terms like `powershell`, the detection identifies potential malicious behavior. The presence of these elements in the logs indicates that PowerShell code has been invoked obfuscatively, a technique often employed in attacks to bypass security mechanisms.
  To effectively monitor for this behavior, organizations must ensure that the 'System Security Extension' audit subcategory is enabled, as this setting is crucial for capturing the necessary event logs. Analysts are encouraged to review the logs generated from this setting, especially focusing on the aforementioned file names and parameters.
  ### Investigation Steps
  - Review the logs for Event ID 4697 related to the detection, specifically looking for any entries that include `rundll32.exe` alongside `powershell` or obfuscated commands.
  - Utilize EDR solutions to analyze the host associated with the alert, checking for unusual process activity or any signs of compromise linked to PowerShell.
  - Investigate any recent changes in service installations to determine if the alerted activity corresponds with unauthorized service creation or modification.
  - Examine network logs from the NGFW or Proxy to identify unusual outbound connections that may correlate with the timing of the detected event, indicating potential data exfiltration or command-and-control activity.
