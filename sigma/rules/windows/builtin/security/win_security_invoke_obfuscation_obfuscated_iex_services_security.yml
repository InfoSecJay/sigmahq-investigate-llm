title: Invoke-Obfuscation Obfuscated IEX Invocation - Security
id: fd0f5778-d3cb-4c9a-9695-66759d04702a
related:
- id: 51aa9387-1c53-4153-91cc-d73c59ae1ca9
  type: derived
status: test
description: Detects all variations of obfuscated powershell IEX invocation code generated
  by Invoke-Obfuscation framework from the code block linked in the references
references:
- https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888
author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community
date: 2019-11-08
modified: 2022-11-27
tags:
- attack.defense-evasion
- attack.t1027
logsource:
  product: windows
  service: security
  definition: The 'System Security Extension' audit subcategory need to be enabled
    to log the EID 4697
detection:
  selection_eid:
    EventID: 4697
  selection_servicefilename:
  - ServiceFileName|re: '\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\['
  - ServiceFileName|re: '\$ShellId\[\s*\d{1,3}\s*\]\s*\+\s*\$ShellId\['
  - ServiceFileName|re: '\$env:Public\[\s*\d{1,3}\s*\]\s*\+\s*\$env:Public\['
  - ServiceFileName|re: '\$env:ComSpec\[(\s*\d{1,3}\s*,){2}'
  - ServiceFileName|re: '\\*mdr\*\W\s*\)\.Name'
  - ServiceFileName|re: '\$VerbosePreference\.ToString\('
  - ServiceFileName|re: '\String\]\s*\$VerbosePreference'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The detection rule focuses on identifying obfuscated PowerShell commands that utilize the Invoke-Obfuscation framework, specifically targeting invocations of the `IEX` (Invoke-Expression) command. This type of obfuscation is often employed by adversaries to conceal malicious payloads within PowerShell scripts. The rule captures specific event logs from the Windows Security log, particularly Event ID 4697, which pertains to the logging of service creation events. Through the application of regex patterns, the rule detects abnormal variations in service file names associated with PowerShell, thereby indicating potential evasion tactics used by attackers. The use of regex allows flexibility in capturing multiple obfuscation techniques that may be applied to camouflaged commands.
  ### Investigation Steps
  - Check EDR logs for any recent PowerShell process executions alongside the corresponding command-line arguments to identify potentially malicious scripts.
  - Review the Windows Security logs for Event ID 4697 to trace any service creation events that match the patterns specified in the detection rule.
  - Analyze proxy logs to look for unusual external connections made shortly after the PowerShell invocations, which may indicate communication with a command-and-control (C2) server.
  - Investigate cloud logs (if utilizing cloud infrastructure) to check for any unauthorized resource provisioning or script executions that coincide with the detected PowerShell activity.
