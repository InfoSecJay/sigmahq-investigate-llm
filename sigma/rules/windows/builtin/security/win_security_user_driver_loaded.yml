title: Potential Privileged System Service Operation - SeLoadDriverPrivilege
id: f63508a0-c809-4435-b3be-ed819394d612
status: test
description: |
  Detects the usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver.
  With this privilege, the user can dynamically load and unload device drivers or other code in to kernel mode.
  This user right does not apply to Plug and Play device drivers.
  If you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers.
  This will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.
references:
- https://web.archive.org/web/20230331181619/https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/
- https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4673
author: xknow (@xknow_infosec), xorxes (@xor_xes)
date: 2019-04-08
modified: 2023-01-20
tags:
- attack.defense-evasion
- attack.t1562.001
logsource:
  product: windows
  service: security
detection:
  selection_1:
    EventID: 4673
    PrivilegeList: 'SeLoadDriverPrivilege'
    Service: '-'
  filter_exact:
    ProcessName:
    - 'C:\Windows\System32\Dism.exe'
    - 'C:\Windows\System32\rundll32.exe'
    - 'C:\Windows\System32\fltMC.exe'
    - 'C:\Windows\HelpPane.exe'
    - 'C:\Windows\System32\mmc.exe'
    - 'C:\Windows\System32\svchost.exe'
    - 'C:\Windows\System32\wimserv.exe'
    - 'C:\Windows\System32\RuntimeBroker.exe'
    - 'C:\Windows\System32\SystemSettingsBroker.exe'
    - 'C:\Windows\explorer.exe'
  filter_endswith:
    ProcessName|endswith:
    - '\procexp64.exe'
    - '\procexp.exe'
    - '\procmon64.exe'
    - '\procmon.exe'
    - '\Google\Chrome\Application\chrome.exe'
    - '\AppData\Local\Microsoft\Teams\current\Teams.exe'
  filter_startswith:
    ProcessName|startswith: 'C:\Program Files\WindowsApps\Microsoft'
  condition: selection_1 and not 1 of filter_*
falsepositives:
- Other legimate tools loading drivers. Including but not limited to, Sysinternals,
  CPU-Z, AVs etc. A baseline needs to be created according to the used products and
  allowed tools. A good thing to do is to try and exclude users who are allowed to
  load drivers.
level: medium
notes: |
  ### Technical Context
  The Sigma rule detects potential misuse of the 'SeLoadDriverPrivilege' privilege on Windows systems, which allows users to load or unload device drivers. This capability is crucial for legitimate system operations, especially for privileged users and administrative processes. However, it can also be leveraged by malicious actors or compromised applications to introduce malware in the kernel, potentially leading to persistent threats. The rule relies on the Windows security event log, particularly Event ID 4673, which records attempts to use this privilege. To minimize false positives, the rule filters out common legitimate processes known to use this privilege, allowing incident responders to focus on suspicious activity likely associated with unauthorized driver manipulation.
  ### Investigation Steps
  - Review the context around the triggered alert in your EDR platform, focusing on the user account attempting the driver load and the associated process.
  - Correlate the Event ID 4673 logs with logs from your AV or NGFW to identify any previous alerts linked to the same process or user.
  - Use system logs to trace the origin of the process that triggered the alert, analyzing the process tree for any anomalous behavior or escalated privileges.
  - If applicable, check cloud logs where similar activities might be reported, particularly in virtual environments or if using cloud-based Windows instances.
