title: Invoke-Obfuscation Via Use Clip - Security
id: 1a0a2ff1-611b-4dac-8216-8a7b47c618a6
related:
- id: 63e3365d-4824-42d8-8b82-e56810fefa0c
  type: derived
status: test
description: Detects Obfuscated Powershell via use Clip.exe in Scripts
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task29)
author: Nikita Nazarov, oscd.community
date: 2020-10-09
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: security
  definition: The 'System Security Extension' audit subcategory need to be enabled
    to log the EID 4697
detection:
  selection:
    EventID: 4697
    ServiceFileName|contains: '(Clipboard|i'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the execution of obfuscated PowerShell scripts via the use of the Clip.exe utility, a common tool in the execution phase of attacks aimed at evading security measures. It focuses specifically on monitoring EventID 4697, which logs the creation of a service. The rule looks for service file names that contain specific keywords related to Clipboard functionality, indicating potential malicious activity. This detection falls under the MITRE ATT&CK framework, specifically targeting techniques related to defense evasion (T1027) and execution of commands through PowerShell (T1059.001). The data sources involved in this detection primarily include Windows Security logs where the relevant events are recorded.
  ### Investigation Steps
  - **Verify Event Logs**: Utilize Windows Security logs to confirm the occurrence of EventID 4697 that triggered the alert. Look for any subtleties in the service file name that may confirm the usage of Clip.exe.
  - **Analyze Process Activity**: Leverage EDR tools to investigate further by examining the processes linked to the identified service. Ensure to check for any unusual parent-child process relationships.
  - **Review Script Content**: If possible, access any scripts or commands executed alongside Clip.exe by examining PowerShell event logs (if logging is enabled). Look for obfuscation patterns and unexpected commands.
  - **Network Traffic Analysis**: Use NDR tools to scrutinize outbound network connections initiated around the time of the alert. This can help identify any malicious calls to external servers or command and control infrastructure.
  ### Prioritization
  The alert is categorized as high severity because the use of obfuscated PowerShell scripts often indicates an advanced threat actor attempting to bypass security measures, which can lead to significant breaches if not addressed promptly.
  ### Blind Spots and Assumptions
  This rule may not fire if the logging for EventID 4697 is disabled or misconfigured, which would prevent the system from capturing the necessary data. Additionally, adversaries may utilize legitimate administrative tools in ways that don't generate alerts, making it challenging to detect every attempt at evasion or obfuscation. It is also assumed that security configurations are aligned with best practices to ensure comprehensive telemetry collection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
