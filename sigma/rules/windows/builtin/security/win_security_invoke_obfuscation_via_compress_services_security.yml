title: Invoke-Obfuscation COMPRESS OBFUSCATION - Security
id: 7a922f1b-2635-4d6c-91ef-af228b198ad3
related:
- id: 175997c5-803c-4b08-8bb0-70b099f47595
  type: derived
status: test
description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task 19)
author: Timur Zinniatullin, oscd.community
date: 2020-10-18
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: security
  definition: The 'System Security Extension' audit subcategory need to be enabled
    to log the EID 4697
detection:
  selection:
    EventID: 4697
    ServiceFileName|contains|all:
    - 'new-object'
    - 'text.encoding]::ascii'
    - 'readtoend'
    ServiceFileName|contains:
    - 'system.io.compression.deflatestream'
    - 'system.io.streamreader'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This detection rule focuses on identifying potentially malicious use of obfuscation techniques in PowerShell scripts, specifically targeting the "COMPRESS OBFUSCATION" method. It operates by monitoring Windows security logs for Event ID 4697, which denotes the creation of a new service. The rule looks for specific PowerShell commands and .NET namespaces, such as 'new-object', 'text.encoding]::ascii', and 'system.io.compression.deflatestream', among others. This combination of keywords indicates that an obfuscated script may be attempting to execute in the environment, highlighting attempts to evade detection and security measures.
  To successfully trigger an alert, the rule checks for the presence of these keywords in conjunction with the logging mechanisms of Windows systems. By analyzing how these obfuscation techniques are orchestrated, security teams can detect and respond to potentially harmful activities in real time.
  ### Investigation Steps
  - Review the security logs in the SIEM to identify the context of the alert, including time, user accounts involved, and associated processes.
  - Utilize the EDR tool to examine the suspicious PowerShell command execution in detail, paying attention to parent-child process relationships and any related artifacts.
  - Investigate network traffic using the NDR to identify any outbound connections made by the potentially suspicious PowerShell session, and check for anomalous data exfiltration patterns.
  - Check the proxy logs for any unusual web requests or downloads associated with the time of the detected obfuscation attempt, which may indicate additional malicious activities or indicators of compromise.
