title: Invoke-Obfuscation COMPRESS OBFUSCATION - Security
id: 7a922f1b-2635-4d6c-91ef-af228b198ad3
related:
- id: 175997c5-803c-4b08-8bb0-70b099f47595
  type: derived
status: test
description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task 19)
author: Timur Zinniatullin, oscd.community
date: 2020-10-18
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: security
  definition: The 'System Security Extension' audit subcategory need to be enabled
    to log the EID 4697
detection:
  selection:
    EventID: 4697
    ServiceFileName|contains|all:
    - 'new-object'
    - 'text.encoding]::ascii'
    - 'readtoend'
    ServiceFileName|contains:
    - 'system.io.compression.deflatestream'
    - 'system.io.streamreader'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  n
  ### Technical Context
  The "Invoke-Obfuscation COMPRESS OBFUSCATION" rule is designed to detect obfuscated PowerShell commands that leverage the .NET compression libraries for evading detection. When an adversary executes encoded scripts or uses techniques to hide their commands from standard visibility, they often manipulate execution through calls such as "new-object" and "readtoend" in combination with compression classes found in .NET. This rule specifically targets EventID 4697 from Windows Security logs, which provide information about services configured on the system. By monitoring these logs for suspicious patterns related to service file names that match obfuscation techniques, the rule enhances detection capabilities. This alert directly corresponds with the MITRE ATT&CK tactics and techniques of Defense Evasion (T1027) and Execution (T1059.001).
  ### Investigation Steps
  - **Check Event Logs**: Review Windows Security Event logs focusing on EventID 4697 to identify abnormal service creation related to PowerShell compression techniques.
  - **Analyze Process Creation**: Utilize EDR tools to trace the process creation tree stemming from the initial PowerShell execution, examining command-line arguments and parent processes for any anomalies.
  - **Inspect Network Activity**: Use Network Detection and Response (NDR) tools to check for any unusual outbound connections that correspond with the timing of detected obfuscation activity, which may indicate command and control (C2) communication.
  - **Review File Changes**: Investigate any files created or modified by the process using AV or file integrity monitoring tools, specifically looking for unusual file names or extensions associated with the PowerShell script.
  ### Prioritization
  This alert is considered of medium severity, as obfuscated PowerShell could indicate an attempt to bypass defenses, potentially leading to malicious actions. However, the true intent of the activity needs to be confirmed through investigation, as these techniques can sometimes be used for legitimate purposes.
  ### Blind Spots and Assumptions
  This rule may not fire in instances where the PowerShell execution is conducted outside of logged contexts (e.g., from a non-privileged user without service creation permissions), or if the EventID 4697 auditing is not properly configured. Additionally, sophisticated adversaries may use alternative methods to execute their scripts, evading detection by not utilizing the compression libraries, thus presenting false negatives in such scenarios.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
