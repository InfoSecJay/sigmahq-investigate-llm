title: Failed Code Integrity Checks
id: 470ec5fa-7b4e-4071-b200-4c753100f49b
status: stable
description: |
  Detects code integrity failures such as missing page hashes or corrupted drivers due unauthorized modification. This could be a sign of tampered binaries.
references:
- https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5038
- https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-6281
author: Thomas Patzke
date: 2019-12-03
modified: 2025-01-19
tags:
- attack.defense-evasion
- attack.t1027.001
logsource:
  product: windows
  service: security
detection:
  selection:
    EventID:
    - 5038
    - 6281
  filter_optional_crowdstrike:
    param1|contains:
    - '\CSFalconServiceUninstallTool_'
    - '\Program Files\CrowdStrike\'
    - '\System32\drivers\CrowdStrike\'
    - '\Windows\System32\ScriptControl64_'
  filter_optional_sophos:
    param1|contains: '\Program Files\Sophos\'
  condition: selection and not 1 of filter_optional_*
falsepositives:
- Disk device errors
level: informational
notes: |
  ### Technical Context
  The "Failed Code Integrity Checks" rule is designed to detect failures related to code integrity, specifically focusing on events where digital signatures of system files, drivers, or other binaries do not match expected values. This analysis centers around Event IDs 5038 and 6281 from Windows security logs. These events indicate potential unauthorized modifications, such as missing page hashes or corrupted files, which may suggest tampered binaries, often a tactic used by attackers to exploit systems. The rule selectively includes context by excluding known benign modifications, particularly those related to CrowdStrike and Sophos services.
  This analytical approach allows incident responders to identify potential security threats while minimizing false positives from known legitimate processes. The rule's effectiveness relies on parsing and understanding Windows security logging, focusing on the integrity of files and the status of system protections.
  ### Investigation Steps
  - Review the incident details in your SIEM to assess the specific Event IDs (5038 and 6281) that triggered the alert, noting any unusual file paths or names indicative of potential tampering.
  - Utilize EDR tools to inspect the files or binaries associated with the detected events, ensuring to cross-reference checksums and signatures against known-good states.
  - Search logs from AV and endpoint protections to determine if any malware signatures or alerts have been triggered that align with the timing of the integrity failures.
  - Analyze network traffic and Proxy logs for unusual outbound connections or command-and-control communications that may accompany compromised files or binaries, which can provide additional context for the failure alerts.
