title: Failed Code Integrity Checks
id: 470ec5fa-7b4e-4071-b200-4c753100f49b
status: stable
description: |
  Detects code integrity failures such as missing page hashes or corrupted drivers due unauthorized modification. This could be a sign of tampered binaries.
references:
- https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5038
- https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-6281
author: Thomas Patzke
date: 2019-12-03
modified: 2025-01-19
tags:
- attack.defense-evasion
- attack.t1027.001
logsource:
  product: windows
  service: security
detection:
  selection:
    EventID:
    - 5038
    - 6281
  filter_optional_crowdstrike:
    param1|contains:
    - '\CSFalconServiceUninstallTool_'
    - '\Program Files\CrowdStrike\'
    - '\System32\drivers\CrowdStrike\'
    - '\Windows\System32\ScriptControl64_'
  filter_optional_sophos:
    param1|contains: '\Program Files\Sophos\'
  condition: selection and not 1 of filter_optional_*
falsepositives:
- Disk device errors
level: informational
notes: |
  ### Technical Context
  The "Failed Code Integrity Checks" detection rule identifies instances where code integrity verification has failed on Windows systems, specifically targeting Event IDs 5038 and 6281. This rule focuses on detecting unauthorized modifications or tampering with system files or drivers, which may indicate potential malicious activity. Code integrity checks are essential for maintaining system security, as they ensure that unaltered and legitimate code is being executed. Analysts will primarily monitor Windows Security logs, particularly looking for specific events that indicate issues with code integrity, such as missing page hashes or corrupted drivers. The rule maps to the MITRE ATT&CK tactic of Defense Evasion (T1027.001: Obfuscated Files or Information), where attackers attempt to hide their presence by modifying legitimate binaries or drivers.
  ### Investigation Steps
  - **Review Event Logs:** Check the Windows Security event logs for Event IDs 5038 and 6281 to identify the specific instances of code integrity failures and gather associated details.
  - **Correlate with EDR Data:** Utilize EDR tools to obtain insights into process activity around the time of the integrity check failures, looking for any suspicious behavior or anomalies.
  - **Investigate File Modifications:** Query for recent modifications to the affected files or drivers, comparing them against known good hashes or legitimate sources to determine the degree of changes.
  - **Assess Additional Security Alerts:** Look into other related alerts from AV solutions or endpoint protection tools that may provide context on whether malicious behavior is linked to the integrity check failures.
  ### Prioritization
  This alert is assessed as informational because, while it indicates a potential issue with code integrity, it does not inherently signify an immediate threat. However, it warrants further investigation as it may correlate with more severe threats.
  ### Blind Spots and Assumptions
  This rule may not detect modifications performed by advanced persistent threats (APTs) utilizing sophisticated techniques to evade detection, such as stealthily modifying code without triggering integrity checks. Additionally, if systems have legitimate applications that modify drivers or system files frequently, this may lead to false positives. It is essential for detection engineers to ensure that the rule is calibrated for the specific environment and be aware that changes in legitimate software could affect the rule's effectiveness.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
