title: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - Security
id: 4c54ba8f-73d2-4d40-8890-d9cf1dca3d30
related:
- id: 14bcba49-a428-42d9-b943-e2ce0f0f7ae6
  type: derived
status: test
description: Detects Obfuscated Powershell via VAR++ LAUNCHER
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task27)
author: Timur Zinniatullin, oscd.community
date: 2020-10-13
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: security
  definition: The 'System Security Extension' audit subcategory need to be enabled
    to log the EID 4697
detection:
  selection:
    EventID: 4697
        # ServiceFileName|re: '(?i)&&set.*(\{\d\}){2,}\\\"\s+?\-f.*&&.*cmd.*\/c' # FPs with |\/r
        # Example 1: CMD /C"sET KUR=Invoke-Expression (New-Object Net.WebClient).DownloadString&&Set MxI=C:\wINDowS\sYsWow64\winDOWspoWERSheLl\V1.0\PowerShelL.EXe ${ExEcut`IoN`cON`TExT}.\"invo`kEcoMm`A`ND\".( \"{2}{1}{0}\" -f 'pt','EscRi','INvOk' ).Invoke( ( .( \"{0}{1}\" -f'D','IR' ) ( \"{0}{1}\"-f'ENV:kU','R')).\"vAl`Ue\" )&& CMD /C%mXI%"
        # Example 2: c:\WiNDOWS\sYSTEm32\CmD.exE /C "sEt DeJLz=Invoke-Expression (New-Object Net.WebClient).DownloadString&&set yBKM=PoWERShelL -noeX ^^^&(\"{2}{0}{1}\"-f '-ItE','m','seT') ( 'V' + 'a'+ 'RiAblE:z8J' +'U2' + 'l' ) ([TYpE]( \"{2}{3}{0}{1}\"-f 'e','NT','e','NViRONM' ) ) ; ^^^& ( ( [sTrIng]${VE`Rbo`SepReFER`Ence})[1,3] + 'X'-joIN'')( ( (.('gI') ('V' + 'a' + 'RIAbLe:z8j' + 'u2' +'l' ) ).vALUe::( \"{2}{5}{0}{1}{6}{4}{3}\" -f 'IRo','Nm','GETE','ABlE','I','nv','enTVAr').Invoke(( \"{0}{1}\"-f'd','ejLz' ),( \"{1}{2}{0}\"-f'cEss','P','RO') )) )&& c:\WiNDOWS\sYSTEm32\CmD.exE /C %ybkm%"
    ServiceFileName|contains|all:
    - '&&set'
    - 'cmd'
    - '/c'
    - '-f'
    ServiceFileName|contains:
    - '{0}'
    - '{1}'
    - '{2}'
    - '{3}'
    - '{4}'
    - '{5}'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The Sigma rule titled "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION" is designed to detect obfuscated PowerShell commands that employ the VAR++ launcher technique, which is often used to bypass security mechanisms and execute malicious scripts. It looks specifically for Windows Security event logs, particularly Event ID 4697, which is generated when a service is installed on the system, and employs a regex pattern to identify command-line executions featuring obfuscation patterns. This includes the use of keywords such as "set," "cmd," and "Invoke-Expression" coupled with various obfuscation tactics to mask the true intent of the command being executed. The detection correlates with the MITRE ATT&CK techniques T1027 (Obfuscated Files or Information) and T1059.001 (PowerShell), which highlight the operations of evading detection through command obfuscation.
  ### Investigation Steps
  - **Review Event Logs:** Examine the logs for Event ID 4697 to identify which services are being installed and the associated command-line arguments used, paying attention to the presence of obfuscation-related keywords.
  - **Analyze Process Creation:** Utilize EDR tools to perform a thorough analysis of process creation events at the time of the alert. Focus on processes that were spawned by PowerShell or CMD and look for those running with unusual parent/child relationships.
  - **Inspect Network Connections:** Check for outgoing network connections during the time of the event in NDR logs to identify any suspicious communications, especially to known malicious IP addresses or domains.
  - **Evaluate System Changes:** Investigate any recent changes to the system, such as new services being added or modified that may indicate unauthorized changes related to the detected activity.
  ### Prioritization
  Given the high severity level of this alert, the presence of obfuscated PowerShell commands could indicate an active threat attempting to perform unauthorized actions within the environment, thus warranting immediate investigation.
  ### Blind Spots and Assumptions
  This detection rule relies heavily on the successful logging of Event ID 4697, which can be impacted if the auditing settings are not properly configured. Additionally, sophisticated adversaries may use custom obfuscation techniques that are not captured by the regex patterns used in this rule, potentially allowing malicious activity to go undetected. False positives are possible due to legitimate administrative activities that utilize similar command structures.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
