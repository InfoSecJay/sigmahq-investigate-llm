title: Invoke-Obfuscation Via Use Rundll32 - Security
id: cd0f7229-d16f-42de-8fe3-fba365fbcb3a
related:
- id: 641a4bfb-c017-44f7-800c-2aee0184ce9b
  type: derived
status: test
description: Detects Obfuscated Powershell via use Rundll32 in Scripts
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task30)
author: Nikita Nazarov, oscd.community
date: 2020-10-09
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: security
  definition: The 'System Security Extension' audit subcategory need to be enabled
    to log the EID 4697
detection:
  selection:
    EventID: 4697
    ServiceFileName|contains|all:
    - '&&'
    - 'rundll32'
    - 'shell32.dll'
    - 'shellexec_rundll'
    ServiceFileName|contains:
    - value
    - invoke
    - comspec
    - iex
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule identifies the use of obfuscated PowerShell scripts executed via the `rundll32` command. Specifically, it looks for instances where `rundll32` is invoked with parameters that could indicate malicious intent, such as those containing specific keywords like `value`, `invoke`, `comspec`, and `iex`. The primary data source for this rule is Windows Security logs, focusing on Event ID 4697 which indicates a new service installation. The presence of strings like `shell32.dll` and `shellexec_rundll` further strengthens the detection hypothesis by pinpointing the usage of `rundll32` to execute potentially harmful scripts. This rule is aligned with the MITRE ATT&CK tactics, particularly defense evasion (T1027) and execution (T1059.001), as adversaries often use obfuscation to hide their activities.
  ### Investigation Steps
  - **Review Alert Context:** Examine the alert details to understand the parameters passed to `rundll32` and evaluate the service name and its source directory for any signs of unusual behavior or known malicious indicators.
  - **Analyze Process Execution:** Utilize EDR tools to trace the parent process of the `rundll32` invocation, confirming whether it originated from a legitimate application or was spawned by a suspicious process.
  - **Inspect Related Logs:** Check Windows Security logs (Event ID 4697) and System event logs for any related service creation events, as well as correlating information from Sysmon logs to identify any additional indicators of compromise.
  - **Cross-reference with Threat Intelligence:** Engage with threat intelligence sources to verify if the observed command patterns or service names have been linked to known threats or reported malwares techniques.
  ### Prioritization
  Given the potential for obfuscation techniques used in automated attacks, this alert is classified as high severity. This is particularly important in an enterprise environment where the execution of malicious scripts could lead to data breaches or system compromises.
  ### Blind Spots and Assumptions
  This rule may not fire in situations where the logging of Event ID 4697 is not enabled or configured incorrectly, resulting in the absence of critical log data. Additionally, if an adversary uses a different method to execute PowerShell scripts or if they operate within a trusted application context, the detection could be bypassed. Analysts should also consider that legitimate applications may occasionally use `rundll32` for benign purposes, which could lead to false positives if not properly scrutinized.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
