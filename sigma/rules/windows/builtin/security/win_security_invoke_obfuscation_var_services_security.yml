title: Invoke-Obfuscation VAR+ Launcher - Security
id: dcf2db1f-f091-425b-a821-c05875b8925a
related:
- id: 8ca7004b-e620-4ecb-870e-86129b5b8e75
  type: derived
status: test
description: Detects Obfuscated use of Environment Variables to execute PowerShell
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task 24)
author: Jonathan Cheong, oscd.community
date: 2020-10-15
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: security
  definition: The 'System Security Extension' audit subcategory need to be enabled
    to log the EID 4697
detection:
  selection:
    EventID: 4697
        # ServiceFileName|re: 'cmd.{0,5}(?:\/c|\/r)(?:\s|)\"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\\"\s+?\-f(?:.*\)){1,}.*\"'
        # Example 1: C:\winDoWs\SySTeM32\cmd.Exe /C"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\"{2}{3}{0}{1}\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\"IN`VO`KecOmMaND\".\"inVo`KES`crIPt\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\"{1}{4}{2}{3}{0}\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \"{0}{1}\"-f'n','oti' ),( \"{0}{1}\" -f'pRoC','esS') )) )"
        # Example 2: cMD.exe /C "seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\"{1}{0}{2}{3}\" -f 'eT-vaR','G','iab','lE' ) (\"{0}{1}\" -f '*m','DR*' ) ).\"na`ME\"[3,11,2]-JOIN'' ) ( ( ^&(\"{0}{1}\" -f'g','CI' ) (\"{0}{1}\" -f 'ENV',':SlDb' ) ).\"VA`luE\" ) "
    ServiceFileName|contains|all:
    - 'cmd'
    - '"set'
    - '-f'
    ServiceFileName|contains:
    - '/c'
    - '/r'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The Sigma rule titled "Invoke-Obfuscation VAR+ Launcher" aims to detect obfuscated PowerShell scripts executed through CMD that utilize environment variables. This obfuscation technique is often employed by threat actors to evade detection while executing potentially malicious commands. The rule specifically targets Windows Security logs, looking for Event ID 4697, which records the creation of a service, to determine if the command line contains suspicious patterns such as 'cmd', 'set', and '-f'. When executed, these commands can download and execute scripts from the internet, further showcasing their potential malicious intent. This detection falls under the MITRE ATT&CK framework, specifically under the tactics of "Defense Evasion" and "Execution" associated with techniques T1027 (Obfuscated Files or Information) and T1059.001 (PowerShell).
  ### Investigation Steps
  - **Review Security Event Logs**: Investigate Windows Security event logs (Event ID 4697) for any unusual service creation activity that matches the detected obfuscated PowerShell command patterns.
  - **Examine EDR Alerts**: Check your EDR solution for any associated alerts related to the process creation or execution of command strings that resemble the obfuscated patterns, focusing particularly on PowerShell and CMD executions.
  - **Analyze Process Tree**: Utilize EDR tools to analyze the process tree at the time of the alert to establish if any suspicious parent-child process relationships exist, which could indicate an infection chain.
  - **Check Network Connections**: Review logs from your Network Detection and Response (NDR) solution for associated outbound connections initiated by the CMD or PowerShell processes, helping identify potential data exfiltration or command and control communication.
  ### Prioritization
  The alert is categorized as high severity due to the use of obfuscated commands to execute potentially malicious scripts. Such behavior is indicative of active attempts to bypass security measures, warranting immediate investigation.
  ### Blind Spots and Assumptions
  The detection may not trigger if the necessary Windows Security audit logs for Event ID 4697 are not enabled or if commands are executed in less common or hidden ways that do not utilize CMD or PowerShell in standard manners. Additionally, sophisticated attackers might adopt further obfuscation or use alternative command line interfaces, such as WMI, thereby circumventing this detection rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and relevance for a specific environment, we recommend validating the content and adapting it to suit specific operational needs. Please communicate any changes to the detection engineering team.
