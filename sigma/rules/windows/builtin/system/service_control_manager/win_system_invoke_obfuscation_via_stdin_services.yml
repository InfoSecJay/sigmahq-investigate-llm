title: Invoke-Obfuscation Via Stdin - System
id: 487c7524-f892-4054-b263-8a0ace63fc25
status: test
description: Detects Obfuscated Powershell via Stdin in Scripts
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task28)
author: Nikita Nazarov, oscd.community
date: 2020-10-12
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: system
detection:
  selection:
    Provider_Name: 'Service Control Manager'
    EventID: 7045
        # ImagePath|re: '(?i)(set).*&&\s?set.*(environment|invoke|\${?input).*&&.*"'
    ImagePath|contains|all:
    - 'set'
    - '&&'
    ImagePath|contains:
    - 'environment'
    - 'invoke'
    - 'input'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The detection rule titled "Invoke-Obfuscation Via Stdin 
  - System" aims to identify obfuscated PowerShell commands that potentially indicate malicious activity. This rule focuses on monitoring specific event logs generated by the Service Control Manager, specifically Event ID 7045, indicating the installation of a new service. The rule looks for the presence of key phrases in the command used to create the service, particularly when they appear in combination: "set", "&&", "environment", "invoke", and "input". By analyzing these command-line parameters, the rule aims to expose potentially harmful scripts that could be leveraging PowerShell's capabilities in a covert manner.
  This behavior aligns with the MITRE ATT&CK techniques related to defense evasion (T1027) and PowerShell execution (T1059.001), where adversaries may attempt to obfuscate their commands to avoid detection. The telemetry involved in this detection primarily comes from Windows Security event logs, specifically from logging the activities of the Service Control Manager.
  ### Investigation Steps
  - **Review Event Logs:** Check the Windows Event Logs focusing on Event ID 7045 to identify any new services created around the time of the alert generation. Look for any suspicious command line arguments associated with the service.
  - **Confirm Process Activity:** Use EDR tools to track the process history of the newly created service. Look for any activity from PowerShell or other associated processes around the time of creation.
  - **Analyze Registry Changes:** Investigate the Windows Registry for any modifications related to the suspicious service. Look for unusual entries or paths that deviate from standard configurations.
  - **Network Traffic Evaluation:** Examine network connections made by the relevant process using NDR tools. Look for connections to known malicious IP addresses or domain names associated with malicious activity.
  ### Prioritization
  Given the severity level of high, alerts generated from this rule prioritize immediate investigation due to the potential for serious impacts of obfuscated PowerShell code execution. Malicious use of PowerShell can lead to more extensive breaches if not promptly addressed.
  ### Blind Spots and Assumptions
  This rule may not detect all obfuscated PowerShell commands, particularly if they do not follow the specific patterns defined in the selection criteria. Additionally, the rule assumes that the Service Control Manager is enabled and records all relevant events; environments with limited logging may miss these events. Adversaries may also employ alternative methods to invoke PowerShell or disguise their commands to evade detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
