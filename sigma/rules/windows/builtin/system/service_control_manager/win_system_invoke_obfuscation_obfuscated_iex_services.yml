title: Invoke-Obfuscation Obfuscated IEX Invocation - System
id: 51aa9387-1c53-4153-91cc-d73c59ae1ca9
status: test
description: Detects all variations of obfuscated powershell IEX invocation code generated
  by Invoke-Obfuscation framework from the code block linked in the references
references:
- https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888
author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community
date: 2019-11-08
modified: 2022-11-27
tags:
- attack.defense-evasion
- attack.t1027
logsource:
  product: windows
  service: system
detection:
  selection_eid:
    EventID: 7045
  selection_imagepath:
  - ImagePath|re: '\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\['
  - ImagePath|re: '\$ShellId\[\s*\d{1,3}\s*\]\s*\+\s*\$ShellId\['
  - ImagePath|re: '\$env:Public\[\s*\d{1,3}\s*\]\s*\+\s*\$env:Public\['
  - ImagePath|re: '\$env:ComSpec\[(\s*\d{1,3}\s*,){2}'
  - ImagePath|re: '\\*mdr\*\W\s*\)\.Name'
  - ImagePath|re: '\$VerbosePreference\.ToString\('
  - ImagePath|re: '\String\]\s*\$VerbosePreference'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule is designed to identify the use of obfuscated PowerShell commands commonly generated by the Invoke-Obfuscation framework. It focuses on monitoring Windows System event logs, specifically looking for Event ID 7045, which indicates when a new service is created. The rule inspects the `ImagePath` for various patterns that suggest obfuscation methods related to PowerShell invocation, such as manipulations around `$PSHome`, `$ShellId`, and environment variables like `$env:Public`. These patterns are indicative of attempts to conceal the actual commands being executed, aligning with the MITRE ATT&CK technique T1027 (Obfuscated Files or Information), which focuses on defense evasion tactics employed by adversaries.
  ### Investigation Steps
  - **Review EDR Alerts:** Investigate any alerts in your endpoint detection response (EDR) solution linked to this detection, noting any suspicious PowerShell executions and the originating processes.
  - **Analyze Windows System Logs:** Inspect Windows System logs for Event ID 7045 around the same time as the alert was generated to correlate the creation of the potential obfuscated command.
  - **Check Network Connections:** Use network detection tools to analyze outbound connections made by the identified process, looking for connections to suspicious IPs or domains which may indicate exfiltration or command-and-control (C2) communication.
  - **Examine Process Behavior:** Utilize process analysis tools to observe the runtime behavior of the PowerShell process, looking for patterns such as unexpected parent-child process relationships or abnormal system interactions.
  ### Prioritization
  The alert is classified as high severity due to the nature of obfuscation, which typically indicates intent to evade detection by security mechanisms. Prompt investigation is crucial, as it can lead to uncovering malicious activity that may result in data breaches or further compromise.
  ### Blind Spots and Assumptions
  This rule may not fire in cases where obfuscation techniques do not align with the defined regex patterns or where malicious actors utilize alternative methods to invoke PowerShell. Additionally, if the Event ID 7045 is suppressed or not logged due to system configurations or log retention policies, detection could be missed. Responders should be aware that advanced adversaries may employ custom scripting or modifications to bypass such detections entirely.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
