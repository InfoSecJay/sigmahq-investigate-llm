title: Invoke-Obfuscation VAR+ Launcher - System
id: 8ca7004b-e620-4ecb-870e-86129b5b8e75
status: test
description: Detects Obfuscated use of Environment Variables to execute PowerShell
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task 24)
author: Jonathan Cheong, oscd.community
date: 2020-10-15
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: system
detection:
  selection:
    Provider_Name: 'Service Control Manager'
    EventID: 7045
        # ImagePath|re: 'cmd.{0,5}(?:\/c|\/r)(?:\s|)\"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\\"\s+?\-f(?:.*\)){1,}.*\"'
        # Example 1: C:\winDoWs\SySTeM32\cmd.Exe /C"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\"{2}{3}{0}{1}\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\"IN`VO`KecOmMaND\".\"inVo`KES`crIPt\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\"{1}{4}{2}{3}{0}\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \"{0}{1}\"-f'n','oti' ),( \"{0}{1}\" -f'pRoC','esS') )) )"
        # Example 2: cMD.exe /C "seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\"{1}{0}{2}{3}\" -f 'eT-vaR','G','iab','lE' ) (\"{0}{1}\" -f '*m','DR*' ) ).\"na`ME\"[3,11,2]-JOIN'' ) ( ( ^&(\"{0}{1}\" -f'g','CI' ) (\"{0}{1}\" -f 'ENV',':SlDb' ) ).\"VA`luE\" ) "
    ImagePath|contains|all:
    - 'cmd'
    - '"set'
    - '-f'
    ImagePath|contains:
    - '/c'
    - '/r'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "Invoke-Obfuscation VAR+ Launcher 
  - System" aims to detect obfuscated PowerShell execution, particularly when environment variables are manipulated to bypass security controls. This is achieved by monitoring Windows Event Logs, specifically looking at Event ID 7045 generated by the Service Control Manager. The rule examines the command-line parameters used to launch `cmd.exe`, looking for patterns that indicate obfuscated PowerShell commands utilizing environment variable manipulation. These obfuscated commands often attempt to evade detection methods by making it challenging to identify the execution intent clearly. The associated MITRE ATT&CK techniques include T1027 (Obfuscated Files or Information) and T1059.001 (PowerShell), which detail how adversaries obfuscate their activities to evade security mechanisms.
  In practice, the rule specifically filters logs where the `ImagePath` contains typical command-line patterns indicative of obfuscation, including `/C`, `/r`, and usage of the `set` command. By doing this, it detects attempts to run malicious PowerShell scripts while leveraging environment variables for parameterization and obfuscation, highlighting elevated risk when such events are logged.
  ### Investigation Steps
  - **Check EDR Alerts:** Review alerts generated by the EDR solution for any related malicious activity linked to PowerShell execution and unusual process behavior around the time the event was logged.
  - **Analyze Process Tree:** Use EDR tools to examine the process tree for `cmd.exe` and `powershell.exe` associated with the detected event to identify additional commands executed and their origins.
  - **Review Event Logs:** Investigate the Windows Security and Sysmon logs for other related events (e.g., process creation, image loads) that could provide context about the nature and intent of the obfuscated command.
  - **Examine Network Activity:** Utilize network logs (NDR or NGFW) to trace outbound connections made by `powershell.exe` or related processes during the event timeframe for signs of data exfiltration or connections to known malicious domains.
  ### Prioritization
  This alert is considered high severity due to the potential implications of executing obfuscated PowerShell scripts that can signify ongoing adversarial tactics, such as intrusion, data theft, or the deployment of further attacks.
  ### Blind Spots and Assumptions
  There are potential blind spots in this rule, as legitimate system operations or administrative scripts using similar command patterns may trigger false positives. Additionally, adversaries may employ alternative execution methods, such as using `WMI` or `schtasks`, that bypass detection measures entirely. Furthermore, the rule assumes proper logging settings are in place; if logging is disabled or misconfigured on the target systems, it may fail to capture relevant events, leading to missed detections.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
