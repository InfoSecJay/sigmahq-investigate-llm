title: Invoke-Obfuscation VAR+ Launcher - System
id: 8ca7004b-e620-4ecb-870e-86129b5b8e75
status: test
description: Detects Obfuscated use of Environment Variables to execute PowerShell
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task 24)
author: Jonathan Cheong, oscd.community
date: 2020-10-15
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: system
detection:
  selection:
    Provider_Name: 'Service Control Manager'
    EventID: 7045
        # ImagePath|re: 'cmd.{0,5}(?:\/c|\/r)(?:\s|)\"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\\"\s+?\-f(?:.*\)){1,}.*\"'
        # Example 1: C:\winDoWs\SySTeM32\cmd.Exe /C"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\"{2}{3}{0}{1}\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\"IN`VO`KecOmMaND\".\"inVo`KES`crIPt\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\"{1}{4}{2}{3}{0}\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \"{0}{1}\"-f'n','oti' ),( \"{0}{1}\" -f'pRoC','esS') )) )"
        # Example 2: cMD.exe /C "seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\"{1}{0}{2}{3}\" -f 'eT-vaR','G','iab','lE' ) (\"{0}{1}\" -f '*m','DR*' ) ).\"na`ME\"[3,11,2]-JOIN'' ) ( ( ^&(\"{0}{1}\" -f'g','CI' ) (\"{0}{1}\" -f 'ENV',':SlDb' ) ).\"VA`luE\" ) "
    ImagePath|contains|all:
    - 'cmd'
    - '"set'
    - '-f'
    ImagePath|contains:
    - '/c'
    - '/r'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule detects obfuscated PowerShell execution leveraging environment variables. Specifically, it identifies instances where obfuscated scripts are invoked through the Windows Service Control Manager using the `cmd.exe` command line. The rule looks for specific attributes in the event logs generated by the Service Control Manager (EventID 7045) that indicate the execution of commands configuring environment variables with PowerShell. The obfuscated command structure may contain patterns like "set" to define variables followed by complex expressions that invoke PowerShell scripts. By focusing on the various attributes in the command, including the presence of 'cmd', 'set', and flags for execution, this rule helps pinpoint potentially malicious activities obscured through evasion techniques often used by threat actors.
  ### Investigation Steps
  - Review the EventID 7045 logs in your EDR to identify instances of the obfuscated PowerShell execution that triggered the alert.
  - Analyze the command line executed by `cmd.exe` using logs from process creation events to understand the context and any parameters passed.
  - Correlate the source IP and user account associated with the cmd execution against your proxy and VPN logs for any unusual access patterns.
  - If cloud resources are involved, check AWS CloudTrail, GCP Activity logs, or Azure Monitor for any related API calls or resource modifications that could indicate further compromise.
