title: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - System
id: 14bcba49-a428-42d9-b943-e2ce0f0f7ae6
status: test
description: Detects Obfuscated Powershell via VAR++ LAUNCHER
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task27)
author: Timur Zinniatullin, oscd.community
date: 2020-10-13
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: system
detection:
  selection:
    Provider_Name: 'Service Control Manager'
    EventID: 7045
        # ImagePath|re: '(?i)&&set.*(\{\d\}){2,}\\\"\s+?\-f.*&&.*cmd.*\/c' # FPs with |\/r
        # Example 1: CMD /C"sET KUR=Invoke-Expression (New-Object Net.WebClient).DownloadString&&Set MxI=C:\wINDowS\sYsWow64\winDOWspoWERSheLl\V1.0\PowerShelL.EXe ${ExEcut`IoN`cON`TExT}.\"invo`kEcoMm`A`ND\".( \"{2}{1}{0}\" -f 'pt','EscRi','INvOk' ).Invoke( ( .( \"{0}{1}\" -f'D','IR' ) ( \"{0}{1}\"-f'ENV:kU','R')).\"vAl`Ue\" )&& CMD /C%mXI%"
        # Example 2: c:\WiNDOWS\sYSTEm32\CmD.exE /C "sEt DeJLz=Invoke-Expression (New-Object Net.WebClient).DownloadString&&set yBKM=PoWERShelL -noeX ^^^&(\"{2}{0}{1}\"-f '-ItE','m','seT') ( 'V' + 'a'+ 'RiAblE:z8J' +'U2' + 'l' ) ([TYpE]( \"{2}{3}{0}{1}\"-f 'e','NT','e','NViRONM' ) ) ; ^^^& ( ( [sTrIng]${VE`Rbo`SepReFER`Ence})[1,3] + 'X'-joIN'')( ( (.('gI') ('V' + 'a' + 'RIAbLe:z8j' + 'u2' +'l' ) ).vALUe::( \"{2}{5}{0}{1}{6}{4}{3}\" -f 'IRo','Nm','GETE','ABlE','I','nv','enTVAr').Invoke(( \"{0}{1}\"-f'd','ejLz' ),( \"{1}{2}{0}\"-f'cEss','P','RO') )) )&& c:\WiNDOWS\sYSTEm32\CmD.exE /C %ybkm%"
    ImagePath|contains|all:
    - '&&set'
    - 'cmd'
    - '/c'
    - '-f'
    ImagePath|contains:
    - '{0}'
    - '{1}'
    - '{2}'
    - '{3}'
    - '{4}'
    - '{5}'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect obfuscated PowerShell command-line executions that utilize the VAR++ launcher. The detection targets specific Windows events, particularly Event ID 7045 from the Service Control Manager, which logs the installation of new services. The rule specifically looks for signs of obfuscation in the command-line arguments of processes, identified through suspicious patterns in ImagePath. The presence of certain key strings such as `&&set`, `cmd`, and various obfuscation symbols (like `{0}`, `{1}`, etc.) indicates potential malicious activity associated with executing PowerShell commands that aim to evade detection. 
  By monitoring these specific attributes, the rule helps security teams quickly identify potential misuse of PowerShell and the attempt to execute obfuscated or complex commands that could be indicative of an attacker's tactics to run malicious scripts or payloads.
  ### Investigation Steps
  - Use the EDR tool to investigate the process creation logs associated with Event ID 7045. Focus on related event timestamps and identify any unusual processes or command-line parameters that correspond to the detection.
  - Review the command-line arguments of the identified processes in the EDR, paying close attention to instances of obfuscation or misuse of PowerShell commands. Cross-reference any suspicious findings with known bad indicators.
  - Analyze network traffic logs from the NDR or proxy solutions to determine if any malicious outbound communications occurred during the time the obfuscated command was executed.
  - Check historical logs and alerts in the SIEM for any previous occurrences or patterns related to the alert to identify if this might be a recurring issue or part of a broader attack campaign.
