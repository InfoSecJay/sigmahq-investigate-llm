title: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - System
id: 14bcba49-a428-42d9-b943-e2ce0f0f7ae6
status: test
description: Detects Obfuscated Powershell via VAR++ LAUNCHER
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task27)
author: Timur Zinniatullin, oscd.community
date: 2020-10-13
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: system
detection:
  selection:
    Provider_Name: 'Service Control Manager'
    EventID: 7045
        # ImagePath|re: '(?i)&&set.*(\{\d\}){2,}\\\"\s+?\-f.*&&.*cmd.*\/c' # FPs with |\/r
        # Example 1: CMD /C"sET KUR=Invoke-Expression (New-Object Net.WebClient).DownloadString&&Set MxI=C:\wINDowS\sYsWow64\winDOWspoWERSheLl\V1.0\PowerShelL.EXe ${ExEcut`IoN`cON`TExT}.\"invo`kEcoMm`A`ND\".( \"{2}{1}{0}\" -f 'pt','EscRi','INvOk' ).Invoke( ( .( \"{0}{1}\" -f'D','IR' ) ( \"{0}{1}\"-f'ENV:kU','R')).\"vAl`Ue\" )&& CMD /C%mXI%"
        # Example 2: c:\WiNDOWS\sYSTEm32\CmD.exE /C "sEt DeJLz=Invoke-Expression (New-Object Net.WebClient).DownloadString&&set yBKM=PoWERShelL -noeX ^^^&(\"{2}{0}{1}\"-f '-ItE','m','seT') ( 'V' + 'a'+ 'RiAblE:z8J' +'U2' + 'l' ) ([TYpE]( \"{2}{3}{0}{1}\"-f 'e','NT','e','NViRONM' ) ) ; ^^^& ( ( [sTrIng]${VE`Rbo`SepReFER`Ence})[1,3] + 'X'-joIN'')( ( (.('gI') ('V' + 'a' + 'RIAbLe:z8j' + 'u2' +'l' ) ).vALUe::( \"{2}{5}{0}{1}{6}{4}{3}\" -f 'IRo','Nm','GETE','ABlE','I','nv','enTVAr').Invoke(( \"{0}{1}\"-f'd','ejLz' ),( \"{1}{2}{0}\"-f'cEss','P','RO') )) )&& c:\WiNDOWS\sYSTEm32\CmD.exE /C %ybkm%"
    ImagePath|contains|all:
    - '&&set'
    - 'cmd'
    - '/c'
    - '-f'
    ImagePath|contains:
    - '{0}'
    - '{1}'
    - '{2}'
    - '{3}'
    - '{4}'
    - '{5}'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule identifies the usage of obfuscated PowerShell commands executed through the Windows Service Control Manager (SCM), particularly through event ID 7045 which logs the addition of a service to the system. The rule focuses on recognizing certain indicators in the command-line parameters of the process, such as patterns involving the use of "cmd" commands, setting environment variables, and invoking expressions through PowerShell. By analyzing the `ImagePath` for specific sequences that suggest command obfuscation techniques (like "&&set", "cmd", and the PowerShell option `-f`), it aims to detect potential abuse under the MITRE ATT&CK technique T1027, which covers methods adversaries use to obfuscate their malware to evade detection. Monitoring logs from the Windows System service ensures that suspicious service creation events are captured effectively.
  ### Investigation Steps
  - **Check Event Logs:** Review the Windows Event Logs for Event ID 7045 to identify when the suspicious service was created, paying specific attention to the `ImagePath` for indicators of obfuscation.
  - **Review Process Creation Events:** Utilize EDR tools to examine the process creation logs related to the identified service, focusing on command-line parameters that suggest obfuscation or attempts to evade detection.
  - **Analyze Network Connections:** Check network activities associated with the process using NDR tools to identify any outbound connections to known malicious IP addresses or domains during or after the time of service creation.
  - **Scan for Related Artifacts:** Utilize AV/EDR solutions to scan the system for any related malicious files or scripts, particularly focusing on PowerShell scripts and executables located in unusual paths, such as `C:\Windows\System32`.
  ### Prioritization
  Given the high severity level assigned to this rule, the alert signifies a critical potential risk; detecting obfuscated PowerShell usage may indicate an active threat attempting to bypass security measures, necessitating immediate investigation.
  ### Blind Spots and Assumptions
  This rule may not fire under certain conditions, such as if the attack uses entirely different command patterns or scripts that donâ€™t include the specific terms mentioned in the detection logic. Also, if an adversary employs known legitimate PowerShell scripts without manipulation, this rule may be evaded. Assumptions in the rule also include that adequate logging is enabled on the system to capture Event ID 7045; otherwise, these obfuscation attempts might go undetected.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
