title: Invoke-Obfuscation STDIN+ Launcher - System
id: 72862bf2-0eb1-11eb-adc1-0242ac120002
status: test
description: Detects Obfuscated use of stdin to execute PowerShell
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task 25)
author: Jonathan Cheong, oscd.community
date: 2020-10-15
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: system
detection:
  selection_main:
    Provider_Name: 'Service Control Manager'
    EventID: 7045
        # ImagePath|re: 'cmd.{0,5}(?:\/c|\/r).+powershell.+(?:\$\{?input\}?|noexit).+\"'
        # Example 1: c:\windows\sYstEm32\CmD.eXE /C"echO\Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -NoEXiT -"
        # Example 2: c:\WiNDOws\sysTEm32\cmd.EXe /C " ECHo Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -nol ${EXEcUtIONCONTeXT}.INvOkEComMANd.InvOKEScRIPt( $InpUt )"
    ImagePath|contains|all:
    - 'cmd'
    - 'powershell'
    ImagePath|contains:
    - '/c'
    - '/r'
  selection_other:
  - ImagePath|contains: 'noexit'
  - ImagePath|contains|all:
    - 'input'
    - '$'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule, titled "Invoke-Obfuscation STDIN+ Launcher," is designed to detect obfuscated commands that utilize PowerShell via the stdin (standard input) stream. The rule specifically targets Windows systems and analyzes events related to the Service Control Manager (SCM) for evidence of command execution that involves both command-line interpreters—such as `cmd.exe`—and `powershell.exe`. The rule searches for specific patterns in the `ImagePath` of events logged by SCM (Event ID 7045), looking for illegitimate command executions that may exploit PowerShell's functionalities through obfuscated methods. By checking for particular keywords associated with obfuscation techniques (like "noexit" and variable references such as `$input`), it highlights tactics from the MITRE ATT&CK framework that fall under defense evasion (T1027) and execution (T1059.001). 
  The underlying data sources for this rule include Event Logs from Windows Security, specifically Event ID 7045, which records the installation of a new service and may capture the intended malicious use of PowerShell, thereby allowing incident responders to identify elevated privileges or unauthorized execution attempts effectively.
  ### Investigation Steps
  - **Review Event Logs:** Search for Event ID 7045 in the Windows Security logs to confirm the presence of obfuscated PowerShell command usage or suspicious service installations.
  - **Analyze Process Tree:** Utilize EDR tools to investigate the process tree initiated by `cmd.exe` and `powershell.exe`, identifying any parent-child relationships that suggest abnormal behavior.
  - **Check for Obfuscated Commands:** Examine the command-line parameters associated with the detected events for signs of obfuscation patterns, especially looking for keywords like "noexit," "Invoke-Expression," or `$input`.
  - **Correlate with Network Activity:** Utilize Proxy or NDR tools to correlate any external communications to known malicious hosts, especially those identified in conjunction with suspicious PowerShell commands.
  ### Prioritization
  This alert is categorized with a high severity level due to the critical nature of unauthorized PowerShell executions and the potential for significant impact in an enterprise environment. The execution of obfuscated commands can indicate attempts to evade detection mechanisms, hence requiring prompt investigation.
  ### Blind Spots and Assumptions
  The detection may not fire if command obfuscation is executed via methods not captured by Event ID 7045 or if legitimate services are mistakenly identified. Additionally, if the adversary alters the standard patterns in command execution or utilizes alternative scripting environments that bypass the Windows Security logs, the rule may fail to detect those activities. Thus, it is vital for detection engineers to understand potential evasion tactics and continuously refine detection rules.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
