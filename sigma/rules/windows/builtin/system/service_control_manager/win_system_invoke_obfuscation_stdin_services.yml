title: Invoke-Obfuscation STDIN+ Launcher - System
id: 72862bf2-0eb1-11eb-adc1-0242ac120002
status: test
description: Detects Obfuscated use of stdin to execute PowerShell
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task 25)
author: Jonathan Cheong, oscd.community
date: 2020-10-15
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  service: system
detection:
  selection_main:
    Provider_Name: 'Service Control Manager'
    EventID: 7045
        # ImagePath|re: 'cmd.{0,5}(?:\/c|\/r).+powershell.+(?:\$\{?input\}?|noexit).+\"'
        # Example 1: c:\windows\sYstEm32\CmD.eXE /C"echO\Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -NoEXiT -"
        # Example 2: c:\WiNDOws\sysTEm32\cmd.EXe /C " ECHo Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -nol ${EXEcUtIONCONTeXT}.INvOkEComMANd.InvOKEScRIPt( $InpUt )"
    ImagePath|contains|all:
    - 'cmd'
    - 'powershell'
    ImagePath|contains:
    - '/c'
    - '/r'
  selection_other:
  - ImagePath|contains: 'noexit'
  - ImagePath|contains|all:
    - 'input'
    - '$'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the obfuscated execution of PowerShell commands using the command-line interface via stdin (standard input) on Windows systems. It specifically monitors the creation of Windows services that utilize the Service Control Manager (Event ID 7045) as their trigger. The rule looks for patterns in the command line that suggest the invocation of PowerShell through `cmd` commands while employing various obfuscation techniques, such as unusual casing and the use of special characters. It pays particular attention to commands that are structured to invoke PowerShell scripts directly from a web source, indicating a potential malicious attempt to execute remote code.
  The data sources involved in this detection rule include process creation logs that capture the command-line arguments associated with newly created services. By analyzing these logs, security analysts can identify potentially harmful scripts that employ evasion tactics typical of advanced threats or adversaries attempting to bypass security measures.
  ### Investigation Steps
  - Check the Windows Event Logs, focusing on Event ID 7045, to identify the creation of suspicious services along with their corresponding command-line parameters.
  - Utilize EDR tools to review the process tree and determine the parent and child processes related to the detected cmd and PowerShell invocations for further context.
  - Analyze network traffic through NDR/NGFW solutions to identify any external connections made by the suspicious processes, particularly to unfamiliar or malicious domains.
  - Inspect any available cloud logs (AWS/GCP/Azure) for related API calls or anomalies that could suggest further malicious activity stemming from the detected command execution.
