title: CodeIntegrity - Unsigned Kernel Module Loaded
id: 951f8d29-f2f6-48a7-859f-0673ff105e6f
status: test
description: Detects the presence of a loaded unsigned kernel module on the system.
references:
- https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/operations/event-id-explanations
- https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/operations/event-tag-explanations
- Internal Research
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-06-06
tags:
- attack.privilege-escalation
logsource:
  product: windows
  service: codeintegrity-operational
detection:
  selection:
    EventID: 3001     # Code Integrity determined an unsigned kernel module %2 is loaded into the system. Check with the publisher to see if a signed version of the kernel module is available
  condition: selection
falsepositives:
- Unlikely
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the loading of unsigned kernel modules on Windows systems. Kernel modules, which operate at a high privilege level, can significantly impact system stability and security. The presence of an unsigned module may indicate exploitation attempts or unauthorized modifications to the operating environment. The rule operates by monitoring specific logs generated by the Code Integrity feature in Windows, particularly an Event ID 3001, which signifies that an unsigned kernel module has been loaded. This detection relies on data sourced from Code Integrity operational logs, providing visibility into potentially unauthorized kernel-level operations.
  ### Investigation Steps
  - Check EDR alerts for any related suspicious activity associated with the machine where the unsigned kernel module was detected, including process creation logs and command-line parameters.
  - Review the Code Integrity logs to identify the exact unsigned kernel module loaded, along with the timestamp and any associated user or system accounts involved in the loading.
  - Verify the module against known signatures or developer information to establish if itâ€™s untrustworthy, and escalate accordingly based on the potential impact.
  - If applicable, analyze related network activity through the NDR or Proxy logs to uncover any connection attempts made by or to this module, indicating possible external communications.
