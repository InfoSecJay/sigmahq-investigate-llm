title: DotNET Assembly DLL Loaded Via Office Application
id: ff0f2b05-09db-4095-b96d-1b75ca24894a
status: test
description: Detects any assembly DLL being loaded by an Office Product
references:
- https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16
author: Antonlovesdnb
date: 2020-02-19
modified: 2023-03-29
tags:
- attack.execution
- attack.t1204.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
    Image|endswith:
    - '\excel.exe'
    - '\mspub.exe'
    - '\onenote.exe'
    - '\onenoteim.exe'         # Just in case
    - '\outlook.exe'
    - '\powerpnt.exe'
    - '\winword.exe'
    ImageLoaded|startswith: 'C:\Windows\assembly\'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule detects potentially malicious behavior involving the loading of .NET assembly DLLs through Microsoft Office applications, such as Word, Excel, and Outlook. Specifically, it looks for instances where an Office product manages to load a DLL from the directory `C:\Windows\assembly\`. This behavior may indicate unauthorized or malicious modifications intended to exploit Office applications for executing .NET code, which is a common tactic used by attackers to evade detection and maintain persistence within a compromised environment.
  The primary data sources utilized in this detection are Windows Image Load events, specifically focusing on the processes of common Office applications (such as `excel.exe`, `winword.exe`, etc.). Each time an Office application interacts with any DLL file, it logs an image load event, allowing the SOC analysts to identify suspicious or unexpected loading patterns associated with .NET assemblies. This relates to the MITRE ATT&CK technique T1204.002, which indicates that attackers often leverage user-targeted vectors to execute their malicious code.
  ### Investigation Steps
  - **Verify the Process**: Check the source of the process loading the DLL by cross-referencing the `ImageLoaded` field with your EDR logs to ensure it originated from an authorized and expected application.
  - **Assess the DLL Path**: Analyze the DLL path against known good binaries and applications to understand if the loaded DLL was legitimate or potentially malicious.
  - **Check for Additional Indicators**: Inspect the process behavior for further indicators of compromise (IoC), such as unusual outbound network connections or file modifications linked with the Office application.
  - **Review User Activity**: Review the timeline of user activity associated with the process in question and confirm if there were any unusual actions preceding the event to ascertain user behavior during the incident.
  ### Prioritization
  The alert is marked with a medium severity level due to the potential risk associated with the execution of code from untrusted sources, which could lead to data exfiltration or further compromises within the environment.
  ### Blind Spots and Assumptions
  This detection rule may not trigger if the DLL was loaded through legitimate means not captured by the current logging configuration, such as via a completely different execution context or process. Additionally, the analysis may be affected by the presence of legitimate plugins or extensions that load .NET assemblies but are not inherently malicious. Furthermore, if logging configurations do not capture Image Load events comprehensively, incidents could go unnoticed, enabling an attacker to evade detection successfully.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
