title: CLR DLL Loaded Via Office Applications
id: d13c43f0-f66b-4279-8b2c-5912077c1780
status: test
description: Detects CLR DLL being loaded by an Office Product
references:
- https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16
author: Antonlovesdnb
date: 2020-02-19
modified: 2023-03-29
tags:
- attack.execution
- attack.t1204.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
    Image|endswith:
    - '\excel.exe'
    - '\mspub.exe'
    - '\outlook.exe'
    - '\onenote.exe'
    - '\onenoteim.exe'         # Just in case
    - '\powerpnt.exe'
    - '\winword.exe'
    ImageLoaded|contains: '\clr.dll'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "CLR DLL Loaded Via Office Applications" is designed to detect when a .NET Common Language Runtime (CLR) Dynamic Link Library (DLL) is loaded by Microsoft Office applications such as Excel, PowerPoint, and Word. This action can indicate malicious behavior, as adversaries may leverage Office products to execute code via embedded CLR libraries, often in attempts to bypass security mechanisms. The detection focuses on monitoring image load events (where DLLs are loaded into running processes) specifically targeting well-known Office application names—like `excel.exe`, `winword.exe`, and others—and checking if the loaded image contains `clr.dll`. This activity aligns with the MITRE ATT&CK tactic of Execution, and specifically the technique of "User Execution" (T1204.002), which highlights the risk of executing potentially malicious content through user interaction with legitimate software.
  ### Investigation Steps
  - **Check Image Load Events**: Review recent image load events from the EDR to confirm which Office applications have loaded the `clr.dll`. Ensure that legitimate application's normal behavior is established.
  - **Analyze PowerShell Logs**: Investigate any PowerShell activities that correspond to the time of the `clr.dll` loading to identify script-based execution that may have triggered this behavior.
  - **Examine Process Trees**: Utilize Sysmon or EDR to analyze the parent-child process relationships at the time of the DLL load to determine if any malicious processes initiated the Office application involved.
  - **Review User Activity**: Check user activity logs to understand if a suspicious document or email attachment was opened that may have led to the loading of the CLR DLL within the Office application.
  ### Prioritization
  The alert has been classified as medium severity due to the potential risk of a compromise if a malicious CLR DLL is loaded, especially in environments where such loading deviates from normal organizational behavior.
  ### Blind Spots and Assumptions
  This rule may fail to fire if the DLL is loaded by processes not explicitly enumerated in the detection logic, potentially allowing adversaries to use other legitimate applications. Additionally, the rule might miss attacks if loaded DLLs are obfuscated or renamed, or if an adversary circumvents logging either by manipulating application behaviors or using different libraries. It assumes that Sysmon or appropriate logging is enabled for image load events, which may not be standardized across all enterprise systems.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
