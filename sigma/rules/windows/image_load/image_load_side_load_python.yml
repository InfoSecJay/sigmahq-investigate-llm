title: Potential Python DLL SideLoading
id: d36f7c12-14a3-4d48-b6b8-774b9c66f44d
status: experimental
description: Detects potential DLL sideloading of Python DLL files.
references:
- https://www.securonix.com/blog/seolurker-attack-campaign-uses-seo-poisoning-fake-google-ads-to-install-malware/
- https://thedfirreport.com/2024/09/30/nitrogen-campaign-drops-sliver-and-ends-with-blackcat-ransomware/
- https://github.com/wietze/HijackLibs/tree/dc9c9f2f94e6872051dab58fbafb043fdd8b4176/yml/3rd_party/python
author: Swachchhanda Shrawan Poudel
date: 2024-10-06
tags:
- attack.defense-evasion
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
    ImageLoaded|endswith:
    - '\python39.dll'
    - '\python310.dll'
    - '\python311.dll'
    - '\python312.dll'
  filter_main_default_install_paths:
  - ImageLoaded|startswith:
    - 'C:\Program Files\Python3'
    - 'C:\Program Files (x86)\Python3'
  - ImageLoaded|contains: '\AppData\Local\Programs\Python\Python3'
  filter_optional_visual_studio:
    ImageLoaded|startswith: 'C:\Program Files\Microsoft Visual Studio\'
  filter_optional_cpython:
    ImageLoaded|contains:
    - '\cpython\externals\'
    - '\cpython\PCbuild\'
  filter_main_legit_signature_details:
    Product: 'Python'
    Signed: 'true'
    Description: 'Python'
    Company: 'Python Software Foundation'
  condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- Legitimate software using Python DLLs
level: medium
notes: |
  ### Technical Context
  This detection rule, titled "Potential Python DLL SideLoading," focuses on identifying potential DLL sideloading attacks involving Python Dynamic Link Library (DLL) files, specifically looking for malicious or unintended use of Python libraries that may execute unauthorized code. The rule works by monitoring Windows Image Load events to check for the loading of Python DLLs like `python39.dll`, `python310.dll`, `python311.dll`, and `python312.dll`. The detection logic is designed to filter out legitimate instances based on the paths they are loaded from, such as standard installations within `C:\Program Files\Python3` and `C:\Program Files (x86)\Python3`, as well as legitimate signature details indicating these DLLs belong to the official Python Software Foundation.
  By checking against various filters that assess the loading conditions and settings of these Python DLLs, the rule can effectively highlight unusual activity that deviates from the expected legitimate behaviors. The underlying MITRE ATT&CK tactics relevant to this rule include **Defense Evasion** (Tactic ID: TA0040) and more specifically the technique **DLL Side-Loading** (Technique ID: T1574.002), which details the manipulation of DLL files to execute unauthorized or malicious commands through legitimate processes.
  ### Investigation Steps
  - **Check Image Load Events:** Use Windows Event logs (specifically Sysmon logs) to review Image Load events for the specified Python DLLs and verify the loading process and source path to determine if it matches legitimate usage.
    
  - **Analyze Process Creation Logs:** Investigate the processes that triggered the loading of these DLLs to understand their behavior, command-line parameters, and create relationships with any parent processes that may indicate suspicious activity.
  - **Review Installed Software and Validity:** Cross-reference the Python DLL sourced from `C:\Program Files\Python3` or similar paths with the list of installed software to confirm if the software matches known and trusted applications.
  - **Assess Anti-Virus and EDR Alerts:** Check EDR and AV logs for any alerts or flags raised on the activity involving the suspicious Python DLLs. Look for known indicators of compromise associated with the Python-based threats highlighted in the references.
  ### Prioritization
  A medium severity level is assigned to this alert due to the potential risk associated with DLL sideloading leveraging Python files, which could enable malicious code execution if confirmed. Given that legitimate software can utilize these DLLs, verification steps are crucial to mitigate false positives.
  ### Blind Spots and Assumptions
  There are assumptions and considerations regarding the efficacy of this rule. It may not fire if an adversary uses alternative paths to load Python DLLs that do not fall within standard installation directories or employs evasion techniques to conceal malicious activity. Additionally, legitimate applications that use Python libraries without malicious intent could trigger false positives, leading to alerts on benign operations. Understanding various deployment environments and potential alternative paths an adversary might exploit is essential for tuning this rule effectively.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
