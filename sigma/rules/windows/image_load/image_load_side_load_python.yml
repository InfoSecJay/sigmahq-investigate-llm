title: Potential Python DLL SideLoading
id: d36f7c12-14a3-4d48-b6b8-774b9c66f44d
status: experimental
description: Detects potential DLL sideloading of Python DLL files.
references:
- https://www.securonix.com/blog/seolurker-attack-campaign-uses-seo-poisoning-fake-google-ads-to-install-malware/
- https://thedfirreport.com/2024/09/30/nitrogen-campaign-drops-sliver-and-ends-with-blackcat-ransomware/
- https://github.com/wietze/HijackLibs/tree/dc9c9f2f94e6872051dab58fbafb043fdd8b4176/yml/3rd_party/python
author: Swachchhanda Shrawan Poudel
date: 2024-10-06
tags:
- attack.defense-evasion
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
    ImageLoaded|endswith:
    - '\python39.dll'
    - '\python310.dll'
    - '\python311.dll'
    - '\python312.dll'
  filter_main_default_install_paths:
  - ImageLoaded|startswith:
    - 'C:\Program Files\Python3'
    - 'C:\Program Files (x86)\Python3'
  - ImageLoaded|contains: '\AppData\Local\Programs\Python\Python3'
  filter_optional_visual_studio:
    ImageLoaded|startswith: 'C:\Program Files\Microsoft Visual Studio\'
  filter_optional_cpython:
    ImageLoaded|contains:
    - '\cpython\externals\'
    - '\cpython\PCbuild\'
  filter_main_legit_signature_details:
    Product: 'Python'
    Signed: 'true'
    Description: 'Python'
    Company: 'Python Software Foundation'
  condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- Legitimate software using Python DLLs
level: medium
notes: |
  ### Technical Context
  This detection rule identifies potential DLL sideloading of Python Dynamic Link Libraries (DLLs) on Windows systems. DLL sideloading is an attack technique where a malicious DLL is loaded instead of a legitimate one, potentially leading to the execution of malware. This rule specifically examines for loads of Python DLL files such as `python39.dll`, `python310.dll`, `python311.dll`, and `python312.dll`, while filtering out legitimate instances based on their installation paths, digital signatures, and function locations. It checks the `ImageLoaded` log source, focusing on signs that the DLLs are being loaded from non-standard paths or are absent of legitimate signatures, indicating a possible compromise.
  ### Investigation Steps
  - Review EDR alerts to evaluate the process creation logs associated with the loading of Python DLL files. Pay particular attention to any unusual parent processes that may have invoked these DLLs.
  - Examine command-line parameters of processes that loaded the flagged DLLs to identify any suspicious or obfuscated arguments that might indicate malicious intent.
  - Analyze proxy and AV logs to detect any related outbound connections or downloads initiated shortly after the potential DLL sideloading incident, which may indicate communication with command and control (C2) servers.
  - Investigate any associated user accounts or systems for unusual behavior or anomalies, such as unauthorized access attempts, in order to assess the broader impact of the detected activity.
