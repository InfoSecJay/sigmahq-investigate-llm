title: Unsigned DLL Loaded by Windows Utility
id: b5de0c9a-6f19-43e0-af4e-55ad01f550af
status: test
description: |
  Detects windows utilities loading an unsigned or untrusted DLL.
  Adversaries often abuse those programs to proxy execution of malicious code.
references:
- https://www.elastic.co/security-labs/Hunting-for-Suspicious-Windows-Libraries-for-Execution-and-Evasion
- https://akhere.hashnode.dev/hunting-unsigned-dlls-using-kql
- https://unit42.paloaltonetworks.com/unsigned-dlls/?web_view=true
author: Swachchhanda Shrawan Poudel
date: 2024-02-28
modified: 2024-03-07
tags:
- attack.t1218.011
- attack.t1218.010
- attack.defense-evasion
logsource:
  product: windows
  category: image_load
detection:
  selection:
    Image|endswith:
            # Note: Add additional utilities that allow the loading of DLLs
    - '\InstallUtil.exe'
    - '\RegAsm.exe'
    - '\RegSvcs.exe'
    - '\regsvr32.exe'
    - '\rundll32.exe'
  filter_main_signed:
    Signed: 'true'
  filter_main_sig_status:
    SignatureStatus:
    - 'errorChaining'
    - 'errorCode_endpoint'
    - 'errorExpired'
    - 'trusted'
  filter_main_signed_null:
    Signed:
  filter_main_signed_empty:
    Signed:
    - ''
    - '-'
  filter_main_sig_status_null:
    SignatureStatus:
  filter_main_sig_status_empty:
    SignatureStatus:
    - ''
    - '-'
  condition: selection and not 1 of filter_main_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Unsigned DLL Loaded by Windows Utility" is designed to detect instances where certain Windows utilities are used to load unsigned or untrusted dynamic link libraries (DLLs). Adversaries often exploit legitimate Windows applications such as `rundll32.exe`, `regsvr32.exe`, and others to facilitate the execution of malicious code, allowing them to evade detection mechanisms. The rule entails monitoring events related to DLL image loading, specifically focusing on validating the signature status of the loaded DLLs. If a DLL is loaded by a selected utility and fails to meet signature verification—being either unsigned, have an error in chaining, or be trusted—the rule will trigger an alert. The telemetry for this detection primarily comes from Windows Sysmon and includes event logs capturing image loads, such as the process and signature attributes. This alert maps to the MITRE ATT&CK techniques T1218.010 and T1218.011 under the Defense Evasion tactic, highlighting the potential for adversaries to obscure their malicious activities using trusted processes.
  ### Investigation Steps
  - **Review EDR Alerts:** Start by utilizing your EDR solution to identify the specific process creation events associated with the alert. Cross-reference the usernames and the execution paths of these processes for potential anomalies.
  - **Analyze Process Logs:** Examine Sysmon logs for the processes identified in the previous step, specifically focusing on the `ImageLoad` and associated `SignatureStatus` properties to determine if the DLL in question is indeed unsigned or untrusted.
  - **Correlate with Other Security Tools:** Use your SIEM to correlate the alert with data from other security tools such as AV logs, NGFW, and proxy logs to identify any patterns or additional suspicious activities associated with the alert.
  - **Investigate External Connections:** If the alert pertains to a DLL loading that occurred during network utilization, review network traffic logs for unusual outbound connections or data exfiltration patterns that may relate to the suspicious DLL activities detected.
  ### Prioritization
  Given the potential for unsigned DLLs to signify malicious actions, this alert is classified as medium severity. The exploitation of trusted utilities to load questionable libraries poses a significant risk to enterprise security and demands immediate attention from incident responders.
  ### Blind spots and Assumptions
  This rule may not fire if adversaries employ signed malicious DLLs or obfuscate the use of standard utilities. Additionally, if a DLL is loaded through alternate means outside of the specified utilities, such as custom scripts or less common tools, it could evade detection. It's also important to assume that some legitimate operations might trigger false positives due to similar behaviors, hence analysts should carefully validate the context of each alert.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
