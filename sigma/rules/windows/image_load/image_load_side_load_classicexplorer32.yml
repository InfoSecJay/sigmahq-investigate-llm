title: Potential DLL Sideloading Via ClassicExplorer32.dll
id: caa02837-f659-466f-bca6-48bde2826ab4
status: test
description: Detects potential DLL sideloading using ClassicExplorer32.dll from the
  Classic Shell software
references:
- https://blogs.blackberry.com/en/2022/12/mustang-panda-uses-the-russian-ukrainian-war-to-attack-europe-and-asia-pacific-targets
- https://app.any.run/tasks/6d8cabb0-dcda-44b6-8050-28d6ce281687/
author: frack113
date: 2022-12-13
tags:
- attack.defense-evasion
- attack.persistence
- attack.privilege-escalation
- attack.t1574.001
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
  selection_classicexplorer:
    ImageLoaded|endswith: '\ClassicExplorer32.dll'
  filter_classicexplorer:
    ImageLoaded|startswith: 'C:\Program Files\Classic Shell\'
  condition: selection_classicexplorer and not filter_classicexplorer
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potential DLL sideloading incidents involving `ClassicExplorer32.dll`, which is part of the Classic Shell software. DLL sideloading is a technique where malicious actors exploit the legitimate loading of Dynamic Link Libraries (DLLs) to execute their code within the context of trusted software. This rule specifically looks for instances where `ClassicExplorer32.dll` is loaded from an unexpected location outside of its established directory, `C:\Program Files\Classic Shell\`. 
  The rule utilizes telemetry from Windows Event Logs categorized under image load activities. By monitoring events related to DLL loads, particularly those that fall outside known safe paths, it aligns with MITRE ATT&CK techniques T1574.001 (DLL Side-Loading) and T1574.002 (Executable and DLL Side-Loading), aiming to detect evasive actions characteristic of malicious persistence and privilege escalation tactics.
  ### Investigation Steps
  - **Check DLL Load Source:** Investigate the loading path of `ClassicExplorer32.dll` by examining image load events in Windows Event Logs. Verify if the DLL is being loaded from the expected path to identify any anomalies.
    
  - **Analyze Related Processes:** Use the EDR to trace back the process that initiated the DLL load. Check for any associated processes that may indicate prior compromise or suspicious behavior.
    
  - **Review Parent-Child Relationships:** Inspect the parent processes associated with the loading of `ClassicExplorer32.dll`. A legitimate process might not typically load this DLL, indicating potential misuse.
    
  - **Conduct Network Analysis:** Utilize network traffic logs from NDR or firewall logs to identify any unusual outbound connections made immediately after the DLL load. This could provide insights into command-and-control communications.
  ### Prioritization
  The alert generated by this rule is considered medium severity in an enterprise environment due to the potential for serious implications like unauthorized access, data exfiltration, or lateral movement that could result from successful DLL sideloading.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where the DLL is loaded as expected from the correct directory or if the adversary has other methods to load a malicious DLL without triggering this detection. Additionally, if the Classic Shell application is legitimately used in the enterprise, the detection could result in false positives. Itâ€™s assumed that the classic `ClassicExplorer32.dll` won't be intentionally moved elsewhere for legitimate purposes, but collusion with internal actors could obscure malicious activity. Furthermore, environments with altered logging configurations may fail to generate the necessary events for detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
