title: Suspicious Unsigned Dbghelp/Dbgcore DLL Loaded
id: bdc64095-d59a-42a2-8588-71fd9c9d9abc
related:
- id: 0e277796-5f23-4e49-a490-483131d4f6e1     # Suspicious Loading
  type: similar
status: test
description: |
  Detects the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes.
  Tools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll.
  As an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.
references:
- https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/nf-minidumpapiset-minidumpwritedump
- https://www.pinvoke.net/default.aspx/dbghelp/MiniDumpWriteDump.html
- https://medium.com/@fsx30/bypass-edrs-memory-protection-introduction-to-hooking-2efb21acffd6
author: Perez Diego (@darkquassar), oscd.community, Ecco
date: 2019-10-27
modified: 2022-12-09
tags:
- attack.credential-access
- attack.t1003.001
logsource:
  category: image_load
  product: windows
detection:
  selection:
    ImageLoaded|endswith:
    - '\dbghelp.dll'
    - '\dbgcore.dll'
    Signed: 'false'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule identifies instances where the `dbghelp.dll` or `dbgcore.dll` is loaded by processes that are not signed, which can be indicative of malicious activity, particularly credential theft. These DLLs are commonly utilized to create memory dumps of Windows processes, including critical ones like `Lsass.exe`, which stores user credentials. Attackers may use legitimate APIs such as `MiniDumpWriteDump` found in these libraries to exfiltrate sensitive information. The alert aligns with the MITRE ATT&CK tactic of Credential Access, specifically the technique T1003.001 (Credential Dumping: LSASS Memory), thereby providing a direct link to the types of threats organizations face.
  The primary data sources this rule relies upon are Windows Sysmon logs, specifically focusing on process image loading events, which detail when processes load DLL files into memory. By detecting the loading of these unsigned DLLs, security analysts can pinpoint potentially malicious behavior, especially when the processes are known to be suspicious or commonly used by attackers.
  ### Investigation Steps
  - **Check Process Information:** Investigate the process associated with the alert using EDR tools to assess its origin, behavior, and any relationships to known malicious entities or tactics. Look for recent changes or unusual parent processes.
  - **Review Recent Process Creation:** Utilize Sysmon process creation logs to see if there are any unusual command-line arguments or parent-child process relationships leading to the alert. Identify if these processes correlate with known attack patterns.
  - **Correlate with Network Activity:** Use Network Detection and Response (NDR) solutions to review outgoing traffic from the identified process. Any unusual external connections can indicate data exfiltration attempts or C2 communications.
  - **Analyze Memory Dumps (if available):** If the process is still running, create a memory dump to analyze for sensitive data being handled or potentially malicious code that could be executing in memory. Cross-reference this data with existing threat intelligence.
  ### Prioritization
  This alert is classified as high severity due to the potential risk associated with the exposure of credentials through the use of these DLLs in malicious memory dumping actions. The presence of unsigned versions of these DLLs loaded into processes raises significant red flags that warrant immediate investigation.
  ### Blind Spots and Assumptions
  The detection rule may not fire if the DLLs are loaded by signed processes, as the rule specifically filters for unsigned versions. Additionally, attackers may employ different techniques to mask the use of these libraries or utilize alternate APIs or signed versions of the DLLs, mitigating the rule's effectiveness. Furthermore, if the logging level is insufficient or if Sysmon is not deployed correctly, critical events may not be captured, leading to gaps in visibility.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
