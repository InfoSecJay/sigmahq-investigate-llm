title: Fax Service DLL Search Order Hijack
id: 828af599-4c53-4ed2-ba4a-a9f835c434ea
status: test
description: The Fax service attempts to load ualapi.dll, which is non-existent. An
  attacker can then (side)load their own malicious DLL using this service.
references:
- https://windows-internals.com/faxing-your-way-to-system/
author: NVISO
date: 2020-05-04
modified: 2022-06-02
tags:
- attack.persistence
- attack.defense-evasion
- attack.t1574.001
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
    Image|endswith: '\fxssvc.exe'
    ImageLoaded|endswith: 'ualapi.dll'
  filter:
    ImageLoaded|startswith: 'C:\Windows\WinSxS\'
  condition: selection and not filter
falsepositives:
- Unlikely
level: high
notes: |
  ### Technical Context
  The "Fax Service DLL Search Order Hijack" Sigma rule identifies potentially malicious activity involving the Windows Fax Service attempting to load the non-existent DLL file, `ualapi.dll`. In a typical scenario, if an attacker can exploit this service, they could hijack the DLL loading process to load a malicious DLL of their choosing, thereby gaining persistence on the system. The rule primarily relies on the monitoring of image load events, particularly focusing on the process named `fxssvc.exe`, which is the Fax Service executable. If this service tries to load `ualapi.dll` and the DLL is not found in the standard system directory (specifically `C:\Windows\WinSxS\`), it raises an alert. The relevant MITRE ATT&CK tactics for this rule include Persistence (T1574.001) and Defense Evasion (T1574.002), which inform responders about the attacker's aim to maintain access and evade detection.
  ### Investigation Steps
  - **Verify the process execution:** Check the process execution history of `fxssvc.exe` using EDR logs to confirm if it was running during the time of the alert and if any associated processes were spawned.
    
  - **Analyze DLL loading behavior:** Utilize Sysmon logs to review any DLL loads associated with `fxssvc.exe`, especially looking for entries where `ualapi.dll` was attempted to be loaded unexpectedly.
    
  - **Inspect system changes:** Examine recent file modifications in the system directories for suspicious DLLs or changes to `fxssvc.exe`, which may indicate an attempted DLL sideloading attack.
  - **Review relevant network activity:** Use network logs and proxy data to look for any outbound connections initiated by `fxssvc.exe` that may indicate communication with a command and control (C2) server.
  ### Prioritization
  Given the nature of this alert, it is classified as high severity since the successful loading of a malicious DLL could lead to significant security breaches, including persistent access or system compromise.
  ### Blind Spots and Assumptions
  This rule may not fire if the attacker uses a different method of DLL hijacking or if the `fxssvc.exe` process does not operate as expected. Additionally, if the attacker manages to place the malicious DLL in the correct search order path (`C:\Windows\WinSxS\`), the rule will not trigger, thereby evading detection. Engineers should be aware that environmental configurations and different application versions can influence the detection efficacy of this rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
