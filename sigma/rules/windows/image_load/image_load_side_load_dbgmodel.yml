title: Potential DLL Sideloading Of DbgModel.DLL
id: fef394cd-f44d-4040-9b18-95d92fe278c0
status: experimental
description: Detects potential DLL sideloading of "DbgModel.dll"
references:
- https://hijacklibs.net/entries/microsoft/built-in/dbgmodel.html
author: Gary Lobermier
date: 2024-07-11
modified: 2024-07-22
tags:
- attack.defense-evasion
- attack.t1574.002
logsource:
  product: windows
  category: image_load
detection:
  selection:
    ImageLoaded|endswith: '\dbgmodel.dll'
  filter_main_generic:
    ImageLoaded|startswith:
    - 'C:\Windows\System32\'
    - 'C:\Windows\SysWOW64\'
    - 'C:\Windows\WinSxS\'
  filter_optional_windbg:
    ImageLoaded|startswith: 'C:\Program Files\WindowsApps\Microsoft.WinDbg_'
  filter_optional_windows_kits:
    ImageLoaded|startswith:
    - 'C:\Program Files (x86)\Windows Kits\'
    - 'C:\Program Files\Windows Kits\'
  condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- Legitimate applications loading their own versions of the DLL mentioned in this
  rule
level: medium
notes: |
  ### Technical Context
  This Sigma rule focuses on detecting potential DLL sideloading of the `DbgModel.dll` file, a technique often employed by attackers to evade detection by loading malicious libraries alongside legitimate processes. The rule checks for instances of `DbgModel.dll` being loaded by monitoring Windows image load events. Specifically, it searches for the file being loaded from common directories associated with legitimate applications, such as `C:\Windows\System32\`, `C:\Windows\SysWOW64\`, and `C:\Program Files\Windows Kits\`. By excluding those legitimate paths and filtering for instances where the DLL is sourced from unexpected locations, this detection rule helps to flag potentially malicious activities.
  In essence, the rule aims to identify instances of DLL sideloading, where an attacker may try to leverage the presence of `DbgModel.dll` to execute payloads or compromises without triggering standard security measures. The relevant data sources for this detection include process creation logs, specifically focusing on image loads within the Windows operating system.
  ### Investigation Steps
  - Utilize EDR tools to review the process tree associated with any alerts generated by this rule, looking for unusual parent-child relationships or unexpected execution paths.
  - Check Windows event logs to gather additional context on the processes that loaded `DbgModel.dll`, including timestamps and any related events that could indicate malicious behavior.
  - Analyze network logs in your NDR or firewall solution to identify any suspicious outbound connections made by the processes associated with `DbgModel.dll`, which could indicate data exfiltration or communication with command and control servers.
  - If applicable, review cloud logs in platforms such as AWS, GCP, or Azure to investigate any cloud resources that may have been involved in the incident, ensuring a comprehensive view of potential external influences on the identified threats.
