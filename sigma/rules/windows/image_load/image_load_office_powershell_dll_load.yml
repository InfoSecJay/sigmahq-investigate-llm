title: PowerShell Core DLL Loaded Via Office Application
id: bb2ba6fb-95d4-4a25-89fc-30bb736c021a
status: test
description: Detects PowerShell core DLL being loaded by an Office Product
references:
- Internal Research
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-06-01
tags:
- attack.defense-evasion
logsource:
  category: image_load
  product: windows
detection:
  selection:
    Image|endswith:
    - '\excel.exe'
    - '\mspub.exe'
    - '\outlook.exe'
    - '\onenote.exe'
    - '\onenoteim.exe'         # Just in case
    - '\powerpnt.exe'
    - '\winword.exe'
    ImageLoaded|contains:
    - '\System.Management.Automation.Dll'
    - '\System.Management.Automation.ni.Dll'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This detection rule identifies when PowerShell Core DLLs (`System.Management.Automation.Dll` or `System.Management.Automation.ni.Dll`) are loaded by Microsoft Office applications, specifically Excel, Publisher, Outlook, OneNote, PowerPoint, and Word. The purpose of this rule is to detect potential benign misconfigurations or malicious activity where adversaries use trusted applications to load PowerShell functionality covertly. This behavior can be associated with the MITRE ATT&CK tactic of **Defense Evasion** under the technique of **Masquerading** (T1036). The use of legitimate Office applications as a delivery mechanism for PowerShell allows attackers to blend in with normal user activity and evade detection by traditional security measures. Monitoring for these events requires leveraging Windows image load logs that capture DLL interactions.
  ### Investigation Steps
  - **Check Process Activity**: Examine the process tree in the EDR for the Office application that triggered the alert. Look for any unusual parent-child relationships or the execution of unexpected command-line arguments.
  - **Review Execution Context**: Analyze the user account associated with the Office application. Validate whether the user is authorized to execute PowerShell commands, and check for any anomalies in their usual behavior.
  - **Correlate with Network Activity**: Use the NDR to identify any suspicious outbound connections shortly after the PowerShell DLL was loaded. Look for unusual data transfers or communications to known malicious domains.
  - **Inspect PowerShell Logs**: Review historical PowerShell execution logs for any scripts, commands, or functions that were executed around the time the DLL was loaded. Pay particular attention to any indicators of suspicious behavior or unusual command patterns.
  ### Prioritization
  This alert is categorized as medium severity due to the commonality of legitimate PowerShell usage in Office applications. However, the execution of potentially malicious actions warrants prompt investigation to repel any potential threats and ensure enterprise security.
  ### Blind Spots and Assumptions
  There are potential blind spots with this rule, including scenarios where an attacker may pre-load the PowerShell DLL before launching the Office application, thereby evading detection. Additionally, if Office applications are not monitored adequately or if the rule is configured incorrectly, legitimate uses of PowerShell could lead to false positives. There is also an assumption that all loading instances of the specified DLLs are malicious, which may not always be the case, hence the challenge in distinguishing between legitimate administrative tasks and malicious activities.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
