title: Potential DLL Sideloading Of DBGCORE.DLL
id: 9ca2bf31-0570-44d8-a543-534c47c33ed7
status: test
description: Detects DLL sideloading of "dbgcore.dll"
references:
- https://hijacklibs.net/     # For list of DLLs that could be sideloaded (search for dlls mentioned here in there)
author: Nasreddine Bencherchali (Nextron Systems), Wietze Beukema (project and research)
date: 2022-10-25
modified: 2023-05-05
tags:
- attack.defense-evasion
- attack.persistence
- attack.privilege-escalation
- attack.t1574.001
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
    ImageLoaded|endswith: '\dbgcore.dll'
  filter_main_generic:
    ImageLoaded|startswith:
    - 'C:\Program Files (x86)\'
    - 'C:\Program Files\'
    - 'C:\Windows\SoftwareDistribution\'
    - 'C:\Windows\System32\'
    - 'C:\Windows\SystemTemp\'
    - 'C:\Windows\SysWOW64\'
    - 'C:\Windows\WinSxS\'
  filter_optional_steam:
    ImageLoaded|endswith: '\Steam\bin\cef\cef.win7x64\dbgcore.dll'
  condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- Legitimate applications loading their own versions of the DLL mentioned in this
  rule
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potential DLL sideloading attacks involving the `dbgcore.dll` file on Windows systems. DLL sideloading is an attack technique where a malicious DLL is loaded by a legitimate application, allowing the attacker to execute arbitrary code under the context of that application. The rule specifically looks for instances where `dbgcore.dll` is loaded from unlikely directories, such as user directories or non-standard application folders, rather than its legitimate locations like `C:\Windows\System32\` or `C:\Program Files\`. The detection leverages image load events, monitoring the `ImageLoaded` field and its associated paths to identify potential deviations from expected behavior. This rule is linked to the MITRE ATT&CK techniques for defense evasion (T1574.001), persistence (T1574.002), and privilege escalation, highlighting its significance in identifying potentially compromised environments.
  ### Investigation Steps
  - **Check EDR Alerts:** Review endpoint detection and response (EDR) alerts for the specific device involved in the potential DLL sideloading action to assess other related suspicious activities.
  - **Examine Process Tree:** Analyze the process tree in the task manager or via EDR tooling to identify the parent process that loaded `dbgcore.dll` to determine if it was a trusted application or potentially malicious.
  - **Review Logs for Command Execution:** Inspect security logs for any command-line executions or process creations associated with the application that loaded `dbgcore.dll`, focusing on recent patterns or anomalies.
  - **Cross-Reference Application Paths:** Validate the paths from which `dbgcore.dll` was loaded against known software inventories to ascertain whether the application is legitimate and expected in your environment.
  ### Prioritization
  The alert generated by this rule is considered medium severity due to its potential indication of DLL sideloading, a technique that can lead to compromise and exploitation of a system if left unchecked. Prompt investigation is essential to confirm whether this is a legitimate or malicious event.
  ### Blind Spots and Assumptions
  This rule may not fire if an attacker uses an alternative method to load `dbgcore.dll`, or if they utilize legitimate applications that preload this DLL from the expected directories, thus avoiding detection. Additionally, environments with extensive use of virtualization or containerization may not log traditional image load events, and specific applications may legitimately sideload the DLL in question without raising alerts. Lastly, the efficacy of this detection hinges on accurate endpoint logging configurations and may miss instances in environments with inadequate logging practices.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
