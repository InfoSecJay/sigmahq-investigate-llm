title: Potential DLL Sideloading Of Libcurl.DLL Via GUP.EXE
id: e49b5745-1064-4ac1-9a2e-f687bc2dd37e
status: test
description: Detects potential DLL sideloading of "libcurl.dll" by the "gup.exe" process
  from an uncommon location
references:
- https://labs.withsecure.com/publications/fin7-target-veeam-servers
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-05-05
tags:
- attack.defense-evasion
- attack.persistence
- attack.privilege-escalation
- attack.t1574.001
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
    Image|endswith: '\gup.exe'
    ImageLoaded|endswith: '\libcurl.dll'
  filter_main_notepad_plusplus:
    Image|endswith: '\Notepad++\updater\GUP.exe'
  condition: selection and not 1 of filter_main_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule detects potential DLL sideloading involving the `libcurl.dll` library by the executable `gup.exe`. DLL sideloading is an increasingly common technique used by adversaries to execute malicious code by exploiting the legitimate processes executing in a given environment. In this case, when `gup.exe`, a normally benign updater process, loads `libcurl.dll` from an uncommon location, it may indicate that the DLL has been maliciously replaced with a version designed to compromise security. The detection mechanism hinges on monitoring image load events through Windows Sysmon, specifically focusing on the criteria that `gup.exe` is the parent process and it loads `libcurl.dll` from unexpected locations. This relates to the MITRE ATT&CK tactics of defense evasion (T1574.001) and persistence (T1574.002), as adversaries might use this technique to maintain access or execute their payload without raising immediate suspicion.
  ### Investigation Steps
  - **Verify the Path of gup.exe:** Check the process path for `gup.exe` using EDR tools to confirm it is not executing from its expected directory, such as `C:\Program Files\Notepad++\updater\`. Any deviations should be scrutinized further.
  - **Analyze Loaded DLLs:** Use Sysmon logs or an EDR platform to examine the loaded DLLs for the `gup.exe` process. Determine whether `libcurl.dll` has been modified or replaced by an untrusted version.
  - **Inspect Network Activity:** Consult network connection logs to assess whether `gup.exe` is attempting to communicate over the network, particularly through unusual ports or destinations, which may indicate exfiltration attempts or callbacks to a command-and-control server.
  - **Review User Activity Logs:** Check Windows Security logs to identify any user actions that coincide with the running of `gup.exe`. This can help reveal whether the legitimate user context was employed for launching the updater or if it was spoofed.
  ### Prioritization
  This alert is categorized with a medium severity level due to the potential for an insider threat or external attack vector that leverages legitimate processes to evade detection, which could lead to data loss or further compromise within the enterprise environment.
  ### Blind Spots and Assumptions
  This detection rule may not trigger if the attacker uses a whitelisted or trusted DLL instead or if the malicious DLL is loaded through a different process. Additionally, if legitimate updates of `gup.exe` occur from a standard location or if `Notepad++` is not present on the system, the rule may fail to fire. Assumptions include the consistent presence of Sysmon for monitoring image load events and that the environment does not have custom configurations that alter normal path structures.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
