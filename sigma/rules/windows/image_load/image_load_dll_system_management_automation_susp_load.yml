title: PowerShell Core DLL Loaded By Non PowerShell Process
id: 092bc4b9-3d1d-43b4-a6b4-8c8acd83522f
related:
- id: 867613fb-fa60-4497-a017-a82df74a172c
  type: obsolete
- id: fe6e002f-f244-4278-9263-20e4b593827f
  type: obsolete
status: test
description: |
  Detects loading of essential DLLs used by PowerShell by non-PowerShell process.
  Detects behavior similar to meterpreter's "load powershell" extension.
references:
- https://adsecurity.org/?p=2921
- https://github.com/p3nt4/PowerShdll
author: Tom Kern, oscd.community, Natalia Shornikova, Tim Shelton, Roberto Rodriguez
  (Cyb3rWard0g), OTR (Open Threat Research)
date: 2019-11-14
modified: 2024-01-17
tags:
- attack.t1059.001
- attack.execution
logsource:
  category: image_load
  product: windows
detection:
  selection:
  - Description: 'System.Management.Automation'
  - OriginalFileName: 'System.Management.Automation.dll'
  - ImageLoaded|endswith:
    - '\System.Management.Automation.dll'
    - '\System.Management.Automation.ni.dll'
  filter_main_generic:
    Image|endswith:
    - ':\Program Files\PowerShell\7\pwsh.exe'         # PowerShell 7
    - ':\Windows\System32\dsac.exe'
    - ':\WINDOWS\System32\RemoteFXvGPUDisablement.exe'
    - ':\Windows\System32\runscripthelper.exe'
    - ':\WINDOWS\System32\sdiagnhost.exe'
    - ':\Windows\System32\ServerManager.exe'
    - ':\Windows\System32\SyncAppvPublishingServer.exe'
    - ':\Windows\System32\WindowsPowerShell\v1.0\powershell_ise.exe'
    - ':\Windows\System32\WindowsPowerShell\v1.0\powershell.exe'
    - ':\Windows\System32\winrshost.exe'
    - ':\Windows\System32\wsmprovhost.exe'
    - ':\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell_ise.exe'
    - ':\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe'
    - ':\Windows\SysWOW64\winrshost.exe'
    - ':\Windows\SysWOW64\wsmprovhost.exe'
  filter_main_dotnet:
    Image|contains:
    - ':\Windows\Microsoft.NET\Framework\'
    - ':\Windows\Microsoft.NET\Framework64\'
    Image|endswith: '\mscorsvw.exe'
  filter_optional_sql_server_mgmt:
    Image|contains:
    - ':\Program Files (x86)\Microsoft SQL Server Management Studio'
    - ':\Program Files\Microsoft SQL Server Management Studio'
    Image|endswith: '\IDE\Ssms.exe'
  filter_optional_sql_server_tools:
    Image|contains:
    - ':\Program Files (x86)\Microsoft SQL Server\'
    - ':\Program Files\Microsoft SQL Server\'
    Image|endswith: '\Tools\Binn\SQLPS.exe'
  filter_optional_citrix:
    Image|endswith: '\Citrix\ConfigSync\ConfigSyncRun.exe'
  filter_optional_vs:
    Image|contains:
    - ':\Program Files (x86)\Microsoft Visual Studio\'
    - ':\Program Files\Microsoft Visual Studio\'
  filter_optional_chocolatey:
    Image|contains: ':\ProgramData\chocolatey\choco.exe'
  filter_optional_nextron:
    Image|contains: ':\Windows\Temp\asgard2-agent\'
    Image|endswith:
    - '\thor64.exe'
    - '\thor.exe'
        # User: 'NT AUTHORITY\SYSTEM'   # if set, matches all powershell processes not launched by SYSTEM
  filter_optional_aurora:
        # This filter is to avoid a race condition FP with this specific ETW provider in aurora
    Image:
  condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- Used by some .NET binaries, minimal on user workstation.
- Used by Microsoft SQL Server Management Studio
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect when the PowerShell Core Dynamic Link Libraries (DLLs), specifically `System.Management.Automation.dll`, are loaded by processes that are not PowerShell executable files. The detection focuses on the `ImageLoad` events in Windows, where the presence of the PowerShell DLL in the loaded images of non-PowerShell processes indicates potentially suspicious behavior. Common execution vectors, such as the meterpreter tool's loading of PowerShell functionality, can be identified through this mechanism. The rule utilizes logs from processes as well as image load events to create a condition that flags any anomalies when the PowerShell DLLs are loaded by processes outside the known set of legitimate PowerShell executables.
  ### Investigation Steps
  - **Query EDR and image load logs** to find the processes that have loaded `System.Management.Automation.dll`, paying close attention to their execution context and parent processes.
  - **Review command-line arguments** of the triggering non-PowerShell processes using EDR to identify any potentially malicious or unusual command execution patterns that could suggest exploitation attempts.
  - **Correlate with additional logs** from network detection tools (NDR) to determine if these non-PowerShell processes communicated externally during their operation, indicating potential data exfiltration or command-and-control activities.
  - **Investigate any alerts from antivirus (AV) software** that may have flagged the non-PowerShell processes for suspicious behavior or known threats related to the unusual loading of PowerShell DLLs.
