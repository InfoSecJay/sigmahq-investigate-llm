title: WMIC Loading Scripting Libraries
id: 06ce37c2-61ab-4f05-9ff5-b1a96d18ae32
status: test
description: Detects threat actors proxy executing code and bypassing application
  controls by leveraging wmic and the `/FORMAT` argument switch to download and execute
  an XSL file (i.e js, vbs, etc).
references:
- https://securitydatasets.com/notebooks/atomic/windows/defense_evasion/SDWIN-201017061100.html
- https://twitter.com/dez_/status/986614411711442944
- https://lolbas-project.github.io/lolbas/Binaries/Wmic/
author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
date: 2020-10-17
modified: 2022-10-13
tags:
- attack.defense-evasion
- attack.t1220
logsource:
  category: image_load
  product: windows
detection:
  selection:
    Image|endswith: '\wmic.exe'
    ImageLoaded|endswith:
    - '\jscript.dll'
    - '\vbscript.dll'
  condition: selection
falsepositives:
- The command wmic os get lastboottuptime loads vbscript.dll
- The command wmic os get locale loads vbscript.dll
- Since the ImageLoad event doesn't have enough information in this case. It's better
  to look at the recent process creation events that spawned the WMIC process and
  investigate the command line and parent/child processes to get more insights
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "WMIC Loading Scripting Libraries" is designed to detect potential malicious activity where threat actors may leverage Windows Management Instrumentation Command-line (WMIC) to execute code that bypasses standard application controls. This rule specifically looks for instances where WMIC is utilized with the `/FORMAT` argument to download and execute potentially malicious scripting files (e.g., JavaScript or Visual Basic Script files). The telemetry data sources involved primarily include the image load events from Windows, which record when specific libraries (such as `jscript.dll` or `vbscript.dll`) are loaded into memory by the WMIC process. This detection ties into the MITRE ATT&CK framework under the tactic of **Defense Evasion** and specifically technique **T1220**, indicating its relevance in identifying unusual command-line usage that may point to an attempt to manipulate system components maliciously.
  ### Investigation Steps
  - **Review WMIC Process Creation Events:** Check the process creation logs for instances where `wmic.exe` was invoked. Pay particular attention to the command-line arguments and the parent processes that initiated this execution.
  - **Analyze Image Load Events:** Utilize EDR solutions to investigate image load events that show `wmic.exe` loading scripting libraries like `jscript.dll` or `vbscript.dll`. This will help identify whether these libraries were used legitimately or in a suspicious context.
  - **Correlate with Additional Logs:** Cross-reference findings with other logs, such as Network Detection and Response (NDR) data, to identify any communications initiated after the WMIC invocation. This could provide insight into whether a follow-up reconnaissance or exfiltration attempt occurred.
  - **Identify False Positives:** Be aware of known legitimate usages of WMIC that may trigger this rule, such as certain system commands like `wmic os get lastboottime`. Investigate these cases further if found to reduce unnecessary alert fatigue.
  ### Prioritization
  This alert is considered medium severity due to its potential correlation with evasive tactics employed by threat actors. While not all instances of WMIC usage indicate malicious activity, the loading of scripting libraries warrants prompt investigation to rule out an active compromise.
  ### Blind Spots and Assumptions
  This rule may not fire in cases where the WMIC process is executed without loading the targeted scripting libraries, or if the execution occurs in a non-interactive session that doesnâ€™t generate relevant image load events. Additionally, it assumes that all system logging is enabled and functioning correctly, and vulnerabilities in logging itself could obscure malicious activities. Analysts should also be aware that adversaries can use alternative methods for executing scripts that bypass WMIC entirely, thereby evading detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
