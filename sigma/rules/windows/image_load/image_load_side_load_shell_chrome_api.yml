title: DLL Sideloading Of ShellChromeAPI.DLL
id: ee4c5d06-3abc-48cc-8885-77f1c20f4451
related:
- id: e173ad47-4388-4012-ae62-bd13f71c18a8
  type: similar
status: test
description: |
  Detects processes loading the non-existent DLL "ShellChromeAPI". One known example is the "DeviceEnroller" binary in combination with the "PhoneDeepLink" flag tries to load this DLL.
  Adversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter
references:
- https://mobile.twitter.com/0gtweet/status/1564131230941122561
- https://strontic.github.io/xcyclopedia/library/DeviceEnroller.exe-24BEF0D6B0ECED36BB41831759FDE18D.html
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-12-01
tags:
- attack.defense-evasion
- attack.persistence
- attack.privilege-escalation
- attack.t1574.001
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
        # The DLL shouldn't exist on Windows anymore. If for some reason you still have it. You could filter out legitimate calls
    ImageLoaded|endswith: '\ShellChromeAPI.dll'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule for detecting the loading of "ShellChromeAPI.dll" aims to identify unauthorized use of this particular DLL, which should not exist on modern Windows systems. The rule specifically focuses on process activities where "ShellChromeAPI.dll" is loaded, typically within the context of the "DeviceEnroller.exe" application when launched with the "PhoneDeepLink" flag. Adversaries may utilize this mechanism to perform DLL sideloading, where they drop a maliciously renamed version of the DLL, enabling them to execute arbitrary code under the guise of a legitimate process. This rule leverages telemetry from image load events in Windows, tracking instances where this DLL is invoked. It aligns with MITRE ATT&CK techniques for defense evasion (T1574.001) and persistence (T1574.002), as these tactics often aim to obscure malicious activity by leveraging trusted processes.
  ### Investigation Steps
  - **Verify DLL Existence:** Check Windows DLL directories to confirm that "ShellChromeAPI.dll" does not exist on the system to rule out legitimate use and further investigate the nature of the triggering process.
  - **Process Analysis:** Utilize EDR solutions to monitor the process tree associated with "DeviceEnroller.exe" to identify any potentially malicious child processes spawned in conjunction with the DLL load.
  - **Command-Line Inspection:** Review command-line parameters used to launch "DeviceEnroller.exe" via Windows Event Logs for any suspicious flags indicating potential exploits, particularly "PhoneDeepLink."
  - **Network Traffic Review:** Analyze network connections established by the process in question using NDR tools to detect unusual behavior, such as connections to known malicious domains following the DLL load.
  ### Prioritization
  This alert is assigned a high severity level due to the implications of a potential compromise of system integrity and the risk associated with adversary attempts to execute arbitrary code within a trusted process.
  ### Blind Spots and Assumptions
  This rule may not trigger in environments where the adversary has successfully renamed the DLL or modified the application's behavior to avoid detection. Additionally, if the DLL's filename is changed or if the process is executed in a context that does not utilize standard image loading mechanisms, the rule may fail to detect activity. Furthermore, legitimate applications that inadvertently use this DLL may generate false positives, necessitating manual triage.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
