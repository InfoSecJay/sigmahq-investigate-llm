title: Potential Antivirus Software DLL Sideloading
id: 552b6b65-df37-4d3e-a258-f2fc4771ae54
status: test
description: Detects potential DLL sideloading of DLLs that are part of antivirus
  software suchas McAfee, Symantec...etc
references:
- https://hijacklibs.net/     # For list of DLLs that could be sideloaded (search for dlls mentioned here in there)
author: Nasreddine Bencherchali (Nextron Systems), Wietze Beukema (project and research)
date: 2022-08-17
modified: 2023-03-13
tags:
- attack.defense-evasion
- attack.persistence
- attack.privilege-escalation
- attack.t1574.001
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
    # Bitdefender
  selection_bitdefender:
    ImageLoaded|endswith: '\log.dll'
  filter_log_dll_bitdefender:
    ImageLoaded|startswith:
    - 'C:\Program Files\Bitdefender Antivirus Free\'
    - 'C:\Program Files (x86)\Bitdefender Antivirus Free\'
  filter_log_dll_dell_sar:
    Image: 'C:\Program Files\Dell\SARemediation\audit\TelemetryUtility.exe'
    ImageLoaded:
    - 'C:\Program Files\Dell\SARemediation\plugin\log.dll'
    - 'C:\Program Files\Dell\SARemediation\audit\log.dll'
  filter_log_dll_canon:
    ImageLoaded|startswith: 'C:\Program Files\Canon\MyPrinter\'
    # F-Secure
  selection_fsecure:
    ImageLoaded|endswith: '\qrt.dll'
  filter_fsecure:
    ImageLoaded|startswith:
    - 'C:\Program Files\F-Secure\Anti-Virus\'
    - 'C:\Program Files (x86)\F-Secure\Anti-Virus\'
    # McAfee
  selection_mcafee:
    ImageLoaded|endswith:
    - '\ashldres.dll'
    - '\lockdown.dll'
    - '\vsodscpl.dll'
  filter_mcafee:
    ImageLoaded|startswith:
    - 'C:\Program Files\McAfee\'
    - 'C:\Program Files (x86)\McAfee\'
    # CyberArk
  selection_cyberark:
    ImageLoaded|endswith: '\vftrace.dll'
  filter_cyberark:
    ImageLoaded|startswith:
    - 'C:\Program Files\CyberArk\Endpoint Privilege Manager\Agent\x32\'
    - 'C:\Program Files (x86)\CyberArk\Endpoint Privilege Manager\Agent\x32\'
    # Avast
  selection_avast:
    ImageLoaded|endswith: '\wsc.dll'
  filter_avast:
    ImageLoaded|startswith:
    - 'C:\program Files\AVAST Software\Avast\'
    - 'C:\program Files (x86)\AVAST Software\Avast\'
    # ESET
  selection_eset_deslock:
    ImageLoaded|endswith: '\DLPPREM32.dll'
  filter_eset_deslock:
    ImageLoaded|startswith:
    - 'C:\program Files\ESET'
    - 'C:\program Files (x86)\ESET'
    # Trend Micro Titanium
  selection_titanium:
    ImageLoaded|endswith: '\tmdbglog.dll'
  filter_titanium:
    ImageLoaded|startswith:
    - 'C:\program Files\Trend Micro\Titanium\'
    - 'C:\program Files (x86)\Trend Micro\Titanium\'
  condition: (selection_bitdefender and not 1 of filter_log_dll_*) or (selection_fsecure
    and not filter_fsecure) or (selection_mcafee and not filter_mcafee) or (selection_cyberark
    and not filter_cyberark) or (selection_avast and not filter_avast) or (selection_titanium
    and not filter_titanium) or (selection_eset_deslock and not filter_eset_deslock)
falsepositives:
- Applications that load the same dlls mentioned in the detection section. Investigate
  them and filter them out if a lot FPs are caused.
- Dell SARemediation plugin folder (C:\Program Files\Dell\SARemediation\plugin\log.dll)
  is known to contain the 'log.dll' file.
- The Canon MyPrinter folder 'C:\Program Files\Canon\MyPrinter\' is known to contain
  the 'log.dll' file
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Potential Antivirus Software DLL Sideloading" is designed to detect suspicious loading of specific Dynamic Link Libraries (DLLs) associated with well-known antivirus solutions. Adversaries may attempt to sideload DLLs to execute malicious payloads by misleading the system into loading these libraries from unauthorized locations rather than their legitimate paths. The rule identifies this potentially malicious behavior by monitoring Windows image load events (Sysmon data) for the presence of DLLs that should only be loaded from specific, authorized directories. The detected DLLs include those associated with antivirus products like Bitdefender, F-Secure, McAfee, and others.
  This rule falls under the MITRE ATT&CK tactics of "Defense Evasion" (T1574) and "Persistence" (T1574.001), which highlights the attempts by adversaries to ensure continued access to a system while avoiding detection by traditional security measures. By querying image load logs, the rule ensures that any instance of these critical DLLs being loaded from unauthorized paths can be flagged for further investigation.
  ### Investigation Steps
  - **Verify the Source of DLLs:** Use EDR to trace the loading activity of the flagged DLLs and verify the original process that attempted to load them.
  - **Check for Similar Incidents:** Query historical alert data in your SIEM to identify if similar image load events have been previously reported, helping to establish patterns or recurring issues.
  - **Correlate with Security Logs:** Review related Windows Security Event Logs, specifically for any anomalies surrounding the time the alerts were triggered, including user authentication events and process creation logs.
  - **Investigate Potential False Positives:** Explore the context surrounding the flagged DLLs, particularly for legitimate applications that may load them, and filter out false positives accordingly within your investigation framework.
  ### Prioritization
  The severity of this alert is considered medium within an enterprise environment because attempted DLL sideloading is a tactic that could result in unauthorized code execution or privilege escalation, posing a significant risk to system integrity and data security.
  ### Blind Spots and Assumptions
  One limitation of this detection rule is that it may not capture all instances of DLL sideloading, particularly if an adversary uses different or lesser-known libraries to execute their payloads. Additionally, legitimate programs that also use the same DLLs may trigger false positives, making it vital for engineers to continuously evaluate and refine the detection logic. There is an assumption that all legitimate applications have been appropriately sourced and their paths verified; if new applications are introduced without proper monitoring, they could evade detection. Furthermore, if DLL files are placed in the legitimate application directories without adequate logging practices, the rule may fail to fire.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
