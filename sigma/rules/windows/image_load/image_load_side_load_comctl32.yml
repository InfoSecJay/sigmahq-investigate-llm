title: Potential DLL Sideloading Via comctl32.dll
id: 6360757a-d460-456c-8b13-74cf0e60cceb
status: test
description: Detects potential DLL sideloading using comctl32.dll to obtain system
  privileges
references:
- https://github.com/binderlabs/DirCreate2System
- https://github.com/sailay1996/awesome_windows_logical_bugs/blob/60cbb23a801f4c3195deac1cc46df27c225c3d07/dir_create2system.txt
author: Nasreddine Bencherchali (Nextron Systems), Subhash Popuri (@pbssubhash)
date: 2022-12-16
modified: 2022-12-19
tags:
- attack.defense-evasion
- attack.persistence
- attack.privilege-escalation
- attack.t1574.001
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
    ImageLoaded|startswith:
    - 'C:\Windows\System32\logonUI.exe.local\'
    - 'C:\Windows\System32\werFault.exe.local\'
    - 'C:\Windows\System32\consent.exe.local\'
    - 'C:\Windows\System32\narrator.exe.local\'
    - 'C:\windows\system32\wermgr.exe.local\'
    ImageLoaded|endswith: '\comctl32.dll'
  condition: selection
falsepositives:
- Unlikely
level: high
notes: |
  ### Technical Context
  This detection rule is designed to identify potential DLL sideloading activities through the monitoring of malicious modifications to system binaries which are loaded via the `comctl32.dll` library. DLL sideloading is a technique used by adversaries to execute their malicious code by renaming and placing a .local version of a legitimate executable in the same directory as a legitimate DLL that the executable loads. The rule specifically looks for the loading of the `comctl32.dll` file from the local versions of several common executables, including `logonUI.exe`, `werFault.exe`, `consent.exe`, `narrator.exe`, and `wermgr.exe`. Monitoring these processes is essential as they are part of Windows' core functionality, and any unauthorized modifications can indicate an attempt to gain system privileges or evade detection.
  This rule is particularly relevant to the MITRE ATT&CK techniques T1574.001 (DLL Side-Loading) and T1574.002 (DLL Search Order Hijacking), which represent common methods of executing malicious code under the guise of legitimate processes. The rule leverages data from the Windows Sysmon log source for image load events, focusing on identifying anomalous behavior in system binaries.
  ### Investigation Steps
  - **Review Image Load Events:** Start by examining recent Windows Sysmon image load events to identify occurrences of `comctl32.dll` being loaded from the defined suspicious executable paths.
  - **Cross-Reference with Process Creation Logs:** Correlate the detected events with process creation logs to identify which processes initiated the load of the potentially compromised binaries.
  - **Check Network Connections:** Investigate any associated network connections made by these processes using EDR tools, as this may reveal communication with command and control servers or other indicators of compromise.
  - **Utilize Endpoint Protection Tools:** Run a full scan on the affected endpoints using your EDR and AV solutions to detect and remediate any malware that may have leveraged DLL sideloading for lateral movement or privilege escalation.
  ### Prioritization
  Given that DLL sideloading can enable an attacker to gain system privileges and potentially establish a foothold within the network, this alert is deemed high severity. Immediate investigation and response are warranted to mitigate potential breaches.
  ### Blind Spots and Assumptions
  This rule may not fire in environments where legitimate applications have been renamed to use local versions of system binaries. Additionally, custom applications or less common execution paths not covered by the rule may evade detection. It is assumed that proper Sysmon configurations are in place; otherwise, the lack of relevant image load records can lead to missed detections. Adversaries might also use signed binaries or various obfuscation techniques to alter the loading behavior of DLLs, thereby bypassing the rule entirely.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
