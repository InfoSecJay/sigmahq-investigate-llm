title: Potential DLL Sideloading Via JsSchHlp
id: 68654bf0-4412-43d5-bfe8-5eaa393cd939
status: test
description: Detects potential DLL sideloading using JUSTSYSTEMS Japanese word processor
references:
- https://www.welivesecurity.com/2022/12/14/unmasking-mirrorface-operation-liberalface-targeting-japanese-political-entities/
- http://www.windowexe.com/bbs/board.php?q=jsschhlp-exe-c-program-files-common-files-justsystem-jsschhlp-jsschhlp
author: frack113
date: 2022-12-14
tags:
- attack.defense-evasion
- attack.persistence
- attack.privilege-escalation
- attack.t1574.001
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
    ImageLoaded|endswith: '\JSESPR.dll'
  filter:
    ImageLoaded|startswith: 'C:\Program Files\Common Files\Justsystem\JsSchHlp\'
  condition: selection and not filter
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Potential DLL Sideloading Via JsSchHlp" is designed to detect a specific tactic employed in cyberattacks, particularly DLL sideloading through a known application. In DLL sideloading attacks, an attacker places a malicious DLL in a location that a legitimate application (in this case, the JUSTSYSTEMS Japanese word processor) loads as part of its execution. This rule specifically identifies instances where the application attempts to load a DLL (`JSESPR.dll`) that is not from its expected directory path. By monitoring the `ImageLoaded` events, particularly those that end with the name `JSESPR.dll` and comparing them against the expected file path that starts with `C:\Program Files\Common Files\Justsystem\JsSchHlp\`, the rule aims to flag potentially malicious activity. This detection aligns with the MITRE ATT&CK techniques for defense evasion (T1574.001) and persistence (T1574.002), indicating attempts to evade detection while maintaining access to a compromised system or environment.
  ### Investigation Steps
  - **Review EDR Alerts:** Examine the endpoint detection and response (EDR) alerts on the affected machines to identify any associated malicious behavior related to the execution of the JUSTSYSTEMS application.
  - **Inspect Process Activity:** Utilize process creation logs to verify if the JUSTSYSTEMS application invoked the loading of the suspicious DLL. Pay attention to parent-child process relationships for suspicious anomalies.
  - **Analyze File Behavior:** Check for any recent modifications or creations of the `JSESPR.dll` and other related files in the expected directories using file integrity monitoring tools.
  - **Examine Network Connections:** Use network detection and response (NDR) tools to track any outbound connections initiated by the application around the time of the detection to identify potential exfiltration or command-and-control (C2) communications.
  ### Prioritization
  This alert is categorized as medium severity because DLL sideloading can lead to privilege escalation or persistence in a compromised environment. If confirmed, such activities necessitate immediate investigation to prevent further exploitation.
  ### Blind Spots and Assumptions
  This detection rule may not fire if the attacker uses a valid DLL from an expected directory or if the expected application was removed or is unavailable, leading to a legitimate process loading a compromised DLL from an alternative location. Additionally, if the adversary employs techniques such as modifying the application's code to load a legitimate DLL instead, this could evade detection. Engineers should be aware that variations in deployment setups across environments may lead to differences in path structures that can affect the ruleâ€™s efficacy.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and clarity, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
