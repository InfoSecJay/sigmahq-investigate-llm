title: Potential ShellDispatch.DLL Sideloading
id: 844f8eb2-610b-42c8-89a4-47596e089663
status: test
description: Detects potential DLL sideloading of "ShellDispatch.dll"
references:
- https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/
author: X__Junior (Nextron Systems)
date: 2023-06-20
tags:
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1574.001
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
    ImageLoaded|endswith: '\ShellDispatch.dll'
  filter_main_legit_path:
  - ImageLoaded|contains|all:
    - ':\Users\'
    - '\AppData\Local\Temp\'
  - ImageLoaded|contains: ':\Windows\Temp\'
  condition: selection and not 1 of filter_main_*
falsepositives:
- Some installers may trigger some false positives
level: medium
notes: |
  ### Technical Context
  This detection rule identifies potential DLL sideloading involving the `ShellDispatch.dll`, a known living-off-the-land binary (LoLBIN). DLL sideloading is a technique where a malicious actor exploits a legitimate application to load a malicious DLL from an untrusted location. The rule particularly targets image load events that indicate when `ShellDispatch.dll` is accessed. To implement this detection, the rule analyzes Sysmon logs, specifically focusing on the `ImageLoaded` event to capture instances where `ShellDispatch.dll` is loaded from non-standard paths like user directories or temporary folders. This behavior may be indicative of an attempt to circumvent application security by masquerading or injecting malicious activity into a trusted context. The corresponding MITRE ATT&CK tactics for this rule are "Defense Evasion" (T1574.001) and "Privilege Escalation" (T1574.002), highlighting the potential for adversaries to evade detection and gain higher privileges through such means.
  ### Investigation Steps
  - **Review Sysmon Logs:** Look for Sysmon event IDs related to image loads to gather details about the loading of `ShellDispatch.dll`. Pay close attention to the file paths associated with the image load event to determine if they are legitimate or indicative of malicious activity.
  - **Cross-reference with EDR Alerts:** Utilize your EDR solution to correlate any suspicious processes that have interacted with `ShellDispatch.dll`. This will help uncover any potentially malicious parent processes that may require deeper investigation.
  - **Analyze Command-line Parameters:** Check command-line arguments for any processes that are associated with the loading of `ShellDispatch.dll`. This can provide additional context that may indicate exploitation or abuse of the DLL.
  - **Investigate Network Connections:** Review network connection logs to identify any unusual outbound connections that correspond with the time of the DLL load event. This may reveal communication with command and control (C2) servers.
  ### Prioritization
  The severity of this alert is categorized as medium, reflecting the need for timely investigation. While not every instance of `ShellDispatch.dll` loading indicates a compromise, it can signify attempts to evade detection, necessitating scrutiny before potential escalation.
  ### Blind spots and Assumptions
  This rule may not fire if the malicious `ShellDispatch.dll` is loaded from a legitimate path that is unexpected or if the adversary has used obfuscation techniques to disguise their actions. Additionally, legitimate software installations could inaccurately trigger this rule, leading to potential false positives. It is assumed that adversaries may utilize known LoLBINs to evade detection, meaning effective monitoring and behavior-based analysis are critical for catching such tactics comprehensively.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and relevance, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
