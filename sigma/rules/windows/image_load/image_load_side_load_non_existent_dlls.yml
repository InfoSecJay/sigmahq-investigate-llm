title: Potential DLL Sideloading Of Non-Existent DLLs From System Folders
id: 6b98b92b-4f00-4f62-b4fe-4d1920215771
related:
- id: df6ecb8b-7822-4f4b-b412-08f524b4576c     # FileEvent rule
  type: similar
- id: 602a1f13-c640-4d73-b053-be9a2fa58b77
  type: obsolete
status: test
description: |
  Detects DLL sideloading of system DLLs that are not present on the system by default (at least not in system directories).
  Usually this technique is used to achieve UAC bypass or privilege escalation.
references:
- https://decoded.avast.io/martinchlumecky/png-steganography/
- https://posts.specterops.io/lateral-movement-scm-and-dll-hijacking-primer-d2f61e8ab992
- https://clement.notin.org/blog/2020/09/12/CVE-2020-7315-McAfee-Agent-DLL-injection/
- https://github.com/Wh04m1001/SysmonEoP
- https://www.hexacorn.com/blog/2013/12/08/beyond-good-ol-run-key-part-5/
- http://remoteawesomethoughts.blogspot.com/2019/05/windows-10-task-schedulerservice.html
author: Nasreddine Bencherchali (Nextron Systems), SBousseaden
date: 2022-12-09
modified: 2024-01-10
tags:
- attack.defense-evasion
- attack.persistence
- attack.privilege-escalation
- attack.t1574.001
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
    ImageLoaded|endswith:
            # Add other DLLs
    - ':\Windows\System32\TSMSISrv.dll'
    - ':\Windows\System32\TSVIPSrv.dll'
    - ':\Windows\System32\wbem\wbemcomn.dll'
    - ':\Windows\System32\WLBSCTRL.dll'
    - ':\Windows\System32\wow64log.dll'
    - ':\Windows\System32\WptsExtensions.dll'
  filter_main_ms_signed:
    Signed: 'true'
    SignatureStatus: 'Valid'
        # There could be other signatures (please add when found)
    Signature: 'Microsoft Windows'
  condition: selection and not 1 of filter_main_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule identifies potential DLL sideloading attempts targeting non-existent or unauthorized DLLs within system directories on Windows environments. DLL sideloading is a common method used by attackers to bypass User Account Control (UAC) and escalate privileges by loading malicious DLLs that masquerade as legitimate system files. The rule specifically looks for DLLs loaded from typical Windows system directories, such as `C:\Windows\System32`, and checks if they are signed by Microsoft with a valid signature. If the DLL loaded is found in the specified paths but not listed among the valid files, this indicates a suspicious activity potentially related to malware and lateral movement.
  The primary data sources involved include image load event logs, which capture details about the DLLs being loaded into processes, along with their signatures. By filtering these logs for correctly signed images but with suspicious filenames, the rule can effectively highlight potential security breaches that warrant further investigation.
  ### Investigation Steps
  - Review the EDR logs for any incidents related to the identified DLLs to ascertain if the loading events correlate with known malicious behavior or recent changes in the system.
  - Investigate process creation logs around the time of the alert to determine what applications or services initiated the loading of the suspect DLLs.
  - Check the AV and cloud logs for any detections or flags related to the suspicious DLLs to see if they have been previously recognized as malicious.
  - Analyze the network traffic and proxy logs for any unusual outbound connections that could suggest data exfiltration or communication with known malicious entities concurrent with the DLL loading events.
