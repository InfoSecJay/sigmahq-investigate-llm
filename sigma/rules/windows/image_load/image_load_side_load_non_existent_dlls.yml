title: Potential DLL Sideloading Of Non-Existent DLLs From System Folders
id: 6b98b92b-4f00-4f62-b4fe-4d1920215771
related:
- id: df6ecb8b-7822-4f4b-b412-08f524b4576c     # FileEvent rule
  type: similar
- id: 602a1f13-c640-4d73-b053-be9a2fa58b77
  type: obsolete
status: test
description: |
  Detects DLL sideloading of system DLLs that are not present on the system by default (at least not in system directories).
  Usually this technique is used to achieve UAC bypass or privilege escalation.
references:
- https://decoded.avast.io/martinchlumecky/png-steganography/
- https://posts.specterops.io/lateral-movement-scm-and-dll-hijacking-primer-d2f61e8ab992
- https://clement.notin.org/blog/2020/09/12/CVE-2020-7315-McAfee-Agent-DLL-injection/
- https://github.com/Wh04m1001/SysmonEoP
- https://www.hexacorn.com/blog/2013/12/08/beyond-good-ol-run-key-part-5/
- http://remoteawesomethoughts.blogspot.com/2019/05/windows-10-task-schedulerservice.html
author: Nasreddine Bencherchali (Nextron Systems), SBousseaden
date: 2022-12-09
modified: 2024-01-10
tags:
- attack.defense-evasion
- attack.persistence
- attack.privilege-escalation
- attack.t1574.001
- attack.t1574.002
logsource:
  category: image_load
  product: windows
detection:
  selection:
    ImageLoaded|endswith:
            # Add other DLLs
    - ':\Windows\System32\TSMSISrv.dll'
    - ':\Windows\System32\TSVIPSrv.dll'
    - ':\Windows\System32\wbem\wbemcomn.dll'
    - ':\Windows\System32\WLBSCTRL.dll'
    - ':\Windows\System32\wow64log.dll'
    - ':\Windows\System32\WptsExtensions.dll'
  filter_main_ms_signed:
    Signed: 'true'
    SignatureStatus: 'Valid'
        # There could be other signatures (please add when found)
    Signature: 'Microsoft Windows'
  condition: selection and not 1 of filter_main_*
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This Sigma rule is designed to detect potential DLL sideloading of non-existent DLLs from system folders on Windows systems. DLL sideloading is a technique often used by attackers to achieve UAC (User Account Control) bypass or privilege escalation by loading malicious DLLs that may not be present on the target system. The rule specifically examines the loading of images (e.g., DLLs) within specific system directories, focusing on those which end with designated system DLL names. The detection relies on telemetry captured through **Windows Sysmon's image_load events**. By identifying legitimate DLLs that are loaded from system folders, the rule can effectively pinpoint any attempts to sideload harmful or unofficially signed DLLs. 
  This technique relates to the MITRE ATT&CK tactics of **Defense Evasion** and **Privilege Escalation**, specifically under techniques T1574.001 and T1574.002, which describe methods attackers use to persist in environments or escalate privileges using unauthorized or malicious code.
  ### Investigation Steps
  - **Verify Suspicious DLLs:** Use Sysmon logs to correlate event IDs related to image loads to confirm if the loaded DLLs match the ones listed in the Sigma rule and ascertain their legitimacy.
  - **Cross-reference Process Activities:** Utilize EDR solutions to check the activity of processes that loaded the suspected DLLs to identify any anomalous behavior or additional orchestrated actions related to lateral movement.
  - **Check for UAC Bypass Indications:** Review Windows Security logs for any recent changes to UAC settings or any mentions of UAC bypass methods that coincide with the timeline of the alert.
  - **Analyze Network Connections:** Examine network logs through the NDR tool to discover any unusual outbound connections initiated by processes associated with the loaded DLLs.
  ### Prioritization
  The high severity level of this alert indicates a critical need for immediate investigation, as successful DLL sideloading can lead to unauthorized access and control over the affected systems, posing a significant risk to the organization's security posture.
  ### Blind Spots and Assumptions
  This rule assumes that the necessary telemetry from Sysmon is available and correctly configured to capture image load events. It may not fire if attackers utilize signed DLLs that are legitimate and thus circumvent detection by the rule. Additionally, if attackers remove or tamper with logs post-exploitation, it may hinder the investigation. Engineers should be aware that sophisticated adversaries might also use known signatures or encrypt their payloads to evade detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
