title: Python Image Load By Non-Python Process
id: cbb56d62-4060-40f7-9466-d8aaf3123f83
status: test
description: Detects the image load of "Python Core" by a non-Python process. This
  might be indicative of a Python script bundled with Py2Exe.
references:
- https://www.py2exe.org/
- https://unit42.paloaltonetworks.com/unit-42-technical-analysis-seaduke/
author: Patrick St. John, OTR (Open Threat Research)
date: 2020-05-03
modified: 2023-09-18
tags:
- attack.defense-evasion
- attack.t1027.002
logsource:
  product: windows
  category: image_load
detection:
  selection:
    Description: 'Python Core'
  filter_main_generic:
  - Image|contains: 'Python'        # FPs with python38.dll, python.exe etc.
  - Image|startswith:
    - 'C:\Program Files\'
    - 'C:\Program Files (x86)\'
    - 'C:\ProgramData\Anaconda3\'           # Comment out if you don't use Anaconda in your environment
  filter_optional_aurora:
    Image:
  condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- Legitimate Py2Exe Binaries
- Known false positive caused with Python Anaconda
level: medium
notes: |
  ### Technical Context
  This detection rule is designed to identify instances where the "Python Core" image is loaded by a non-Python process. Typically, the legitimate loading of Python libraries occurs within Python processes themselves, but when this occurs through an external process, it can signify potentially malicious activity, such as the use of a Python script bundled within Py2Exe. This could indicate an attempt to execute unauthorized operations or exploit Python libraries in a way thatâ€™s not typical for legitimate uses. The rule relies on monitoring Windows Sysmon `image_load` events to catch such behavior, using criteria that include specific image path locations commonly associated with Python installations.
  The rule targets the MITRE ATT&CK technique T1027.002 (Obfuscated Files or Information), which falls under the defense evasion tactic. By observing unusual loading patterns of core Python components by non-standard processes, analysts can detect suspicious activity indicative of evasion methods utilized by threat actors.
  ### Investigation Steps
  - **Identify Process Context:** Use EDR tools to identify the parent process that loaded the "Python Core." Determine if the process is potentially malicious based on its behavior and reputation.
  - **Review Sysmon Logs:** Extract Sysmon logs within the defined time frame to analyze additional `image_load` entries for the Python-related libraries and correlate them with the suspicious process.
  - **Check Execution History:** Investigate the execution history of the non-Python process for any previous instances where it called other Python components to establish a pattern or trend.
  - **Assess Network Activity:** Utilize network logs to evaluate if any unexpected external communications were initiated by the non-Python process, which could indicate data exfiltration or command and control (C2) activity.
  ### Prioritization
  The severity level is considered medium due to the potential for defense evasion and the use of legitimate tools for malicious purposes. Although not every instance denotes malicious activity, it's important to investigate further since such behavior may lead to serious security incidents if left unchecked.
  ### Blind Spots and Assumptions
  This rule may not fire in environments heavily relying on the Python framework where legitimate scripts or applications frequently interact with Python components. It also assumes that all Python installations are correctly established within the specified default paths and may miss detections if installations occur in non-standard directories. Furthermore, if threat actors utilize fully obfuscated methods to load Python libraries, the rule may not detect such actions as anticipated. Analysts should be aware of known false positives originating from Py2Exe binaries and the Anaconda distribution if applicable.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
