title: Potential Credential Dumping Attempt Via PowerShell Remote Thread
id: fb656378-f909-47c1-8747-278bf09f4f4f
related:
- id: 3f07b9d1-2082-4c56-9277-613a621983cc
  type: obsolete
- id: 0f920ebe-7aea-4c54-b202-9aa0c609cfe5
  type: similar
status: test
description: Detects remote thread creation by PowerShell processes into "lsass.exe"
references:
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse
author: oscd.community, Natalia Shornikova
date: 2020-10-06
modified: 2022-12-18
tags:
- attack.credential-access
- attack.t1003.001
logsource:
  product: windows
  category: create_remote_thread
detection:
  selection:
    SourceImage|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    TargetImage|endswith: '\lsass.exe'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule is designed to identify potential credential dumping attempts on Windows systems, specifically those that exploit PowerShell to interact with the Local Security Authority Subsystem Service (LSASS) process. LSASS is responsible for enforcing the security policy on the system and managing user logins, making it a valuable target for attackers looking to extract credentials. The rule focuses on instances where a PowerShell process (either `powershell.exe` or `pwsh.exe`) attempts to create a remote thread in the `lsass.exe` process. This suspicious behavior is indicative of attackers using techniques from the MITRE ATT&CK framework, particularly the "Credential Dumping" tactic (T1003.001), to facilitate unauthorized access to sensitive information. The detection is executed using Windows Sysmon logs, specifically monitoring events related to remote thread creation.
  ### Investigation Steps
  - **Check EDR Alerts:** Inspect EDR alerts for additional context on the PowerShell process that triggered the detection, including its execution history and any associated files or scripts used.
    
  - **Review Process Creation Logs:** Examine Windows Event Logs to analyze the associated process creation events. Look at the command-line parameters used to launch PowerShell for any indicators of potentially malicious intent.
  - **Analyze Network Connections:** Use network detection tools (NDR) to check outbound connections made by the PowerShell process. Investigate any suspicious or unauthorized connections that coincide with the time of the alert, especially to known malicious domains.
  - **Examine LSASS Process Behavior:** Utilize Sysmon logs to monitor activity related to the LSASS process after the alert was triggered. Look for any abnormal memory access patterns or additional threads created by PowerShell that could indicate credential extraction attempts.
  ### Prioritization
  The severity level is classified as high due to the nature of the attack vector; attempts to dump credentials from LSASS can lead to significant security incidents, including data breaches and unauthorized access to enterprise resources.
  ### Blind Spots and Assumptions
  This rule may not fire if an adversary uses alternate methods to access LSASS or employs tools that do not rely on creating a remote thread from PowerShell processes. Additionally, if PowerShell's logging is disabled or if the environment lacks Sysmon logging configuration, detection may fail. Further, the rule assumes that the PowerShell process is being monitored and can distinguish between benign and malicious actions based solely on the target process.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
