title: Remote Thread Creation By Uncommon Source Image
id: 66d31e5f-52d6-40a4-9615-002d3789a119
related:
- id: 02d1d718-dd13-41af-989d-ea85c7fab93f
  type: derived
status: experimental
description: Detects uncommon processes creating remote threads.
references:
- Personal research, statistical analysis
- https://lolbas-project.github.io
author: Perez Diego (@darkquassar), oscd.community
date: 2019-10-27
modified: 2024-07-15
tags:
- attack.privilege-escalation
- attack.defense-evasion
- attack.t1055
logsource:
  product: windows
  category: create_remote_thread
detection:
  selection:
    SourceImage|endswith:
    - '\explorer.exe'
    - '\iexplore.exe'
    - '\msiexec.exe'
    - '\powerpnt.exe'
    - '\schtasks.exe'
    - '\winlogon.exe'
  filter_main_winlogon_1:
    SourceImage: 'C:\Windows\System32\winlogon.exe'
    TargetImage:
    - 'C:\Windows\System32\services.exe'         # happens on Windows 7
    - 'C:\Windows\System32\wininit.exe'         # happens on Windows 7
    - 'C:\Windows\System32\csrss.exe'         # multiple OS
    - 'C:\Windows\System32\LogonUI.exe'         # multiple OS
  filter_main_winlogon_2:
    SourceImage: 'C:\Windows\System32\winlogon.exe'
    TargetParentProcessId: 4
  filter_main_schtasks_conhost:
    SourceImage:
    - 'C:\Windows\System32\schtasks.exe'
    - 'C:\Windows\SysWOW64\schtasks.exe'
    TargetImage: 'C:\Windows\System32\conhost.exe'
  filter_main_explorer:
    SourceImage: 'C:\Windows\explorer.exe'
    TargetImage|startswith:
    - 'C:\Program Files (x86)\'
    - 'C:\Program Files\'
    - 'C:\Windows\System32\'
    - 'C:\Windows\SysWOW64\'
  filter_main_system:
    TargetImage: 'System'
  filter_main_msiexec:
        # Note: MSI installers will trigger this
    SourceImage|endswith: '\msiexec.exe'
    TargetImage|contains:
    - '\AppData\Local\'
    - 'C:\Program Files (x86)\'
    - 'C:\Program Files\'
  filter_optional_aurora_smartconsole1:
    SourceImage: 'C:\Program Files\internet explorer\iexplore.exe'
    SourceCommandLine|contains|all:
    - 'https://'
    - '.checkpoint.com/documents/'
    - 'SmartConsole_OLH/'
    - 'default.htm#cshid='
  filter_optional_aurora_smartconsole2:
    SourceImage: 'C:\Program Files\internet explorer\iexplore.exe'
    SourceParentImage|startswith:
    - 'C:\Program Files\'
    - 'C:\Program Files (x86)\'
    SourceParentImage|contains|all:
    - '\CheckPoint\SmartConsole\'
    - '\SmartConsole.exe'
  filter_optional_powerpnt:
        # Raised by the following issue: https://github.com/SigmaHQ/sigma/issues/2479
    SourceImage|contains: '\Microsoft Office\'
    SourceImage|endswith: '\POWERPNT.EXE'
    TargetImage: 'C:\Windows\System32\csrss.exe'
  filter_main_null:
    TargetImage:
  filter_main_empty:
    TargetImage: ''
  condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- This rule is best put in testing first in order to create a baseline that reflects
  the data in your environment.
level: medium
notes: |
  ### Technical Context
  The Sigma rule "Remote Thread Creation By Uncommon Source Image" is designed to identify suspicious activity in Windows systems where uncommon processes initiate remote thread creation. This behavior is often associated with privilege escalation tactics as defined in the MITRE ATT&CK framework under the tactic of Privilege Escalation and technique T1055. The rule analyzes telemetry data primarily from the `create_remote_thread` logs generated by Sysmon, looking for instances where certain well-known applications (such as `explorer.exe`, `iexplore.exe`, `msiexec.exe`, etc.) are the source of unusual thread creation activity targeting critical system images or processes. For instance, if `winlogon.exe` is detected creating threads in `csrss.exe` or `services.exe`, it could indicate malicious behavior since such activity is typically not expected from these benign user-level applications.
  The rule also incorporates specific filtering conditions to reduce false positives, ensuring that only unusual and potentially harmful actions are flagged. By examining command-line parameters and the calling parent process, the rule enhances its detection capabilities for uncommon and potentially malicious behaviors that could bypass standard defenses.
  ### Investigation Steps
  - **Check EDR Alerts**: Review any alerts generated by your EDR solution related to remote thread creation at the time of the trigger, and analyze associated processes and command-line parameters for anomalies.
  - **Examine Windows Event Logs**: Investigate the relevant Windows Event Logs, especially the System and Security logs, to determine if thereâ€™s a corresponding event that provides additional context around the time of the alert.
  - **Correlate with Network Traffic**: Utilize NDR logs to monitor any unusual outbound or internal network connections made by the processes involved at the time of the thread creation, which could indicate C2 (Command and Control) activity.
  - **Analyze Process Histories**: Use Sysinternals or other process analysis tools to review the execution history and parent-child relationships of the involved processes to understand their lifecycle and legitimacy.
  ### Prioritization
  This alert is classified as medium severity due to the potential for privilege escalation and execution of arbitrary code by potentially malicious processes, which could compromise system integrity and security.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where legitimate applications have been misconfigured or where non-standard applications mimic benign behavior which can be otherwise expected to create remote threads. Additionally, if an adversary utilizes a whitelisted process with valid signatures (such as a patched or modified version of a common application), this rule might not detect the malicious activity since the detection heavily relies on the known behavior of common executables. Furthermore, environments with low Sysmon logging configurations may miss critical events leading to false negative scenarios.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
