title: Suspicious Get-ADDBAccount Usage
id: b140afd9-474b-4072-958e-2ebb435abd68
status: test
description: Detects suspicious invocation of the Get-ADDBAccount script that reads
  from a ntds.dit file and may be used to get access to credentials without using
  any credential dumpers
references:
- https://www.n00py.io/2022/03/manipulating-user-passwords-without-mimikatz/
- https://github.com/MichaelGrafnetter/DSInternals/blob/7ba59c12ee9a1cb430d7dc186a3366842dd612c8/Documentation/PowerShell/Get-ADDBAccount.md
author: Florian Roth (Nextron Systems)
date: 2022-03-16
tags:
- attack.credential-access
- attack.t1003.003
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection:
    Payload|contains|all:
    - 'Get-ADDBAccount'
    - 'BootKey '
    - 'DatabasePath '
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The "Suspicious Get-ADDBAccount Usage" detection rule monitors for the invocation of the PowerShell command `Get-ADDBAccount`, which interacts with the Windows NTDS (NT Directory Services) database file, `ntds.dit`. This script can be manipulated to access user credentials without relying on conventional credential dumping tools such as Mimikatz. Specifically, the rule looks for a combination of command strings that include `Get-ADDBAccount`, `BootKey`, and `DatabasePath`, which may indicate an attempt to leverage sensitive credential information stored in the NTDS database.
  This detection stands under the MITRE ATT&CK framework tactic of Credential Access and the technique T1003.003. By monitoring the execution of this command and specific parameter patterns, security teams can identify and respond to potential unauthorized access attempts to sensitive credentials within an enterprise environment.
  ### Investigation Steps
  - **Check EDR Logs:** Review the EDR logs for any unusual execution of the `Get-ADDBAccount` command, focusing on the user context under which it was run and the timing of execution.
  - **Correlate with Security Events:** Examine Windows Security event logs to identify related account login attempts or changes that occurred around the same time as the suspicious command execution.
  - **Analyze PowerShell Command Line:** Scrutinize the command line parameters associated with the identified PowerShell execution for any additional suspicious options that could indicate potential misuse.
  - **Inspect Network Connections:** Analyze related network connections from the affected host to determine if there were any unusual outbound connections made that coincide with the suspicious command execution.
  ### Prioritization
  Given the potential for this rule to indicate an attempt to access sensitive user credentials, it is classified as high severity. Immediate investigation is warranted to understand the context and intent of the command execution within the environment.
  ### Blind Spots and Assumptions
  This detection rule may not fire in environments with PowerShell logging disabled or when commands are executed in a manner that obfuscates the command line (e.g., via scripts or encoded commands). Additionally, if attackers utilize native functions or different tools outside of PowerShell to achieve similar objectives, this rule may not detect such activity. It is assumed that the environment is configured to capture relevant PowerShell execution events to ensure effective monitoring.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and clarity, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
