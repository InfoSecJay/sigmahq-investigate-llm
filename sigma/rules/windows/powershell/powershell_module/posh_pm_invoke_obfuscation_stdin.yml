title: Invoke-Obfuscation STDIN+ Launcher - PowerShell Module
id: 9ac8b09b-45de-4a07-9da1-0de8c09304a3
related:
- id: 779c8c12-0eb1-11eb-adc1-0242ac120002
  type: derived
status: test
description: Detects Obfuscated use of stdin to execute PowerShell
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task 25)
author: Jonathan Cheong, oscd.community
date: 2020-10-15
modified: 2024-04-05
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_4103:
    Payload|re: 'cmd.{0,5}(?:/c|/r).+powershell.+(?:\$\{?input\}?|noexit).+"'
  condition: selection_4103
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The "Invoke-Obfuscation STDIN+ Launcher" detection rule is designed to identify potentially malicious PowerShell activity that employs obfuscation techniques to execute commands through standard input (stdin). This rule specifically looks for patterns in PowerShell command invocations where the command uses regex to match specific command line parameters that are characteristic of obfuscated execution, especially those utilizing `/c` or `/r` flags with PowerShell commands and special variables like `${input}`. The telemetry sources involved in this detection include PowerShell logs, particularly focusing on process creation logs or command-line parameters that reveal how commands are executed. This rule is aligned with the MITRE ATT&CK techniques T1027 (Obfuscated Files or Information) and T1059.001 (PowerShell).
  ### Investigation Steps
  - **Check PowerShell Invocation:** Look for the specific PowerShell command executed associated with the alert. Check the execution context and arguments used, specifically focusing on obfuscation patterns in command lines.
  - **Review Command History:** Access the Windows Event Logs to view the PowerShell command history and identify unusual usage patterns or attempts at using obfuscation.
  - **Analyze Related Processes:** Use an EDR solution to investigate any related processes spawned at the same time as the alert, noting any sequential or child processes that may indicate lateral movement or further payload execution.
  - **Correlate with Network Activity:** Examine network logs (or proxy logs) for any outbound connections initiated shortly after the alert occurs. Look for anomalous destinations or data exfiltration attempts that correlate with the timeline of the alert.
  ### Prioritization
  This alert is classified as high severity due to the potential for obfuscated PowerShell commands to be used in exploitation phases of a cybersecurity incident. The use of obfuscation often signifies an effort to evade detection mechanisms, highlighting the possibility of compromise.
  ### Blind Spots and Assumptions
  This rule may not fire if the obfuscated command does not follow the expected patterns captured in the regex, or if the PowerShell invocation does not originate from the standard PowerShell binary. Additionally, some legitimate application behaviors might also trigger false positives if they utilize similar command structures. Analysts should be aware that adversaries might modify their tactics to avoid detection, such as employing different obfuscation techniques or using various encoding methods that this rule may not capture.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
