title: Invoke-Obfuscation Via Stdin - PowerShell Module
id: c72aca44-8d52-45ad-8f81-f96c4d3c755e
related:
- id: 86b896ba-ffa1-4fea-83e3-ee28a4c915c7
  type: derived
status: test
description: Detects Obfuscated Powershell via Stdin in Scripts
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task28)
author: Nikita Nazarov, oscd.community
date: 2020-10-12
modified: 2024-04-05
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_4103:
    Payload|re: '(?i)(set).*&&\s?set.*(environment|invoke|\$?\{?input).*&&.*"'
  condition: selection_4103
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "Invoke-Obfuscation Via Stdin 
  - PowerShell Module" is designed to detect instances of obfuscated PowerShell scripts that utilize standard input (stdin) for execution. Specifically, it looks for patterns where the `set` command is combined with commands that manipulate environment variables or execute other commands via obfuscated methods. This type of activity usually indicates an attempt by adversaries to evade detection mechanisms by hiding malicious activity within seemingly benign commands. The primary data source leveraged by this rule is Windows PowerShell's command execution logs, which can be collected through Sysmon or other logging mechanisms that track PowerShell execution. The relevant MITRE ATT&CK tactics involved are **Defense Evasion (T1027)** and **Execution (T1059.001)**, highlighting the rule's significance in identifying potentially malicious PowerShell usage within the enterprise environment.
  ### Investigation Steps
  - **Review PowerShell Logs:** Check the execution logs of PowerShell for any script executions around the time of the alert. Focus on identifying the command-line arguments and script content for signs of obfuscation or unintended execution.
    
  - **Correlate with Sysmon Data:** Utilize Sysmon logs to trace the processes spawned by PowerShell. Investigate the parent processes to assess if legitimate applications initiated the potentially malicious PowerShell command.
  - **Cross-Reference with EDR Tools:** Use EDR solutions to analyze behavior related to the detected PowerShell activity. Look for any alerts, anomalies, or suspicious patterns associated with the same system or user account.
  - **Assess Network Activity:** If applicable, check network logs and firewall rules for any unusual outbound connections or data transfers that correlate with the PowerShell execution timestamps.
  ### Prioritization
  Given the high severity level of this alert when fired, it indicates a significant risk of a potential breach or malware execution. The obfuscation techniques used in such scripts often suggest deliberate attempts to bypass security controls, necessitating immediate investigation.
  ### Blind Spots and Assumptions
  This rule may not fire if the obfuscation techniques employed are not recognized by the regular expression used in the detection (e.g., alternate encoding schemes or more sophisticated obfuscation). Additionally, if PowerShell logging is not adequately configured or if Sysmon is not installed, the relevant data may be missing. Adversaries may also use legitimate scripts or tools in tandem with obfuscation, further complicating detection efforts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
