title: Zip A Folder With PowerShell For Staging In Temp  - PowerShell Module
id: daf7eb81-35fd-410d-9d7a-657837e602bb # PowerShell Module
related:
- id: 71ff406e-b633-4989-96ec-bc49d825a412     # PowerShell Classic
  type: similar
- id: b7a3c9a3-09ea-4934-8864-6a32cacd98d9     # PowerShell Script
  type: similar
- id: 85a8e5ba-bd03-4bfb-bbfa-a4409a8f8b98     # Process Creation
  type: similar
status: test
description: |
  Detects PowerShell scripts that make use of the "Compress-Archive" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.
  An adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1074.001/T1074.001.md
- https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a
author: Nasreddine Bencherchali (Nextron Systems), frack113
date: 2021-07-20
modified: 2023-12-18
tags:
- attack.collection
- attack.t1074.001
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection:
    ContextInfo|contains|all:
    - 'Compress-Archive -Path*-DestinationPath $env:TEMP'
    - 'Compress-Archive -Path*-DestinationPath*\AppData\Local\Temp\'
    - 'Compress-Archive -Path*-DestinationPath*:\Windows\Temp\'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This detection rule identifies the use of the PowerShell `Compress-Archive` cmdlet in contexts where output files are directed to temporary or suspicious locations, specifically within system and user temporary directories (like `%TEMP%` or `C:\Windows\Temp`). The primary goal is to uncover instances where an adversary may be compressing sensitive data (e.g., files or documents) in preparation for exfiltration. Such actions indicate a potential data collection and exfiltration tactic identified as **T1074.001 
  - Data Staged**, according to the MITRE ATT&CK framework. The rule relies on telemetry captured from Windows PowerShell logs and looks for command invocations that involve specific parameters indicative of suspicious behavior.
  ### Investigation Steps
  - **Check PowerShell Logs:** Review the Windows PowerShell event logs for additional context regarding the execution of the `Compress-Archive` cmdlet, including user IDs and timestamps to understand the attacker's movements.
    
  - **Correlate with EDR Data:** Use Endpoint Detection and Response (EDR) tools to investigate any network connections or file access patterns that occurred around the time of the ZIP file creation, which may reveal lateral movement or exfiltration attempts.
  - **Analyze Temporary Files:** Investigate the contents of the specified temporary folders, looking for recently created or modified ZIP files and cross-reference them with known sensitive data types to assess the risk of data compromise.
  - **Review User Activity:** Conduct user behavior analysis on the account that executed the cmdlet to ensure the activity aligns with standard practices and check for any signs of compromised credentials.
  ### Prioritization
  This alert has been assigned a medium severity level due to the potential implications of sensitive data being compressed and possibly exfiltrated by adversaries. In an enterprise environment, such actions can signify a precursor to larger data breaches.
  ### Blind spots and Assumptions
  - This rule may not trigger if `Compress-Archive` is used in a legitimate context by trusted users or applications. Adversaries may employ obfuscation techniques or run PowerShell scripts from different directories that are not monitored.
  - The detection is limited to the PowerShell cmdlet itself and may fail to identify similar activities performed through alternative means or those that target files outside specified temporary folders.
  - The effectiveness of this rule assumes that PowerShell logging is properly configured and that telemetry for PowerShell process creation events is being captured accurately.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and completeness, we recommend validating the content and adapting it to suit specific environments and operational needs. Please communicate any changes to the detection engineering team.
