title: Bad Opsec Powershell Code Artifacts
id: 8d31a8ce-46b5-4dd6-bdc3-680931f1db86
related:
- id: 73e733cc-1ace-3212-a107-ff2523cc9fc3
  type: derived
status: test
description: |
  focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including
  Cobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads
  that often undergo minimal changes by attackers due to bad opsec.
references:
- https://newtonpaul.com/analysing-fileless-malware-cobalt-strike-beacon/
- https://labs.sentinelone.com/top-tier-russian-organized-cybercrime-group-unveils-fileless-stealthy-powertrick-backdoor-for-high-value-targets/
- https://www.mdeditor.tw/pl/pgRt
author: 'ok @securonix invrep_de, oscd.community'
date: 2020-10-09
modified: 2022-12-25
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_4103:
    Payload|contains:
    - '$DoIt'
    - 'harmj0y'
    - 'mattifestation'
    - '_RastaMouse'
    - 'tifkin_'
    - '0xdeadbeef'
  condition: selection_4103
falsepositives:
- 'Moderate-to-low; Despite the shorter length/lower entropy for some of these, because
  of high specificity, fp appears to be fairly limited in many environments.'
level: critical
notes: |
  ### Technical Context
  This detection rule identifies potentially malicious PowerShell code artifacts that are frequently associated with various offensive payloads, such as Cobalt Strike Beacon and Empire, among others. These artifacts often exhibit identifiable characteristics, including specific keywords or phrases, which can indicate bad operational security practices (opsec) by the attackers. The rule utilizes process creation logs from PowerShell modules, focusing on the content of the payload executed, looking for specific strings that are commonly found in malicious scripts. By flagging these known artifacts, the rule helps security teams detect potential compromises leveraging these standard attack methods.
  ### Investigation Steps
  - Review the process creation logs in the EDR for instances of PowerShell execution, paying special attention to command-line arguments and the context in which they were run.
  - Check the AV logs to see if any flagged files or signatures were triggered at the time of the PowerShell script execution, which may provide indicators of known malware.
  - Analyze network traffic through the NDR to identify any communication patterns consistent with command and control activity that could align with the malicious PowerShell executions detected.
  - Examine any relevant cloud logs, particularly in environments like AWS or Azure, for unusual access patterns or API calls that coincide with the timing of the PowerShell alerts.
