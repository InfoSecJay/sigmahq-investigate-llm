title: Alternate PowerShell Hosts - PowerShell Module
id: 64e8e417-c19a-475a-8d19-98ea705394cc
status: test
description: Detects alternate PowerShell hosts potentially bypassing detections looking
  for powershell.exe
references:
- https://threathunterplaybook.com/hunts/windows/190610-PwshAlternateHosts/notebook.html
author: Roberto Rodriguez @Cyb3rWard0g
date: 2019-08-11
modified: 2022-12-13
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection:
    ContextInfo|contains: '*'
  filter_powershell:
        # This filter covers the following use cases
        #   - When powershell is called directly from commandline via keyword powershell or powershell.exe
        #   - Or called via path but not with full "".exe". Example: C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell
    ContextInfo|contains:
    - '= powershell'         # Host Application=...powershell.exe or Application hote=...powershell.exe in French Win10 event
    - '= C:\Windows\System32\WindowsPowerShell\v1.0\powershell'
    - '= C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell'
            # In some cases powershell was invoked with inverted slashes
    - '= C:/Windows/System32/WindowsPowerShell/v1.0/powershell'
    - '= C:/Windows/SysWOW64/WindowsPowerShell/v1.0/powershell'
  filter_sdiagnhost:
    ContextInfo|contains: '= C:\WINDOWS\System32\sdiagnhost.exe -Embedding'     # When MSDT is launched for example
  filter_citrix:
    ContextInfo|contains: 'ConfigSyncRun.exe'
  filter_adace:    # Active Directory Administrative Center Enhancements
    ContextInfo|contains: 'C:\Windows\system32\dsac.exe'
  filter_winrm:
    ContextInfo|contains: 'C:\Windows\system32\wsmprovhost.exe -Embedding'
  filter_help_update:
    Payload|contains:
    - 'Update-Help'
    - 'Failed to update Help for the module'
  condition: selection and not 1 of filter_*
falsepositives:
- Programs using PowerShell directly without invocation of a dedicated interpreter
- MSP Detection Searcher
- Citrix ConfigSync.ps1
level: medium
notes: |
  n
  ### Technical Context
  The Sigma rule titled "Alternate PowerShell Hosts 
  - PowerShell Module" is designed to detect instances where PowerShell might be executed through alternate hosts, potentially evading traditional PowerShell logging mechanisms that predominantly track the `powershell.exe` process. This detection utilizes Windows event logs that capture command execution context via the `ContextInfo` field, looking for evidence of PowerShell being invoked indirectly through various applications. Specifically, it examines command-line parameters that may indicate an attempt to leverage other executables or administrative tools capable of calling PowerShell, such as `sdiagnhost.exe`, `dsac.exe`, and `wsmprovhost.exe`. This corresponds to the MITRE ATT&CK tactic of execution, particularly the technique T1059.001, which addresses command and scripting interpreter usage. By identifying these alternate invocation methods, the rule assists in recognizing potential attempts at stealthy execution of malicious scripts or commands.
  ### Investigation Steps
  - **Review Alert Details:** Examine the alert generated by the detection for any specific command-line parameters or context that triggered the rule. This information is crucial in determining the nature of the PowerShell invocation and identifying any associated malicious behavior.
  - **Analyze EDR Logs:** Utilize EDR tools to trace the process lineage and context of the execution. Look for unusual parent-child relationships, particularly those involving the alternate executables specified in the detection, which may reveal how PowerShell was invoked.
  - **Check Windows Event Logs:** Gather relevant logs from Windows Security, Application, and Sysmon to gain further insights into the timeline and nature of the invocation. Pay special attention to any logs surrounding the execution time to identify potential indicators of compromise.
  - **Assess Network Connections:** Investigate network connections established around the time of the alert. Use NDR logs to analyze whether any anomalous outbound communications were made that could indicate command and control (C2) activity or data exfiltration associated with the PowerShell execution.
  ### Prioritization
  This alert is classified as medium severity due to the potential for stealthy execution of malicious scripts using alternate PowerShell hosts, which often indicates a more sophisticated adversary attempting to evade detection. Maintaining vigilance for such activities is critical in preventing further exploitation.
  ### Blind spots and Assumptions
  The rule presumes that all PowerShell activity would pass through the defined conditions, which may not account for newer or more exotic methods of invoking PowerShell outside of the specified contexts. Additionally, legitimate administrative activity or software that utilizes PowerShell directly is recognized as false positives; thus, this detection may miss cases where adversaries use refined tactics to disguise their actions. Itâ€™s also important to note that any variance in the logging configurations or missing telemetry from related components may hinder detection efforts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
