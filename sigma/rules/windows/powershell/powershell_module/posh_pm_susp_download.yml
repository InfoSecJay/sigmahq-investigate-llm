title: Suspicious PowerShell Download - PoshModule
id: de41232e-12e8-49fa-86bc-c05c7e722df9
related:
- id: 65531a81-a694-4e31-ae04-f8ba5bc33759
  type: derived
status: test
description: Detects suspicious PowerShell download command
references:
- https://learn.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadfile?view=net-8.0
- https://learn.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadstring?view=net-8.0
author: Florian Roth (Nextron Systems)
date: 2017-03-05
modified: 2023-01-20
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_webclient_:
    ContextInfo|contains: 'System.Net.WebClient'
  selection_function:
    ContextInfo|contains:
    - '.DownloadFile('
    - '.DownloadString('
  condition: all of selection_*
falsepositives:
- PowerShell scripts that download content from the Internet
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect suspicious PowerShell commands that utilize the `System.Net.WebClient` class to download malicious files or strings from the internet. The rule specifically looks for the invocation of the `.DownloadFile` or `.DownloadString` methods, which are frequently used by adversaries for payload delivery. By monitoring Windows PowerShell events, particularly those related to the usage of the WebClient class, security analysts can identify potentially nefarious activities associated with file downloads. This detection strategy aligns with the MITRE ATT&CK framework, specifically under the “Execution” tactic and the "Command-Line Interface" technique (T1059.001), as it targets behavior that is likely to invoke a command-line interface to execute scripts or commands.
  The primary data source for this detection is PowerShell telemetry, which provides insight into the commands being executed within the PowerShell environment, allowing for an assessment of potentially harmful actions. It is vital for incident responders to be aware that while the detection is useful, legitimate PowerShell scripts that download necessary content may generate false positives and should be reviewed in that context.
  ### Investigation Steps
  - **Check PowerShell Logs:** Review the PowerShell logs within your EDR to identify the specific command invoked and any associated parameters to determine the legitimacy of the download action.
  - **Context Gathering:** Utilize the Security Event Logs to correlate the time and user context around the execution of the PowerShell command to identify potential patterns or previous alerts.
  - **Network Traffic Analysis:** Analyze network traffic logs (from NDR or NGFW) during the same time frame to inspect any suspicious outbound connections that align with the detected download events.
  - **File Scanning:** After identifying the downloaded file, perform a scan using the AV to check for known malware signatures and determine if the file poses a security threat.
  ### Prioritization
  This alert is considered to have a medium severity level due to the potential risk involved with script-based downloads that could result in malware deployment. Organizations should prioritize these alerts as they could indicate initial stages of an attack but also account for legitimate administrative activities.
  ### Blind Spots and Assumptions
  The rule may not fire in scenarios where PowerShell logging is disabled or misconfigured, as well as in environments where legitimate scripts are frequently used to download files without triggering alerts. Additionally, this detection could be bypassed by adversaries if they obfuscate their commands or use other methods of downloading that do not involve the `WebClient` class, such as using `Invoke-WebRequest` or other alternative libraries. It is assumed that all PowerShell logging features are operational and that the environment has sufficient telemetry collection capabilities.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
