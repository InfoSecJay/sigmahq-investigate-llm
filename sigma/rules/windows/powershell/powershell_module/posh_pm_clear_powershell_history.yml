title: Clear PowerShell History - PowerShell Module
id: f99276ad-d122-4989-a09a-d00904a5f9d2
related:
- id: dfba4ce1-e0ea-495f-986e-97140f31af2d
  type: derived
status: test
description: Detects keywords that could indicate clearing PowerShell history
references:
- https://gist.github.com/hook-s3c/7363a856c3cdbadeb71085147f042c1a
author: Ilyas Ochkov, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community
date: 2019-10-25
modified: 2022-12-02
tags:
- attack.defense-evasion
- attack.t1070.003
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_1a_payload:
    Payload|contains:
    - 'del'
    - 'Remove-Item'
    - 'rm'
  selection_1b_payload:
    Payload|contains: '(Get-PSReadlineOption).HistorySavePath'
  selection_payload_2:
    Payload|contains|all:
    - 'Set-PSReadlineOption'
    - '–HistorySaveStyle'          # not sure if the homoglyph –/- is intended, just checking for both
    - 'SaveNothing'
  selection_payload_3:
    Payload|contains|all:
    - 'Set-PSReadlineOption'
    - '-HistorySaveStyle'
    - 'SaveNothing'
  condition: 1 of selection_payload_* or all of selection_1*
falsepositives:
- Legitimate PowerShell scripts
level: medium
notes: |
  ### Technical Context
  This detection rule is designed to identify attempts to clear PowerShell command history, which can be indicative of malicious activity as attackers often seek to obfuscate their actions. The rule specifically scans for specific keywords and command strings frequently associated with removing or altering PowerShell history such as "del", "Remove-Item", and the various "Set-PSReadlineOption" commands that modify the history save pathway and style. The technical data sources leveraged for this rule include PowerShell module logs that capture command-line inputs and outputs, allowing the detection of potentially nefarious commands in a clear and concise manner.
  The rule also maps to the MITRE ATT&CK tactic of "Defense Evasion" and specifically the technique T1070.003, which focuses on obfuscating system activity. By being aware of common PowerShell commands utilized in this context, incident responders can better recognize patterns that suggest an attacker is actively attempting to erase traces of their actions.
  ### Investigation Steps
  - **Review PowerShell Logs:** Search the PowerShell module logs for occurrences of the defined keywords and their parameters. Pay close attention to the context of execution to determine whether these commands were run in an unusual user session.
    
  - **Examine User Activity:** Use EDR solutions to correlate the identified commands with the originating user. Look for anomalies in user behavior around the time the PowerShell commands were executed to assess whether it aligns with normal operational patterns.
  - **Inspect Associated Processes:** Investigate any processes initiated around the same timestamp as the suspicious PowerShell commands using system event logs. Check for unusual parent-child process relationships that may indicate automated scripts or malicious activity.
  - **Analyze Event Correlation:** Cross-reference the PowerShell logs with other telemetry data like endpoint protection logs and network traffic to gather a comprehensive view of the incident, which may provide insights into the scope and nature of the potential breach.
  ### Prioritization
  This alert is considered medium severity as clearing PowerShell history is a common tactic used by threat actors to evade detection. While it does not confirm malicious intent by itself, it warrants further examination to ensure that it is not part of a broader security compromise.
  ### Blind Spots and Assumptions
  The rule may not fire in environments where PowerShell logging is not enabled, or if legitimate use cases are frequently altering PowerShell history. Malicious actors may also use obfuscation techniques or custom scripts to bypass detection, thereby limiting the rule’s effectiveness. Additionally, variations in PowerShell syntax or newer commands not included in the detection logic could lead to missed alerts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
