title: Clear PowerShell History - PowerShell Module
id: f99276ad-d122-4989-a09a-d00904a5f9d2
related:
- id: dfba4ce1-e0ea-495f-986e-97140f31af2d
  type: derived
status: test
description: Detects keywords that could indicate clearing PowerShell history
references:
- https://gist.github.com/hook-s3c/7363a856c3cdbadeb71085147f042c1a
author: Ilyas Ochkov, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community
date: 2019-10-25
modified: 2022-12-02
tags:
- attack.defense-evasion
- attack.t1070.003
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_1a_payload:
    Payload|contains:
    - 'del'
    - 'Remove-Item'
    - 'rm'
  selection_1b_payload:
    Payload|contains: '(Get-PSReadlineOption).HistorySavePath'
  selection_payload_2:
    Payload|contains|all:
    - 'Set-PSReadlineOption'
    - '–HistorySaveStyle'          # not sure if the homoglyph –/- is intended, just checking for both
    - 'SaveNothing'
  selection_payload_3:
    Payload|contains|all:
    - 'Set-PSReadlineOption'
    - '-HistorySaveStyle'
    - 'SaveNothing'
  condition: 1 of selection_payload_* or all of selection_1*
falsepositives:
- Legitimate PowerShell scripts
level: medium
notes: |
  ### Technical Context  
  This Sigma rule is designed to detect potential attempts at clearing PowerShell history within Windows environments. It identifies specific commands and payload patterns that suggest a user or script is actively trying to erase their command history. Key indicators include common PowerShell cmdlets like `Remove-Item`, which can delete files, or `Set-PSReadlineOption` with arguments such as `–HistorySaveStyle SaveNothing`, indicating an intention to prevent history from being saved. The rule efficiently monitors PowerShell command execution logs, focusing on the `ps_module` log source to capture command-line parameters and payloads associated with these activities. By flagging these suspicious behaviors, security teams can investigate possible defense evasion tactics employed by malicious actors.
  ### Investigation Steps  
  - Review EDR logs to identify the user accounts and processes associated with the flagged PowerShell commands to determine if they align with known active sessions or authorized activities.  
  - Correlate the findings with network logs from the NGFW or Proxy to see if these PowerShell commands were executed in conjunction with any suspicious outbound connections.  
  - Examine the context in which these commands were run, including the command-line arguments used, by diving into the relevant process creation logs for additional details.  
  - Assess the system and user configuration settings to verify if legitimate PowerShell usage patterns or scheduled tasks could have triggered these detections, thereby identifying potential false positives.
