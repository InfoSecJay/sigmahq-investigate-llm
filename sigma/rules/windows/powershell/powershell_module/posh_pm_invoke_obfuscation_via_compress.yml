title: Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell Module
id: 7034cbbb-cc55-4dc2-8dad-36c0b942e8f1
related:
- id: 20e5497e-331c-4cd5-8d36-935f6e2a9a07
  type: derived
status: test
description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task 19)
author: Timur Zinniatullin, oscd.community
date: 2020-10-18
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_4103:
    Payload|contains|all:
    - 'new-object'
    - 'text.encoding]::ascii'
    Payload|contains:
    - 'system.io.compression.deflatestream'
    - 'system.io.streamreader'
    Payload|endswith: 'readtoend'
  condition: selection_4103
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule detects potentially malicious use of the `Invoke-Obfuscation` PowerShell module, specifically focusing on the `COMPRESS OBFUSCATION` capabilities. It flags instances where PowerShell scripts contain obfuscated commands that utilize the `new-object`, `system.io.compression.deflatestream`, and `system.io.streamreader` functions, specifically when they end with 'readtoend'. The detection is based on logs generated by PowerShell module activity within Windows environments, which may indicate attempts to evade detection by employing obfuscation techniques. Responders should be aware that such scripts are often used by threat actors to execute payloads stealthily.
  ### Investigation Steps
  - Review PowerShell logs within the EDR to identify the context of the script execution, including the user and machine involved.
  - Analyze command-line parameters associated with the PowerShell process to verify the presence of obfuscation techniques or additional suspicious commands.
  - Check the logs of any security products (e.g., AV, NGFW) that may have flagged or blocked malicious activities from this particular PowerShell module.
  - Investigate surrounding network activity in the NDR to determine if there were any outbound connections made during the obfuscated script execution that could indicate data exfiltration or command and control (C2) communication.
