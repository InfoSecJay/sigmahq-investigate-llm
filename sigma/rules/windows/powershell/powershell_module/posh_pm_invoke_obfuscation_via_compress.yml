title: Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell Module
id: 7034cbbb-cc55-4dc2-8dad-36c0b942e8f1
related:
- id: 20e5497e-331c-4cd5-8d36-935f6e2a9a07
  type: derived
status: test
description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task 19)
author: Timur Zinniatullin, oscd.community
date: 2020-10-18
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_4103:
    Payload|contains|all:
    - 'new-object'
    - 'text.encoding]::ascii'
    Payload|contains:
    - 'system.io.compression.deflatestream'
    - 'system.io.streamreader'
    Payload|endswith: 'readtoend'
  condition: selection_4103
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This detection rule targets the invocation of obfuscated PowerShell code using the COMPRESS OBFUSCATION technique, a common method employed by threat actors to evade detection. The rule looks for specific patterns in the PowerShell payload, specifically the use of `new-object`, `text.encoding]::ascii`, and the .NET classes `system.io.compression.deflatestream` and `system.io.streamreader`. These patterns indicate that the PowerShell script is attempting to read and decompress data, likely to conceal malicious actions or payloads.
  To implement this detection, the rule utilizes Windows PowerShell module logging, capturing the details of commands executed within the PowerShell environment. By reflecting on attackers' tactics as outlined in the MITRE ATT&CK framework, specifically under Tactic ID `TA0005 (Defense Evasion)` and Techniques `T1027 (Obfuscated Files or Information)` and `T1059.001 (Command and Scripting Interpreter: PowerShell)`, the rule is crafted to identify and alert on potentially malicious obfuscation patterns.
  ### Investigation Steps
  - **Review PowerShell Logs:** Utilize Windows Event Logs to examine PowerShell command execution, focusing on the commands that triggered the alert to understand the execution context and any preceding activity.
  - **Analyze Process Creation Events:** Use EDR tools to review associated process creation logs, identifying if any suspicious parent-child relationships exist that could indicate malicious activity.
  - **Inspect Network Connections:** Analyze any network traffic generated around the time of the alert using Network Detection and Response (NDR) tools. Look for unusual outbound connections to external destinations that are atypical for the affected system.
  - **Evaluate File Access and Modifications:** Check file system logs for any changes or creations of files correlating with the PowerShell execution. This can provide insight into the presence of any potentially malicious payloads written to disk.
  ### Prioritization
  The alert is classified with a medium severity level as it indicates potential evasion techniques that could be part of a larger attack. This warrants prompt investigation, as successful obfuscation can signify an imminent threat or ongoing compromise.
  ### Blind Spots and Assumptions
  One critical limitation of this rule is that it may not capture all instances of obfuscation, especially if the malicious actor uses custom or alternative obfuscation methods not represented in the specified patterns. Additionally, environments with strict PowerShell execution policies may prevent such scripts from executing, potentially resulting in missed detections. It's also essential to recognize the possibility of legitimate scripts triggering false positives due to the use of similar coding patterns in day-to-day operations. Thus, analysts must be vigilant in correlating alerts with the wider context of system behavior and user activities.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
