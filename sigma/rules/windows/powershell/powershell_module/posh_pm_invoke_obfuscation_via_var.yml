title: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - PowerShell Module
id: f3c89218-8c3d-4ba9-9974-f1d8e6a1b4a6
related:
- id: e54f5149-6ba3-49cf-b153-070d24679126
  type: derived
status: test
description: Detects Obfuscated Powershell via VAR++ LAUNCHER
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task27)
author: Timur Zinniatullin, oscd.community
date: 2020-10-13
modified: 2024-04-05
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_4103:
    Payload|re: '(?i)&&set.*(\{\d\}){2,}\\"\s+?-f.*&&.*cmd.*/c'     # FPs with |\/r
  condition: selection_4103
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule identifies the use of the VAR++ Launcher PowerShell module, which is commonly associated with obfuscation techniques in PowerShell scripts. By analyzing the payload of PowerShell command executions, the rule searches for specific patterns indicative of obfuscation, such as sequences that contain the "set" command followed by obfuscated elements (e.g., `{n}`). The data sources involved primarily include PowerShell execution logs, which capture detailed information about the commands run in a Windows environment. This aligns with the MITRE ATT&CK tactics, particularly focusing on **Defense Evasion** (T1027) and **Execution** (T1059.001).
  ### Investigation Steps
  - **Search for Correlating Events:** Review PowerShell execution logs in your EDR tool for events that triggered the alert. Cross-reference these with other logs (e.g., Sysmon process creation logs) for additional context about process parentage.
    
  - **Analyze Command Line Arguments:** Examine the command line arguments passed with the powershell.exe process to determine the nature of the executed script and whether any suspicious flags or obfuscated parameters were used.
  - **Review Recent Changes in Environment:** Look into any recent modifications to group policies, scripts, or user permissions that could facilitate the execution of obfuscated commands.
  - **Network Activity Assessment:** Check for outbound connections from the host in question, particularly DNS queries and other network connections that may link back to known malicious domains or IPs.
  ### Prioritization
  The alert is classified as high severity due to the potential for sophisticated evasion techniques being utilized to launch malicious attacks within the enterprise, indicating a serious threat to the security posture.
  ### Blind spots and Assumptions
  This rule may not fire if an adversary utilizes fully custom obfuscation techniques not captured by the defined regex, or if PowerShell logging is not enabled. Additionally, assumptions include that the proper telemetry is being collected from all endpoints; if some logs are missing, it might lead to undetected malicious activity. Furthermore, the rule heavily relies on common PowerShell patterns, so innovative obfuscation methods may bypass detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
