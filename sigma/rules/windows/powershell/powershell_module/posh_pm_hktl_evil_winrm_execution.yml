title: HackTool - Evil-WinRm Execution - PowerShell Module
id: 9fe55ea2-4cd6-4491-8a54-dd6871651b51
status: test
description: |
  Detects the execution of Evil-WinRM via PowerShell Module logs by leveraging the hardcoded strings inside the utility.
references:
- https://github.com/Hackplayers/evil-winrm/blob/7514b055d67ec19836e95c05bd63e7cc47c4c2aa/evil-winrm.rb
- https://github.com/search?q=repo%3AHackplayers%2Fevil-winrm++shell.run%28&type=code
author: Nasreddine Bencherchali (Nextron Systems)
date: 2024-02-25
tags:
- attack.lateral-movement
logsource:
  product: windows
  category: ps_module
detection:
  selection_wsm:
    ContextInfo|contains:
    - ':\Windows\System32\wsmprovhost.exe'
    - ':\Windows\SysWOW64\wsmprovhost.exe'
  selection_payload_1:
    Payload|contains:
    - value="(get-location).path         # https://github.com/Hackplayers/evil-winrm/blob/7514b055d67ec19836e95c05bd63e7cc47c4c2aa/evil-winrm.rb#L592
    - value="(get-item*).length         # https://github.com/Hackplayers/evil-winrm/blob/7514b055d67ec19836e95c05bd63e7cc47c4c2aa/evil-winrm.rb#L490
    - 'Invoke-Binary '         # https://github.com/Hackplayers/evil-winrm/blob/7514b055d67ec19836e95c05bd63e7cc47c4c2aa/evil-winrm.rb#L740
    - Donut-Loader -process_id*-donutfile         # https://github.com/Hackplayers/evil-winrm/blob/7514b055d67ec19836e95c05bd63e7cc47c4c2aa/evil-winrm.rb#L761
    - Bypass-4MSI
    - IEX 
      ([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($a))).replace('???','')
  selection_payload_2:
    Payload|contains|all:
    - $servicios = Get-ItemProperty "registry::HKLM\System\CurrentControlSet\Services\"
    - Where-Object {$_.imagepath -notmatch "system" -and $_.imagepath -ne $null }
      | Select-Object pschildname,imagepath
  selection_payload_3:
    Payload|contains|all:
    - $a +=  \"$($_.FullName.Replace('\\','/'))/\"}else{  $a += \"$($_.FullName.Replace('\\',
      '/'))\" }                                                                                                 # https://github.com/Hackplayers/evil-winrm/blob/7514b055d67ec19836e95c05bd63e7cc47c4c2aa/evil-winrm.rb#L1001
    - $a=@();$
  condition: selection_wsm and 1 of selection_payload_*
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule is designed to identify the execution of the Evil-WinRM tool, a known Windows remote management exploitation method often used for lateral movement within a network. The rule leverages specific PowerShell module logs, particularly looking for predefined hardcoded strings in the execution payload that are indicative of Evil-WinRM's functionality. The detection focuses on the use of Windows Management Instrumentation (WMI) along with certain PowerShell commands that include suspicious context strings associated with the `wsmprovhost.exe` process. The data sources leveraged include PowerShell logs, which capture the command-line parameters and execution context of PowerShell activities. This rule corresponds to the MITRE ATT&CK tactic of lateral movement, specifically the technique T1021.001 (Remote Services: Remote Desktop Protocol).
  ### Investigation Steps
  - **Analyze PowerShell Logs**: Use PowerShell logs to trace any instances of the execution of Evil-WinRM commands and review the context information that led to the invocation of these potentially malicious scripts.
  - **Correlate with Process Creation Logs**: Examine process creation logs for any instances of `wsmprovhost.exe` running in conjunction with the detected PowerShell commands to establish whether unauthorized access attempts were made.
  - **Investigate Network Connections**: Utilize your EDR or NDR tools to check if there were any outgoing connections to unusual or unauthorized IP addresses that coincide with the detected activity.
  - **Review User Account Activities**: Investigate the behavior of the user accounts associated with the alerts to determine if they exhibit patterns consistent with credential theft or lateral movement.
  ### Prioritization
  The alert is classified as high severity due to the significant risks posed by lateral movement tools like Evil-WinRM, which can lead to extensive network compromise if left unchecked.
  ### Blind Spots and Assumptions
  The rule may not fire if the PowerShell logging level is not adequately configured to capture all necessary executions, or if an adversary utilizes obfuscation techniques to disguise their command patterns. Additionally, if the Evil-WinRM tool is executed in an environment without adequate logging capabilities, it may evade detection. Engineers should be aware of the need for comprehensive logging and monitoring across all network layers to enhance detection effectiveness.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
