title: Invoke-Obfuscation VAR+ Launcher - PowerShell Module
id: 6bfb8fa7-b2e7-4f6c-8d9d-824e5d06ea9e
related:
- id: 0adfbc14-0ed1-11eb-adc1-0242ac120002
  type: derived
status: test
description: Detects Obfuscated use of Environment Variables to execute PowerShell
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task 24)
author: Jonathan Cheong, oscd.community
date: 2020-10-15
modified: 2024-04-05
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_4103:
    Payload|re: 'cmd.{0,5}(?:/c|/r)(?:\s|)"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\"\s+?-f(?:.*\)){1,}.*"'
  condition: selection_4103
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The "Invoke-Obfuscation VAR+ Launcher" detection rule is designed to identify the obfuscated execution of PowerShell commands that use environment variables. This technique is commonly utilized by adversaries to evade detection mechanisms, making use of PowerShell's powerful capabilities while hiding the true intent of their execution through complex string manipulations. The rule parses PowerShell logs to look for command patterns that match specific regex patterns, indicating that environment variables are being set and executed in potentially malicious ways. The key technical data sources involved in this detection include PowerShell command execution logs, specifically targeting script executions captured in Sysmon's telemetry. This rule relates to the MITRE ATT&CK tactics of Defense Evasion (T1027) and Execution (T1059.001), highlighting the methods attackers might employ to disguise their activities during the execution of malicious payloads.
  ### Investigation Steps
  - **Check EDR Logs**: Review EDR logs for associated process creation events that are tied to PowerShell scripts executed around the same time as the alert to identify potential malicious activity.
  - **Analyze PowerShell Logs**: Examine the PowerShell logs for additional details on the commands executed, focusing on the parameters that leverage environment variables to gather context on the execution.
  - **Inspect Network Connections**: Utilize network detection tools to trace any outbound connections initiated by the PowerShell process, looking for communications to suspicious or unauthorized endpoints.
  - **Review User Context**: Investigate the user account that executed the PowerShell command to determine if there has been any unauthorized access or unusual activity surrounding that account.
  ### Prioritization
  When this alert is triggered, the severity is considered high due to the potential use of obfuscated PowerShell scripts that may be indicative of active compromise attempts or malicious activity, which warrants immediate investigation.
  ### Blind Spots and Assumptions
  This rule relies heavily on accurate recording of PowerShell activity and the capability to detect obfuscated commands. It may not trigger if the adversary employs techniques that obfuscate PowerShell beyond the established patterns or if logging is disabled for PowerShell. Additionally, false negatives might occur if the environment uses legitimate obfuscation techniques that resemble adversarial behavior.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
