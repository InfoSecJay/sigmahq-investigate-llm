title: PowerShell Decompress Commands
id: 1ddc1472-8e52-4f7d-9f11-eab14fc171f5
related:
- id: 81fbdce6-ee49-485a-908d-1a728c5dcb09
  type: derived
status: test
description: A General detection for specific decompress commands in PowerShell logs.
  This could be an adversary decompressing files.
references:
- https://github.com/OTRF/detection-hackathon-apt29/issues/8
- https://github.com/OTRF/ThreatHunter-Playbook/blob/2d4257f630f4c9770f78d0c1df059f891ffc3fec/docs/evals/apt29/detections/4.A.3_09F29912-8E93-461E-9E89-3F06F6763383.md
author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
date: 2020-05-02
modified: 2022-12-25
tags:
- attack.defense-evasion
- attack.t1140
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_4103:
    Payload|contains: 'Expand-Archive'
  condition: selection_4103
falsepositives:
- Unknown
level: informational
notes: |
  n
  ### Technical Context
  The PowerShell Decompress Commands detection rule aims to identify the use of decompression commands within PowerShell that can indicate potential adversary behavior, such as decompressing malicious payloads or archives. Specifically, this rule is focused on the usage of the `Expand-Archive` command, which is commonly employed to extract files from ZIP archives. The detection utilizes Windows PowerShell logs, particularly looking for command invocations that indicate the execution of the `Expand-Archive` command line. This aligns with the MITRE ATT&CK framework's Defense Evasion tactic (technique T1140), where attackers may utilize decompression techniques to obfuscate their actions and hide malicious content within legitimate-looking archives.
  ### Investigation Steps
  - **Check PowerShell Execution Logs**: Investigate PowerShell logs for the instance of `Expand-Archive` usage to identify when and how this command was executed.
  - **Review Process Creation Events**: Analyze Windows Event Logs specifically for process creation events around the same timeframe as the PowerShell commands to detect any associated potentially malicious processes.
  - **Correlate with Network Traffic**: Use EDR and NDR tools to examine network traffic associated with the host running PowerShell to determine if any unusual or unauthorized communications occurred post-decompression.
  - **Investigate File Changes**: Look into any newly created or modified files that may have resulted from the decompression process, scrutinizing them for malware or other malicious indicators.
  ### Prioritization
  This alert holds an informational severity level because while the use of `Expand-Archive` can indicate legitimate tasks, it may warrant further investigation in the context of other suspicious activities within the environment.
  ### Blind Spots and Assumptions
  The rule may not fire in instances where the decompression commands are executed using methods that bypass logging, or if logging levels are insufficient to capture PowerShell executions. Additionally, if an adversary uses alternative decompression utilities or scripts that do not trigger Windows PowerShell logs, this detection may fail to highlight those activities. It assumes that PowerShell script block logging is enabled and appropriately configured.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
