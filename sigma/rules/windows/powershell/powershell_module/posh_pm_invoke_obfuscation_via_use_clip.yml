title: Invoke-Obfuscation Via Use Clip - PowerShell Module
id: ebdf49d8-b89c-46c9-8fdf-2c308406f6bd
related:
- id: db92dd33-a3ad-49cf-8c2c-608c3e30ace0
  type: derived
status: test
description: Detects Obfuscated Powershell via use Clip.exe in Scripts
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task29)
author: Nikita Nazarov, oscd.community
date: 2020-10-09
modified: 2024-04-05
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_4103:
    Payload|re: '(?i)echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?)'
  condition: selection_4103
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This Sigma rule is designed to detect the use of the PowerShell module "Clip.exe" for executing obfuscated PowerShell commands, a common technique used by attackers to evade detection mechanisms. The rule specifically looks for command strings that utilize "echo" followed by "clip" in conjunction with the words "Clipboard" or "invoke," indicating an attempt to obfuscate the execution of PowerShell scripts. The main data sources monitored for this detection include PowerShell command execution logs from Sysmon, which capture process creation events and commands executed within PowerShell. The rule ties into the MITRE ATT&CK framework under the tactics of Defense Evasion (T1027) and Execution (T1059.001).
  ### Investigation Steps
  - **Check PowerShell Logs:** Review PowerShell logs in Sysmon for additional context around command invocations that include "clip" and associated execution patterns to ascertain suspicious behavior.
  - **Examine Process Details:** Use EDR tools to analyze the process tree of the parent PowerShell process, investigating any spawning processes that may have executed malicious scripts or commands to establish their legitimacy.
  - **Review Network Connections:** Check network activity (e.g., DNS queries or connections) initiated by the PowerShell process to identify potential data exfiltration or command and control communication that might correlate with the detected activity.
  - **Correlate with User Behavior:** Perform a review of the user account that executed the obfuscated command, ensuring that their access and behavior aligns with your organizationâ€™s typical operation patterns to identify any anomalies.
  ### Prioritization
  The alert is categorized as high severity because the use of obfuscation techniques typically indicates a potential attempt by an adversary to bypass security controls, which could lead to unauthorized access or data compromise if not promptly investigated and mitigated.
  ### Blind spots and Assumptions
  This rule may not fire in environments where PowerShell logging is not properly configured or if the use of Clip.exe is a legitimate practice within the organization. Additionally, sophisticated adversaries may modify command strings to avoid detection by this rule. It is also assumed that all relevant Sysmon logs are feeding into the monitoring system; any gaps in logging or delays in ingestion could result in missed detections, highlighting a need for comprehensive logging practices.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
