title: Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell Module
id: 2f211361-7dce-442d-b78a-c04039677378
related:
- id: 1b9dc62e-6e9e-42a3-8990-94d7a10007f7
  type: derived
status: test
description: Detects all variations of obfuscated powershell IEX invocation code generated
  by Invoke-Obfuscation framework from the code block cited in the reference section
  below
references:
- https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888
author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community
date: 2019-11-08
modified: 2022-12-31
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_module
  definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b
detection:
  selection_payload:
  - Payload|re: '\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\['
  - Payload|re: '\$ShellId\[\s*\d{1,3}\s*\]\s*\+\s*\$ShellId\['
  - Payload|re: '\$env:Public\[\s*\d{1,3}\s*\]\s*\+\s*\$env:Public\['
  - Payload|re: '\$env:ComSpec\[(\s*\d{1,3}\s*,){2}'
  - Payload|re: '\*mdr\*\W\s*\)\.Name'
  - Payload|re: '\$VerbosePreference\.ToString\('
  - Payload|re: '\[String\]\s*\$VerbosePreference'
  condition: selection_payload
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule targets PowerShell commands that utilize the Invoke-Obfuscation framework, which is commonly used by attackers to obfuscate their execution of scripts. The rule specifically looks for indicators of obfuscated `Invoke-Expression` (IEX) invocations by analyzing the patterns in PowerShell's command payloads. These patterns include, but are not limited to, the manipulation of environment variables and private PowerShell parameters, which can help conceal malicious intentions. By focusing on specific regular expressions that denote obfuscation styles, the rule captures a broad range of possible obfuscated command executions. Data sources involved in this detection include PowerShell module logs, which record script executions and their associated parameters.
  ### Investigation Steps
  - Utilize EDR tools to examine the endpoints for recent PowerShell execution history, focusing on commands matching the identified obfuscation patterns. 
  - Review logs from the SIEM or cloud logging services to identify any unusual or unauthorized PowerShell executions associated with the user accounts or systems involved.
  - Check network traffic logs through NDR and NGFW solutions for outbound connections related to the timestamps of potentially malicious PowerShell invocations, indicating possible data exfiltration.
  - Analyze any file creation or modification events in collaboration with AV solutions to identify artifacts or files created as a result of the obfuscated script executions.
