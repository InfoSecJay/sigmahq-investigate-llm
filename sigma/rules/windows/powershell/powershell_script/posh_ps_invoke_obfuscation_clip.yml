title: Invoke-Obfuscation CLIP+ Launcher - PowerShell
id: 73e67340-0d25-11eb-adc1-0242ac120002
status: test
description: Detects Obfuscated use of Clip.exe to execute PowerShell
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task 26)
author: Jonathan Cheong, oscd.community
date: 2020-10-13
modified: 2024-04-05
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_4104:
    ScriptBlockText|re: 'cmd.{0,5}(?:/c|/r).+clip(?:\.exe)?.{0,4}&&.+clipboard]::\(\s\\"\{\d\}.+-f.+"'
  condition: selection_4104
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule is designed to identify the obfuscated usage of `Clip.exe` via PowerShell, specifically when it is leveraged to execute commands that involve clipboard manipulation. The rule analyzes Windows PowerShell script block logging and seeks for specific patterns in the `ScriptBlockText` that indicate an attempt to execute `Clip.exe` with encoded or masked arguments, typically employed in adversarial tactics to evade detection. The key objective is to prevent misuse of the clipboard for executing harmful content, which aligns with the MITRE ATT&CK framework, specifically the techniques T1027 (Obfuscated Files or Information) and T1059.001 (PowerShell).
  The necessary data sources for this rule encompass Windows PowerShell logs that document script executions and the presented input parameters, enabling identification of unusual or potentially malicious command sequences. To effectively utilize this rule, organizations should ensure that Script Block Logging is activated, as this captures the relevant obfuscation patterns that the detection criteria are based upon.
  ### Investigation Steps
  - **Review PowerShell Logs:** Utilize your SIEM or EDR to filter PowerShell logs for entries that match the specified regex pattern associated with `Clip.exe`, paying special attention to the `ScriptBlockText` field for encoded commands.
  - **Analyze User Context:** Correlate the identified log entries with the user accounts involved to assess whether the actions were conducted by a legitimate user or if there is any suspicious activity tied to unusual user behavior.
  - **Check for Lateral Movement:** Investigate whether these obfuscated commands are part of a larger attack pattern by analyzing related network connections or other process interactions on the host via EDR tools.
  - **Examine Affected Systems:** Review the target systems for any file changes or process creations that may correlate with the execution of the `Clip.exe` commands, utilizing file integrity monitoring or endpoint detection capabilities.
  ### Prioritization
  Alerts raised by this detection rule should be treated with high severity due to the potential for advanced threats employing obfuscation techniques to bypass security measures and execute malicious payloads.
  ### Blind Spots and Assumptions
  This detection rule may not fire under certain conditions such as if script block logging is disabled, meaning that potentially malicious obfuscated commands would not be recorded. There are also assumptions that processes using `Clip.exe` are strictly malintent, while legitimate applications may utilize similar commands without causing harm. Additionally, adversaries may adopt different obfuscation techniques that do not match this ruleâ€™s regex, resulting in dropped alerts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
