title: Potential PowerShell Obfuscation Using Character Join
id: e8314f79-564d-4f79-bc13-fbc0bf2660d8
related:
- id: 96cd126d-f970-49c4-848a-da3a09f55c55
  type: derived
status: test
description: Detects specific techniques often seen used inside of PowerShell scripts
  to obfscuate Alias creation
references:
- Internal Research
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-09
tags:
- attack.defense-evasion
- attack.execution
- attack.t1027
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
        # Example:
        #   Set-Alias -Name Y -Value (-join("Ne","w-O","bje","ct"))
        #   Set-Alias -Name X -Value (-join("Inv","oke","-","Exp","ression"))
    ScriptBlockText|contains|all:
    - '-Alias'         # For both "New-Alias" and "Set-Alias"
    - ' -Value (-join('
  condition: selection
falsepositives:
- Unknown
level: low
notes: |
  ### Technical Context
  This detection rule is designed to identify potential malicious activity involving PowerShell scripts where obfuscation techniques are used, specifically through the utilization of the `-join` operator in script blocks. The rule focuses on monitoring PowerShell command executions that make use of the `Set-Alias` and `New-Alias` commands, which are often employed by attackers to obscure their intentions by manipulating alias creations with concatenated strings. When such script blocks include the keywords `-Alias` and `-Value (-join(`, it indicates an attempt to obscure command visibility, making detection necessary.
  The primary technical data source for this rule is derived from PowerShell script block logging on Windows systems. Therefore, to effectively use this rule, it is important to assure that script block logging is enabled. This will allow the Security Operations Center (SOC) to capture and analyze script executions that match the specified parameters for analysis and potential incident responses.
  ### Investigation Steps
  - Review the PowerShell execution logs in your EDR to identify the exact scripts and commands that triggered the alert. Look for additional context around the execution time and the user account involved.
  - Analyze the parent process of the PowerShell command in EDR logs to determine if it originated from a known, legitimate application or if it might have been spawned by an anomalous source.
  - Utilize SIEM tools to search for broader patterns or trends related to similar alerts within the same time frame, helping to correlate the behavior with any known incidents.
  - Inspect network traffic through NDR tools to check for any outbound connections made by the process executing the suspicious PowerShell commands to determine if data exfiltration or command and control behavior is occurring.
