title: Potential PowerShell Obfuscation Using Character Join
id: e8314f79-564d-4f79-bc13-fbc0bf2660d8
related:
- id: 96cd126d-f970-49c4-848a-da3a09f55c55
  type: derived
status: test
description: Detects specific techniques often seen used inside of PowerShell scripts
  to obfscuate Alias creation
references:
- Internal Research
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-09
tags:
- attack.defense-evasion
- attack.execution
- attack.t1027
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
        # Example:
        #   Set-Alias -Name Y -Value (-join("Ne","w-O","bje","ct"))
        #   Set-Alias -Name X -Value (-join("Inv","oke","-","Exp","ression"))
    ScriptBlockText|contains|all:
    - '-Alias'         # For both "New-Alias" and "Set-Alias"
    - ' -Value (-join('
  condition: selection
falsepositives:
- Unknown
level: low
notes: |
  ### Technical Context
  This detection rule monitors for PowerShell scripts that utilize character joining techniques to obfuscate alias creation, a common practice by adversaries to evade security mechanisms. Specifically, it looks for instances where the PowerShell commands `Set-Alias` or `New-Alias` are utilized in combination with the `-join` operator, which concatenates string segments in a manner that can obscure the true intentions of the script. The rule leverages telemetry data from Windows PowerShell Script Block Logging, which is essential for capturing and analyzing the commands executed in PowerShell sessions. By detecting these patterns, the alert aligns with the MITRE ATT&CK techniques T1027 (Obfuscated Files or Information) and T1059.001 (PowerShell), indicating potential attempts to execute malicious code that exploit PowerShell's versatility. 
  ### Investigation Steps
  - **Check Script Block Logs:** Review the captured PowerShell script block logs around the time of the alert to identify suspicious commands and any associated parameters. Pay special attention to other processes that may have executed PowerShell scripts.
  - **Analyze Process Creation Events:** Use EDR to investigate the parent processes that executed the potentially malicious PowerShell command. Look for unusual parent-child process relationships that may indicate exploitation or lateral movement.
  - **Review Network Connections:** Assess network activity correlated with the time of the alert using NDR tools. Investigate any outbound connections that may indicate communication with a command and control server or data exfiltration.
  - **Correlate with User Activities:** Examine other relevant logs (e.g., VPN, Proxy) for the user's behavior leading up to the alert. Determine if there was any unusual access to sensitive applications or systems that could provide additional context for the PowerShell usage.
  ### Prioritization
  This alert has a low severity level primarily because, while obfuscation techniques are often linked to malicious activities, they can also occur in legitimate administrative tasks. However, the presence of such techniques warrants scrutiny to rule out potential security incidents.
  ### Blind Spots and Assumptions
  This detection rule assumes that PowerShell Script Block Logging is enabled; if it is not, the rule will not trigger, potentially allowing harmful activity to remain undetected. Additionally, legitimate use of obfuscation by administrators may lead to false positives, highlighting the challenge in separating benign use cases from potential threats. Other techniques that circumvent script block logging or use different obfuscation methods may also evade detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
