title: Suspicious Get-ADReplAccount
id: 060c3ef1-fd0a-4091-bf46-e7d625f60b73
status: test
description: |
  The DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory.
  These include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.
references:
- https://www.powershellgallery.com/packages/DSInternals
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.006/T1003.006.md#atomic-test-2---run-dsinternals-get-adreplaccount
author: frack113
date: 2022-02-06
tags:
- attack.credential-access
- attack.t1003.006
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - Get-ADReplAccount
    - '-All '
    - '-Server '
  condition: selection
falsepositives:
- Legitimate PowerShell scripts
level: medium
notes: |
  ### Technical Context
  This Sigma detection rule focuses on the use of the DSInternals PowerShell module, specifically the `Get-ADReplAccount` command, which is associated with auditing critical components of Active Directory and Azure Active Directory. The rule is designed to identify potentially malicious activity by detecting whether this PowerShell command is being executed with specific parameters that may indicate an attempt to obtain replication account information or manipulate directory data. The primary data sources for this rule are PowerShell script block logs, which must be enabled in the environment for the detection to be effective. By monitoring for specific keywords associated with the command execution, the rule aims to identify potentially unauthorized access or credential harvesting attempts against Active Directory environments.
  ### Investigation Steps
  - Review the PowerShell script block logs for the execution of the `Get-ADReplAccount` command to identify the user and context in which it was invoked.
  - Cross-reference the userâ€™s permissions and roles to determine if the execution of this command was appropriate for their responsibilities within the organization.
  - Utilize endpoint detection and response (EDR) tools to gather additional context around the activity, such as process creation logs and command-line parameters used during the execution.
  - Analyze related network traffic and logs from the firewall or gateway to check for unusual outbound connections that may indicate secondary compromise following the command execution.
