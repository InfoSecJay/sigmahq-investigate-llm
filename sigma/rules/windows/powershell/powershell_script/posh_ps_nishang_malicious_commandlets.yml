title: Malicious Nishang PowerShell Commandlets
id: f772cee9-b7c2-4cb2-8f07-49870adc02e0
status: test
description: Detects Commandlet names and arguments from the Nishang exploitation
  framework
references:
- https://github.com/samratashok/nishang
author: Alec Costello
date: 2019-05-16
modified: 2023-01-16
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - 'Add-ConstrainedDelegationBackdoor'
            # - 'Add-Persistence' # Covered in 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6
            # - 'Add-RegBackdoor' # Covered in 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6
            # - 'Add-ScrnSaveBackdoor' # Covered in 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6
    - 'Copy-VSS'
    - 'Create-MultipleSessions'
    - 'DataToEncode'
    - 'DNS_TXT_Pwnage'
    - 'Do-Exfiltration-Dns'
    - 'Download_Execute'
    - 'Download-Execute-PS'
    - 'DownloadAndExtractFromRemoteRegistry'
    - 'DumpCerts'
    - 'DumpCreds'
    - 'DumpHashes'
    - 'Enable-DuplicateToken'
    - 'Enable-Duplication'
    - 'Execute-Command-MSSQL'
    - 'Execute-DNSTXT-Code'
    - 'Execute-OnTime'
    - 'ExetoText'
    - 'exfill'
    - 'ExfilOption'
    - 'FakeDC'
    - 'FireBuster'
    - 'FireListener'
    - 'Get-Information '         # Space at the end is required. Otherwise, we get FP with Get-InformationBarrierReportDetails or Get-InformationBarrierReportSummary
            # - 'Get-PassHashes' # Covered in 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6
    - 'Get-PassHints'
    - 'Get-Web-Credentials'
    - 'Get-WebCredentials'
    - 'Get-WLAN-Keys'
            # - 'Gupt-Backdoor' # Covered in 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6
    - 'HTTP-Backdoor'
            # - 'Invoke-ADSBackdoor' # Covered in 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6
    - 'Invoke-AmsiBypass'
    - 'Invoke-BruteForce'
    - 'Invoke-CredentialsPhish'
    - 'Invoke-Decode'
    - 'Invoke-Encode'
    - 'Invoke-Interceptor'
    - 'Invoke-JSRatRegsvr'
    - 'Invoke-JSRatRundll'
    - 'Invoke-MimikatzWDigestDowngrade'
    - 'Invoke-NetworkRelay'
            # - 'Invoke-PortScan' # Covered in 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6
            # - 'Invoke-PoshRatHttp' # Covered in 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6
    - 'Invoke-PowerShellIcmp'
    - 'Invoke-PowerShellUdp'
    - 'Invoke-Prasadhak'
    - 'Invoke-PSGcat'
    - 'Invoke-PsGcatAgent'
            # - 'Invoke-PsUACme' # Covered in 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6
    - 'Invoke-SessionGopher'
    - 'Invoke-SSIDExfil'
            # - Jitter  # Prone to FPs
            # - 'Keylogger' # Too generic to be linked to Nishang
    - 'LoggedKeys'
    - 'Nishang'
    - 'NotAllNameSpaces'         # This is param to "Set-RemoteWMI"
    - 'Out-CHM'
    - 'OUT-DNSTXT'
    - 'Out-HTA'
    - 'Out-RundllCommand'
    - 'Out-SCF'
    - 'Out-SCT'
    - 'Out-Shortcut'
    - 'Out-WebQuery'
    - 'Out-Word'
    - 'Parse_Keys'
    - 'Password-List'
    - 'Powerpreter'
    - 'Remove-Persistence'
    - 'Remove-PoshRat'
    - 'Remove-Update'
    - 'Run-EXEonRemote'
    - 'Set-DCShadowPermissions'
    - 'Set-RemotePSRemoting'
    - 'Set-RemoteWMI'
    - 'Shellcode32'
    - 'Shellcode64'
    - 'StringtoBase64'
    - 'TexttoExe'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The Sigma rule titled "Malicious Nishang PowerShell Commandlets" is designed to detect the execution of potentially malicious PowerShell commandlets associated with the Nishang exploitation framework. The rule focuses on identifying specific commandlet names and their associated arguments that are known to be used in various attack scenarios, including credential dumping, backdoor creation, and data exfiltration. Key data sources for this detection include PowerShell script block logging, which captures the contents of PowerShell code execution, and can be monitored through Windows Event Logs. When commandlets from Nishang such as `Add-ConstrainedDelegationBackdoor`, `DumpCreds`, and others are executed, they generate script block logs that this rule looks for to determine potential malicious behavior. The relevant MITRE ATT&CK tactics and techniques for this rule include **Execution** (T1059.001: Command and Scripting Interpreter: Windows PowerShell), as these commandlets are executed within a PowerShell context.
  ### Investigation Steps
  - **Review Script Block Logs:** Use EDR tools to review the PowerShell script block logs corresponding to the time of the alert to identify the complete context of the execution and any parameters passed.
  - **Validate the Execution Context:** Check the process creation logs in Windows Security logs to determine the user and system context under which the PowerShell commandlets were executed, assessing whether they align with expected usage patterns.
  - **Cross-Reference Network Activity:** Leverage network detection logs to identify any unusual outbound connections or data flows initiated by the system shortly after the execution of identified commandlets, which may indicate data exfiltration attempts.
  - **Analyze Additional Logs:** Examine supplementary logs such as Sysmon events for any related processes that may indicate lateral movement or further exploitation steps based on the identified commandlets, especially focusing on account changes and abnormal service activities.
  ### Prioritization
  The alert is classified as high severity due to the potential for significant harm. Nishang commandlets are designed for exploitation, backdoor installation, and credential theft, making immediate investigation essential to mitigate potential breaches or ongoing malicious activity.
  ### Blind Spots and Assumptions
  The effectiveness of this rule depends on having Script Block Logging enabled; if it is disabled, the rule may not trigger. Additionally, adversaries may use obfuscation techniques or variations of the commandlets to evade detection. There is also an assumption that PowerShell will be used legitimately; high volumes of legitimate PowerShell usage could result in a high number of false positives.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
