title: Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell
id: 1b9dc62e-6e9e-42a3-8990-94d7a10007f7
status: test
description: Detects all variations of obfuscated powershell IEX invocation code generated
  by Invoke-Obfuscation framework from the following code block \u2014
references:
- https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888
author: 'Daniel Bohannon (@Mandiant/@FireEye), oscd.community'
date: 2019-11-08
modified: 2022-12-31
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_iex:
  - ScriptBlockText|re: '\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\['
  - ScriptBlockText|re: '\$ShellId\[\s*\d{1,3}\s*\]\s*\+\s*\$ShellId\['
  - ScriptBlockText|re: '\$env:Public\[\s*\d{1,3}\s*\]\s*\+\s*\$env:Public\['
  - ScriptBlockText|re: '\$env:ComSpec\[(\s*\d{1,3}\s*,){2}'
  - ScriptBlockText|re: '\*mdr\*\W\s*\)\.Name'
  - ScriptBlockText|re: '\$VerbosePreference\.ToString\('
  condition: selection_iex
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule identifies obfuscated PowerShell `Invoke-Expression` (IEX) commands that have been generated using the Invoke-Obfuscation framework. The rule specifically looks for script blocks containing specific patterns that are indicative of obfuscation techniques, such as the manipulation of PowerShell variables and environment settings. For this to work effectively, Script Block Logging must be enabled, allowing the capture of PowerShell command execution and the text of the scripts being executed. This detection aligns with the MITRE ATT&CK tactics of "Defense Evasion" (T1027) and "Execution" (T1059.001), showcasing an adversary's attempts to hide their activities using obfuscation techniques.
  ### Investigation Steps
  - **Review PowerShell Logs:** Examine the PowerShell script block logs for the relevant event IDs that match the detected patterns of obfuscation. Look for the context of the execution to determine if it aligns with known malicious behavior.
  - **Correlate with EDR:** Utilize your Endpoint Detection and Response (EDR) tool to check the host's activity logs around the time of the alert. Investigate any unusual process creation, especially those involving PowerShell, to identify potential malicious executions.
  - **Network Analysis:** Use Network Detection and Response (NDR) tools to monitor any outbound connections initiated by the process. Obfuscated PowerShell commands may attempt to connect to external command-and-control servers or exfiltrate data.
  - **Examine Related User Activity:** Check for any associated user activity in Security logs, including logon events to see if there was a pattern of access prior to the alert, potentially indicating a compromised user account.
  ### Prioritization
  Due to the high severity level assigned to this rule, any alert triggered indicates a significant concern for possible active security threats utilizing obfuscation techniques to bypass security controls, which necessitates immediate investigation. 
  ### Blind spots and Assumptions
  This rule relies on the assumption that Script Block Logging is enabled, which may not be the case in all environments. Additionally, some legitimate administrative tasks or maintenance operations may trigger false positives if they use obfuscation. It may also not catch obfuscation tactics that do not use the patterns specified in the detection logic, leaving room for advanced adversarial methods to escape detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
