title: Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell
id: 1b9dc62e-6e9e-42a3-8990-94d7a10007f7
status: test
description: Detects all variations of obfuscated powershell IEX invocation code generated
  by Invoke-Obfuscation framework from the following code block \u2014
references:
- https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888
author: 'Daniel Bohannon (@Mandiant/@FireEye), oscd.community'
date: 2019-11-08
modified: 2022-12-31
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_iex:
  - ScriptBlockText|re: '\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\['
  - ScriptBlockText|re: '\$ShellId\[\s*\d{1,3}\s*\]\s*\+\s*\$ShellId\['
  - ScriptBlockText|re: '\$env:Public\[\s*\d{1,3}\s*\]\s*\+\s*\$env:Public\['
  - ScriptBlockText|re: '\$env:ComSpec\[(\s*\d{1,3}\s*,){2}'
  - ScriptBlockText|re: '\*mdr\*\W\s*\)\.Name'
  - ScriptBlockText|re: '\$VerbosePreference\.ToString\('
  condition: selection_iex
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule "Invoke-Obfuscation Obfuscated IEX Invocation 
  - PowerShell" is designed to detect and alert on obfuscated PowerShell commands that leverage the Invoke-Obfuscation framework, specifically focusing on the use of the `IEX` (Invoke-Expression) cmdlet. This detection works by analyzing script block logging, capturing script content executed in PowerShell environments. The rule identifies various obfuscation patterns commonly found in malicious scripts, including those that manipulate built-in variables and environment settings. By utilizing regular expressions to match specific characteristics of obfuscation, the rule provides insight into potential attacks aimed at evading security mechanisms and executing code stealthily.
  To enable effective detection, script block logging must be enabled on the Windows systems being monitored. This allows the SIEM or EDR tools to analyze the content of PowerShell scripts executed within the environment, facilitating the identification of suspicious activities indicative of malicious intent.
  ### Investigation Steps
  - Review the PowerShell script block logs through your EDR tool to identify any occurrences of obfuscated IEX commands that match the specified regex patterns. Pay special attention to the context of their execution.
  - Investigate the source of the PowerShell invocation by checking user activity logs and identifying any potentially unauthorized users or accounts initiating the scripts.
  - Cross-reference any identified obfuscated commands with threat intelligence sources to determine if they are known malicious indicators associated with recent attacks.
  - Examine firewall and proxy logs for any outbound connections made during the period of the detected obfuscated invocation to assess if data exfiltration or further malicious activities may have occurred.
