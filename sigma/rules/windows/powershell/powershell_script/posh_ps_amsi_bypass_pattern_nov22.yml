title: AMSI Bypass Pattern Assembly GetType
id: e0d6c087-2d1c-47fd-8799-3904103c5a98
status: test
description: Detects code fragments found in small and obfuscated AMSI bypass PowerShell
  scripts
references:
- https://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/
- https://twitter.com/cyb3rops/status/1588574518057979905?s=20&t=A7hh93ONM7ni1Rj1jO5OaA
author: Florian Roth (Nextron Systems)
date: 2022-11-09
tags:
- attack.defense-evasion
- attack.t1562.001
- attack.execution
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - '[Ref].Assembly.GetType'
    - 'SetValue($null,$true)'
    - 'NonPublic,Static'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect obfuscated PowerShell scripts that attempt to bypass the Antimalware Scan Interface (AMSI). Specifically, it looks for indicators of AMSI bypass techniques by scanning for key PowerShell commands and constructs within script blocks. The primary indicators include the use of '[Ref].Assembly.GetType' method, 'SetValue($null,$true)' invocation, and the 'NonPublic,Static' keywords, which are commonly leveraged by attackers to evade detection mechanisms. The rule relies on telemetry from Script Block Logging, a feature in PowerShell that must be enabled to capture script block data. This detection aligns with the MITRE ATT&CK framework under the tactics of Defense Evasion (T1562.001) and Execution, aiming to assist SOC analysts in identifying potentially malicious activity aimed at circumventing security protocols.
  ### Investigation Steps
  - **Verify Script Block Logging Status:** Check if Script Block Logging is enabled on the affected systems to ensure the relevant PowerShell activities are being recorded. This is crucial for accurate detection and analysis.
    
  - **Analyze Triggering Script Blocks:** Use EDR tools to review the specific PowerShell script blocks that triggered the alert. Focus on recent executions of scripts containing the detected patterns and assess their context.
  - **Check Network Connections:** Investigate any outbound network connections initiated by the PowerShell process during the time of the alert. This can help identify any malicious communication attempts, such as command and control (C2) communications.
  - **Correlate with Threat Intelligence:** Refer to threat intelligence feeds to check for known indicators of compromise (IOCs) related to PowerShell AMSI bypass techniques. This can provide additional context and help in understanding whether the detected activity aligns with known adversary behaviors.
  ### Prioritization
  This alert is classified as high severity due to the potential for significant security risks associated with successful AMSI bypass attempts. Such actions may indicate ongoing malicious activity aimed at executing payloads unnoticed, which requires immediate investigation and response.
  ### Blind Spots and Assumptions
  The primary assumption behind this rule is that Script Block Logging is actively enabled and configured correctly. If this feature is disabled or misconfigured, the rule may not fire as intended, allowing malicious activity to go undetected. Additionally, the rule might not capture every instance of AMSI bypass due to obfuscation techniques that do not utilize the specific methods outlined, highlighting the importance of comprehensive PowerShell logging and monitoring practices.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
