title: Dump Credentials from Windows Credential Manager With PowerShell
id: 99c49d9c-34ea-45f7-84a7-4751ae6b2cbc
status: test
description: |
  Adversaries may search for common password storage locations to obtain user credentials.
  Passwords are stored in several places on a system, depending on the operating system or application holding the credentials.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1555/T1555.md
author: frack113
date: 2021-12-20
modified: 2022-12-25
tags:
- attack.credential-access
- attack.t1555
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_kiddie:
    ScriptBlockText|contains:
    - 'Get-PasswordVaultCredentials'
    - 'Get-CredManCreds'
  selection_rename_Password:
    ScriptBlockText|contains|all:
    - 'New-Object'
    - 'Windows.Security.Credentials.PasswordVault'
  selection_rename_credman:
    ScriptBlockText|contains|all:
    - 'New-Object'
    - 'Microsoft.CSharp.CSharpCodeProvider'
    - '[System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())'
    - 'Collections.ArrayList'
    - 'System.CodeDom.Compiler.CompilerParameters'
  condition: 1 of selection_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potential credential dumping activities targeting the Windows Credential Manager using PowerShell scripts. Adversaries often utilize PowerShell cmdlets and .NET objects to access stored credentials, thereby enabling unauthorized access to sensitive information. The rule specifically identifies script block logging for PowerShell executions, looking for specific commands related to password vault credentials, such as `Get-PasswordVaultCredentials` and `Get-CredManCreds`. It also monitors for the creation of .NET objects that may hint at the retrieval of stored credentials from the Windows Credential Manager. The detection relies on the analysis of PowerShell script block logs, which need to be enabled to capture this behavior effectively.
  ### Investigation Steps
  - Review PowerShell script block logs in the EDR to analyze recent execution of PowerShell commands associated with credential access.
  - Investigate the process tree of the PowerShell instance to identify parent processes and any suspicious command-line parameters used during execution.
  - Collect and analyze the Windows Security and Application event logs to determine if there were any related authentication attempts or other unusual activities around the same timeframe.
  - Check for any related network activity in the Proxy or Firewall logs to see if the system in question communicated with external locations that could suggest data exfiltration following the credential dump.
