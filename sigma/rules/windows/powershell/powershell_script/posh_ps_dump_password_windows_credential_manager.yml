title: Dump Credentials from Windows Credential Manager With PowerShell
id: 99c49d9c-34ea-45f7-84a7-4751ae6b2cbc
status: test
description: |
  Adversaries may search for common password storage locations to obtain user credentials.
  Passwords are stored in several places on a system, depending on the operating system or application holding the credentials.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1555/T1555.md
author: frack113
date: 2021-12-20
modified: 2022-12-25
tags:
- attack.credential-access
- attack.t1555
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_kiddie:
    ScriptBlockText|contains:
    - 'Get-PasswordVaultCredentials'
    - 'Get-CredManCreds'
  selection_rename_Password:
    ScriptBlockText|contains|all:
    - 'New-Object'
    - 'Windows.Security.Credentials.PasswordVault'
  selection_rename_credman:
    ScriptBlockText|contains|all:
    - 'New-Object'
    - 'Microsoft.CSharp.CSharpCodeProvider'
    - '[System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())'
    - 'Collections.ArrayList'
    - 'System.CodeDom.Compiler.CompilerParameters'
  condition: 1 of selection_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule focuses on detecting potential credential dumping activities from the Windows Credential Manager using PowerShell. Adversaries often exploit the `Windows.Security.Credentials.PasswordVault` or utilize various PowerShell commands to access and extract user credentials from the system for malicious purposes. The rule looks for specific PowerShell script block content, such as the use of `Get-PasswordVaultCredentials` and `Get-CredManCreds`, which are indicative of attempts to directly access stored passwords. The detection relies on Windows PowerShell script block logging, which captures command executions and context that may indicate credential-access techniques, particularly aligned with the MITRE ATT&CK Tactic: Credential Access (Tactic ID: TA0006) and Technique: Credential Dumping (Technique ID: T1555).
  The log sources employed by this rule primarily include Windows Event Logs and specifically target script block logging from PowerShell. For this rule to trigger effectively, enterprises must ensure script block logging is enabled, allowing the capture of script contents as they execute. Such capabilities are crucial for detecting sophisticated attacks aimed at compromising credential information within an enterprise setting.
  ### Investigation Steps
  - **Review PowerShell Logs:** Check for any PowerShell script block logs that align with the detected actions in the alert. This can reveal the exact commands executed and provide context for the activity.
  - **Correlate with EDR Data:** Utilize Endpoint Detection and Response (EDR) tools to analyze the process tree and any parent processes associated with the PowerShell execution. This helps establish whether the invocation was part of a legitimate workflow or malicious intent.
  - **Examine Network Connections:** Investigate any associated network connections made by the PowerShell process. Look into DNS queries or external connections that could indicate data exfiltration or communications with known malicious IPs.
  - **Validate User Behavior:** Check the user account associated with the PowerShell execution for any anomalies or previous suspicious activity. This helps validate whether the actions align with normal user behavior or indicate potential compromise.
  ### Prioritization
  The severity level for this alert is set to medium as the detection relates to credential dumping, which poses a significant risk to the integrity and confidentiality of user accounts. Such incidents can lead to unauthorized access to sensitive systems and data within the enterprise.
  ### Blind Spots and Assumptions
  - **Potential False Negatives:** If script block logging is disabled or not properly configured, the rule may fail to detect actual credential dumping activities. Organizations should ensure this feature is always enabled to maintain visibility.
  - **Adversary Evasion Techniques:** Threat actors may use obfuscation or alternate methods to access credentials that do not trigger this rule, such as using conventional executable files, native command line utilities, or custom scripts not captured by the defined conditions.
  - **Tool Limitations:** The detection mechanism does rely on specific parameters within PowerShell scripts; therefore, modifications or usage of different command structures that do not match the detected strings will not result in an alert.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and suitability for operational needs, we recommend validating the content and adapting it to suit specific environments and operational requirements. Please communicate any changes to the detection engineering team.
