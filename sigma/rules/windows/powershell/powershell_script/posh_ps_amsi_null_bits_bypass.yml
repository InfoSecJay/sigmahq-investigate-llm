title: Potential AMSI Bypass Script Using NULL Bits
id: fa2559c8-1197-471d-9cdd-05a0273d4522
related:
- id: 92a974db-ab84-457f-9ec0-55db83d7a825
  type: similar
status: test
description: Detects usage of special strings/null bits in order to potentially bypass
  AMSI functionalities
references:
- https://github.com/r00t-3xp10it/hacking-material-books/blob/43cb1e1932c16ff1f58b755bc9ab6b096046853f/obfuscation/simple_obfuscation.md#amsi-bypass-using-null-bits-satoshi
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-04
modified: 2023-05-09
tags:
- attack.defense-evasion
- attack.t1562.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - "if(0){{{0}}}' -f $(0 -as [char]) +"
    - "#<NULL>"
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potential attempts at bypassing the Anti-Malware Scan Interface (AMSI) by identifying the usage of special strings or null bits in PowerShell scripts. By analyzing PowerShell script block logs—which are only generated if Script Block Logging is enabled—the rule looks for specific patterns in the script text. The detection is based on the presence of obfuscated constructs that may indicate an adversary is trying to exploit AMSI, particularly through null byte injection techniques used in the obfuscation of malicious content. This falls under the MITRE ATT&CK tactics of **Defense Evasion**, specifically the technique **T1562.001: Impair Defenses**. 
  ### Investigation Steps
  - **Review PowerShell Logs:** Check the PowerShell script block logs in the Windows Event Logs to find the specific script execution related to the alert. Look for additional context around when and how the script was executed.
    
  - **Analyze Process Creation Events:** Utilize EDR or Sysmon logs to correlate the script execution with process creation events. Identify any unusual parent-child relationships or execution of suspicious binaries.
  - **Inspect Related Network Activity:** Use network detection and response (NDR) tools to analyze outbound traffic associated with the script execution. Look for any connections to known malicious domains or unusual network behavior.
  - **Evaluate User Context:** Investigate the user account that executed the script to determine whether it has normal usage patterns. Check if the account has permissions that could facilitate further malicious actions.
  ### Prioritization
  The severity level is classified as medium because, while bypassing AMSI can indicate an attempt to execute malicious code, the presence of this detection does not necessarily confirm a compromise but warrants further investigation.
  ### Blind Spots and Assumptions
  There are recognized issues such as the possibility of false positives from benign scripts that might inadvertently include the same strings being detected. Additionally, if Script Block Logging is not enabled, the rule will not fire, which is a critical assumption that can be exploited by adversaries to bypass detection. Furthermore, attackers may use different obfuscation techniques or modify their scripts to avoid detection altogether, leading to potential gaps in the effectiveness of this detection rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
