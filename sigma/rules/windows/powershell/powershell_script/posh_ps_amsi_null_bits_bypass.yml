title: Potential AMSI Bypass Script Using NULL Bits
id: fa2559c8-1197-471d-9cdd-05a0273d4522
related:
- id: 92a974db-ab84-457f-9ec0-55db83d7a825
  type: similar
status: test
description: Detects usage of special strings/null bits in order to potentially bypass
  AMSI functionalities
references:
- https://github.com/r00t-3xp10it/hacking-material-books/blob/43cb1e1932c16ff1f58b755bc9ab6b096046853f/obfuscation/simple_obfuscation.md#amsi-bypass-using-null-bits-satoshi
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-04
modified: 2023-05-09
tags:
- attack.defense-evasion
- attack.t1562.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - "if(0){{{0}}}' -f $(0 -as [char]) +"
    - "#<NULL>"
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule aims to detect potential attempts to bypass the Antimalware Scan Interface (AMSI) through the use of obfuscation techniques involving NULL bits in PowerShell scripts. Specifically, the rule examines script block logs from Windows PowerShell, looking for specific patterns in the script block text that may indicate deliberate circumventing of AMSI's protective measures. The patterns of interest include constructs like "if(0){{{0}}}' -f $(0 -as [char]) +" and "#<NULL>". By identifying these sequences, the rule flags potentially malicious activity that can indicate the execution of obfuscated PowerShell scripts designed to evade detection.
  To effectively utilize this rule, organizations must ensure that Script Block Logging is enabled in their PowerShell settings. This enables a comprehensive logging of PowerShell script executions, providing critical data required for analysis when alerts are generated by this detection.
  ### Investigation Steps
  - Review the triggered alert within the SIEM and investigate the corresponding script block logs for additional context and details on the executed PowerShell command.
  - Utilize EDR tools to assess the behavior of the process that executed the script, focusing on indicators such as parent-child process relationships and any unusual process spawning.
  - Check the endpoints with AV and NDR solutions to identify any follow-on malicious activities, including attempted data exfiltration or network connections to suspicious IP addresses or domains.
  - Analyze user logs and Proxy logs to examine the activity of the user account associated with the alert, looking for other potentially suspicious actions in proximity to the execution of the flagged script.
