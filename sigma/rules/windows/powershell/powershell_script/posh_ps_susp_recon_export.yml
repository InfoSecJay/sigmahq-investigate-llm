title: Recon Information for Export with PowerShell
id: a9723fcc-881c-424c-8709-fd61442ab3c3
status: test
description: Once established within a system or network, an adversary may use automated
  techniques for collecting internal data
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1119/T1119.md
author: frack113
date: 2021-07-30
modified: 2022-12-25
tags:
- attack.collection
- attack.t1119
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_action:
    ScriptBlockText|contains:
    - 'Get-Service '
    - 'Get-ChildItem '
    - 'Get-Process '
  selection_redirect:
    ScriptBlockText|contains: '> $env:TEMP\'
  condition: all of selection*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Recon Information for Export with PowerShell" identifies potentially malicious activity within a Windows environment where an adversary leverages PowerShell scripts to collect sensitive internal data. This type of behavior is often indicative of reconnaissance activities as outlined in the MITRE ATT&CK framework under the **Collection (T1119)** technique. The rule specifically searches for PowerShell script blocks that contain commands geared toward data collection, such as `Get-Service`, `Get-ChildItem`, and `Get-Process`, that are also redirecting output to a temporary location in the system's environment. 
  The telemetry acquisition is focused on PowerShell script block logs, which require that Script Block Logging be enabled on the target systems. Capturing these logs provides visibility into the command and script execution, allowing detection of unusual data-gathering activities that may otherwise go unnoticed. By monitoring these command patterns, analysts can identify potential pre-exfiltration reconnaissance conducted by threat actors.
  ### Investigation Steps
  - **Review PowerShell Logs**: Check PowerShell script block logs in the environment to identify if the flagged script commands were executed and gather context around their execution, including the user and origination machine.
  - **Examine Process Explorer**: Utilize an EDR (Endpoint Detection and Response) tool to analyze processes spawned by PowerShell and assess their legitimacy by tracing back their parent processes.
  - **Inspect Environment System Variables**: Investigate the `$env:TEMP` directory for any newly created or modified files after the detection of these commands, which may indicate malicious output being redirected there.
  - **Correlate with Network Traffic**: Utilize the NDR (Network Detection and Response) tools to cross-reference the detected activities with any outbound network connections that may indicate exfiltration attempts related to the command execution.
  ### Prioritization
  The severity level is categorized as medium due to the likelihood of the activity indicating reconnaissance efforts by an adversary, which, if left unchecked, can lead to further exploitation or data exfiltration.
  ### Blind Spots and Assumptions
  This rule may not trigger if Script Block Logging is not enabled, which is a prerequisite for detection. Additionally, some benign administrative tasks might falsely match the conditions of the rule. Adversaries may also obfuscate their commands or use alternative methods to gather data, further complicating detection efforts. Engineers should be aware that sophisticated actors can bypass these detections by utilizing encrypted scripts or legitimate administrative tools with similar command patterns in an innocuous guise.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
