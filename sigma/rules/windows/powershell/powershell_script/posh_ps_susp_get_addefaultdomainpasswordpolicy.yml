title: Password Policy Discovery With Get-AdDefaultDomainPasswordPolicy
id: bbb9495b-58fc-4016-b9df-9a3a1b67ca82
status: test
description: Detetcts PowerShell activity in which Get-Addefaultdomainpasswordpolicy
  is used to get the default password policy for an Active Directory domain.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1201/T1201.md#atomic-test-9---enumerate-active-directory-password-policy-with-get-addefaultdomainpasswordpolicy
- https://learn.microsoft.com/en-us/powershell/module/activedirectory/get-addefaultdomainpasswordpolicy?view=windowsserver2022-ps
author: frack113
date: 2022-03-17
tags:
- attack.discovery
- attack.t1201
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains: Get-AdDefaultDomainPasswordPolicy
  condition: selection
falsepositives:
- Legitimate PowerShell scripts
level: low
notes: |
  n
  ### Technical Context
  This detection rule identifies PowerShell activities that utilize the `Get-AdDefaultDomainPasswordPolicy` cmdlet, which is used to query the default password policy settings of an Active Directory domain. The primary goal of this cmdlet, when executed by malicious actors, is to gather information that could be leveraged for further attacks. The rule specifically inspects PowerShell script block logs (which require that script block logging is enabled) to detect instances where this command is invoked, thereby highlighting potential reconnaissance efforts targeting password policies. This detection aligns with the MITRE ATT&CK technique T1201 (Password Policy Discovery) under the discovery tactic, indicating an attempt to enumerate sensitive information relevant to system security.
  ### Investigation Steps
  - **Review PowerShell Logs**: Utilize Windows Event Logs to inspect the relevant PowerShell activity surrounding the time of the alert. Pay particular attention to related Event IDs that may provide additional context or indications of abnormal behavior.
    
  - **Analyze Associated Processes**: Investigate any processes that executed the PowerShell command using EDR tools. Note any unusual parent-child process relationships or command-line parameters that can indicate malicious intent.
    
  - **Check User Context**: Determine the user account associated with the execution of the command. Verify if this account has legitimate reasons to query the password policy and if its behavior aligns with expected usage patterns.
    
  - **Correlate with Other Logs**: Examine logs from related systems (e.g., Active Directory, network devices) to search for any anomalous activity or correlated alerts that might suggest a larger campaign or additional steps taken by the attacker.
  ### Prioritization
  This alert is classified as low severity due to the nature of the command being a common PowerShell tool that can also be legitimately used by administrators. However, its presence should never be ignored, as it could indicate potential reconnaissance activity by an unauthorized or compromised account.
  ### Blind Spots and Assumptions
  This rule relies on the assumption that Script Block Logging is enabled; if it is not or if there are any gaps in logging, the activity may go undetected. Additionally, the rule may yield false positives from legitimate administrative scripts. Adversaries may also employ obfuscation techniques or other methods to bypass detection, potentially obscuring their activities from security monitoring systems.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
