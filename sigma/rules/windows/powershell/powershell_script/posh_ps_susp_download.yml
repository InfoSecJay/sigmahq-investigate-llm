title: Suspicious PowerShell Download - Powershell Script
id: 403c2cc0-7f6b-4925-9423-bfa573bed7eb
related:
- id: 65531a81-a694-4e31-ae04-f8ba5bc33759
  type: derived
status: test
description: Detects suspicious PowerShell download command
references:
- https://learn.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadstring?view=net-8.0
- https://learn.microsoft.com/en-us/dotnet/api/system.net.webclient.downloadfile?view=net-8.0
author: Florian Roth (Nextron Systems)
date: 2017-03-05
modified: 2022-12-02
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  webclient:
    ScriptBlockText|contains: 'System.Net.WebClient'
  download:
    ScriptBlockText|contains:
    - '.DownloadFile('
    - '.DownloadFileAsync('
    - '.DownloadString('
    - '.DownloadStringAsync('
  condition: webclient and download
falsepositives:
- PowerShell scripts that download content from the Internet
level: medium
notes: |
  ### Technical Context
  This detection rule identifies suspicious PowerShell commands that utilize the .NET `System.Net.WebClient` class for downloading files or strings from the internet. It looks for specific command patterns that include methods such as `.DownloadFile`, `.DownloadFileAsync`, `.DownloadString`, and `.DownloadStringAsync`. The rule leverages PowerShell Script Block Logging, which must be enabled on the monitored systems for effective detection. By correlating these command patterns with potential malicious activity, analysts can assess whether an unauthorized download attempt has occurred. The detection aligns with the MITRE ATT&CK tactic of execution, specifically technique T1059.001, targeting the use of PowerShell scripting.
  ### Investigation Steps
  - **Check Script Block Logging:** Verify that Script Block Logging is enabled on the endpoints generating alerts. This will ensure that all relevant PowerShell activity is captured.
  - **Analyze Process Creation:** Use EDR tools to examine the process creation logs related to the PowerShell execution. Look for unusual parent processes that may indicate a suspicious context.
  - **Review Downloaded Content:** If possible, assess the content that was downloaded through the identified PowerShell commands. This can help determine if the files or strings are malicious.
  - **Investigate Network Traffic:** Inspect network logs or firewall logs for outbound connections made by the PowerShell process. Check which URLs were accessed during the time of the alert.
  ### Prioritization
  The alert is considered medium severity due to the potential for malicious downloads that could lead to further exploitation. Prompt investigation is necessary to mitigate risks of data compromise or system infection.
  ### Blind Spots and Assumptions
  This rule relies on the assumption that Script Block Logging is correctly configured and enabled, which may not be the case in all environments. Additionally, it may not detect legitimate PowerShell usage by trusted applications that perform downloads as part of their functionality. An adversary could circumvent detection by using obfuscation techniques or running PowerShell within a different context that is not logged.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
