title: Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell
id: 20e5497e-331c-4cd5-8d36-935f6e2a9a07
status: test
description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task 19)
author: Timur Zinniatullin, oscd.community
date: 2020-10-18
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_4104:
    ScriptBlockText|contains|all:
    - 'new-object'
    - 'text.encoding]::ascii'
    ScriptBlockText|contains:
    - 'system.io.compression.deflatestream'
    - 'system.io.streamreader'
    ScriptBlockText|endswith: 'readtoend'
  condition: selection_4104
falsepositives:
- Unknown
level: medium
notes: |
  n
  ### Technical Context
  The Sigma rule titled "Invoke-Obfuscation COMPRESS OBFUSCATION 
  - PowerShell" is designed to detect attempts to obfuscate PowerShell scripts utilizing compression methods. The rule specifically looks for script blocks that include the creation of objects related to text encoding and stream reading, commonly used by attackers to mask their intentions while executing potentially harmful code. The rule focuses on identifying specific patterns found within the `ScriptBlockText` logs, including keywords like `new-object`, `text.encoding]::ascii`, along with components from the .NET framework that handle data compression. Implementing this detection requires that Script Block Logging in PowerShell is enabled to collect relevant telemetry. This rule corresponds with the MITRE ATT&CK technique T1027 (Obfuscated Files or Information) and T1059.001 (PowerShell).
  ### Investigation Steps
  - **Review PowerShell Logs:** Examine the Windows Event Logs related to PowerShell script execution for the identified script block, looking for additional context around the execution time and user accounts involved.
  - **Analyze Network Connections:** Utilize the EDR to investigate any outbound network connections initiated by the PowerShell process, especially connections to known command-and-control servers.
  - **Inspect File Access:** Leveraging the file monitoring capabilities, check for any downloaded or executed files during the time frame of the PowerShell invocation to determine if malicious behavior occurred.
  - **Evaluate Endpoint Behavior:** Use behavioral analysis tools within the EDR to assess whether any suspicious processes followed the PowerShell execution or if other anomalies were recorded on the endpoint.
  ### Prioritization
  This alert is assigned a medium severity level, as obfuscation techniques may suggest sophisticated adversarial tactics aimed at evading initial detection, warranting further investigation into potential compromise.
  ### Blind Spots and Assumptions
  The rule may not fire if PowerShell script block logging is not enabled, which is a prerequisite for capturing the necessary telemetry. Additionally, sophisticated attackers may deploy alternative obfuscation methods or utilize different encoding techniques that do not match the specified criteria. The effectiveness of this detection rule could also be compromised if legitimate scripts running similar patterns are common in the environment, leading to potential false positives.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
