title: Powershell Token Obfuscation - Powershell
id: f3a98ce4-6164-4dd4-867c-4d83de7eca51
related:
- id: deb9b646-a508-44ee-b7c9-d8965921c6b6
  type: similar
status: test
description: Detects TOKEN OBFUSCATION technique from Invoke-Obfuscation
references:
- https://github.com/danielbohannon/Invoke-Obfuscation
author: frack113
date: 2022-12-27
modified: 2023-03-24
tags:
- attack.defense-evasion
- attack.t1027.009
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
        # Examples:
        #   IN`V`o`Ke-eXp`ResSIOn (Ne`W-ob`ject Net.WebClient).DownloadString
        #   &('In'+'voke-Expressi'+'o'+'n') (.('New-Ob'+'jec'+'t') Net.WebClient).DownloadString
        #   &("{2}{3}{0}{4}{1}"-f 'e','Expression','I','nvok','-') (&("{0}{1}{2}"-f'N','ew-O','bject') Net.WebClient).DownloadString
  - ScriptBlockText|re: '\w+`(\w+|-|.)`[\w+|\s]'
        # - ScriptBlockText|re: '\((\'(\w|-|\.)+\'\+)+\'(\w|-|\.)+\'\)' TODO: fixme
  - ScriptBlockText|re: '"(\{\d\}){2,}"\s*-f'        # trigger on at least two placeholders. One might be used for legitimate string formatting
        #   ${e`Nv:pATh}
  - ScriptBlockText|re: '(?i)\$\{`?e`?n`?v`?:`?p`?a`?t`?h`?\}'
  filter_envpath:
    ScriptBlockText|contains: '${env:path}'     # TODO: Fix this. See https://github.com/SigmaHQ/sigma/pull/4964
  filter_chocolatey:
    ScriptBlockText|contains:
    - 'it will return true or false instead'          # Chocolatey install script https://github.com/chocolatey/chocolatey
    - 'The function also prevents `Get-ItemProperty` from failing'         # https://docs.chocolatey.org/en-us/create/functions/get-uninstallregistrykey
  filter_exchange:
    Path|startswith: 'C:\Program Files\Microsoft\Exchange Server\'
    Path|endswith: '\bin\servicecontrol.ps1'
    ScriptBlockText|contains: '`r`n'
  condition: selection and not 1 of filter_*
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The Sigma rule titled "Powershell Token Obfuscation" is designed to detect instances of obfuscation techniques commonly used in PowerShell scripts. Specifically, it targets the use of the Invoke-Obfuscation tool, which is employed by threat actors to conceal their malicious activities by manipulating script commands. The rule looks for specific patterns in the script block text, such as unusual character patterns and embedded script block text that employs placeholder-style formatting. The log sources for this detection are based on Windows PowerShell script logs, which require that Script Block Logging is enabled to capture the necessary command execution details. This detection is aligned with the MITRE ATT&CK framework, specifically under the tactic of "Defense Evasion" (TA0005) and technique "Obfuscated Files or Information" (T1027.009).
  ### Investigation Steps
  - **Check Script Block Logs**: Review recent PowerShell script block logs in your SIEM to identify the triggering events associated with the script sharing the obfuscation patterns noted in the rule.
  - **Analyze Related EDR Alerts**: Utilize EDR tools to search for any suspicious behavior from the processes identified in the logs, verifying any signs of malicious execution or lateral movement.
  - **Inspect Process Execution Context**: Investigate the origin of the PowerShell commands to determine if they were executed from a legitimate source or if they show signs of exploitation or compromise.
  - **Review Network Traffic**: Examine any related network connections over the time of the alert for unauthorized external communications, which may provide further context about the incident or malicious actors behind it.
  ### Prioritization
  Given the high severity level of this alert, it indicates a significant potential for adverse security impacts on the organization, especially if the obfuscated PowerShell scripts are indicative of evasion tactics employed by threat actors.
  ### Blind Spots and Assumptions
  This rule may not trigger under certain conditions, such as if Script Block Logging is not enabled or if the obfuscation techniques utilized do not match the patterns captured by this detection. Additionally, legitimate administrative activities that use similar obfuscation techniques could cause false positives. Incident responders should also be aware that advanced adversaries might create entirely new obfuscation methods that are not captured by the existing patterns within the rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and clarity, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
