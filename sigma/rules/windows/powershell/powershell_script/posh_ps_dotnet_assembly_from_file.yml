title: Potential In-Memory Execution Using Reflection.Assembly
id: ddcd88cb-7f62-4ce5-86f9-1704190feb0a
status: test
description: Detects usage of "Reflection.Assembly" load functions to dynamically
  load assemblies in memory
references:
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=50
author: frack113
date: 2022-12-25
tags:
- attack.defense-evasion
- attack.t1620
logsource:
  product: windows
  category: ps_script
  definition: Script Block Logging must be enable
detection:
  selection:
    ScriptBlockText|contains: '[Reflection.Assembly]::load'
  condition: selection
falsepositives:
- Legitimate use of the library
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the potential in-memory execution of malicious code through the use of PowerShell's `Reflection.Assembly` class, which enables dynamic loading of assemblies. The detection focuses on the invocation of `[Reflection.Assembly]::load` within PowerShell script blocks. By monitoring the invocation of these specific methods, the rule aims to identify an advanced evasion technique that attackers may use to run code without creating traditional executable files on disk, consequently bypassing common security controls. The primary technical data source involved in this detection is PowerShell script block logging, which captures the contents of PowerShell commands executed in the environment. This rule aligns with the MITRE ATT&CK technique T1620: "Reflective Code Loading," which pertains to defense evasion tactics employed by adversaries.
  ### Investigation Steps
  - **Review PowerShell Logs:** Examine PowerShell script block logs in your EDR solution for alerts matching the `[Reflection.Assembly]::load` command, checking the context of the execution and associated user accounts.
  - **Correlate with Process Creation Logs:** Investigate any related process creation logs around the time of the alert to identify the parent process and any child processes spawned as a result of the reflective assembly loading.
  - **Analyze Network Activity:** Review any outbound network connections in your NDR or SIEM platform that occurred shortly after the execution of the PowerShell command for any unusual communication with external hosts.
  - **Assess Related User Activity:** Look into the user activity around the same timeframe (e.g., logins, lateral movement) using security logs or user behavior analytics to determine if there are any suspicious patterns associated with the account(s) involved.
  ### Prioritization
  The severity of this alert is categorized as medium due to the potential risk of in-memory execution techniques being used for malicious purposes, which could indicate a sophisticated attack attempting to bypass standard file-based detection mechanisms.
  ### Blind Spots and Assumptions
  This rule may not fire if PowerShell script block logging is not enabled, as the telemetry required for detection is not available. Additionally, attackers may employ obfuscation techniques or varied method calls that do not utilize `Reflection.Assembly`, leading to missed detections. It is assumed that normal internal administrative scripting practices will generate legitimate alerts, so there might be an increased volume of false positives that require further filtering. 
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
