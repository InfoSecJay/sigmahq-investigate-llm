title: Add Windows Capability Via PowerShell Script
id: 155c7fd5-47b4-49b2-bbeb-eb4fab335429
related:
- id: b36d01a3-ddaf-4804-be18-18a6247adfcd
  type: similar
status: test
description: Detects usage of the "Add-WindowsCapability" cmdlet to add Windows capabilities.
  Notable capabilities could be "OpenSSH" and others.
references:
- https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=powershell
- https://www.virustotal.com/gui/file/af1c82237b6e5a3a7cdbad82cc498d298c67845d92971bada450023d1335e267/content
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-22
modified: 2023-05-09
tags:
- attack.execution
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_cmdlet:
    ScriptBlockText|contains: 'Add-WindowsCapability '
  selection_capa:
    ScriptBlockText|contains: '-Name OpenSSH.'     # For both "OpenSSH.Server" and "OpenSSH.Client"
  condition: all of selection_*
falsepositives:
- Legitimate usage of the capabilities by administrators or users. Add additional
  filters accordingly.
level: medium
notes: |
  ### Technical Context
  This detection rule is designed to identify the usage of the PowerShell cmdlet `Add-WindowsCapability`, which is utilized to add capabilities to the Windows operating system. The primary focus of this rule is on the addition of potentially notable capabilities, such as OpenSSH, which can be leveraged for remote access. When executed, this cmdlet can pose a security risk if used maliciously, such as allowing unauthorized remote access to systems. The rule monitors script block logging to capture instances where this cmdlet is invoked, specifically searching for entries that contain 'Add-WindowsCapability ' and any reference to ‘-Name OpenSSH.’ 
  The detection relies on the collection of PowerShell script execution logs, specifically requiring that script block logging is enabled on the target system. This logging captures detailed information about PowerShell commands executed on Windows hosts, thus providing the necessary context for an effective analysis of command-line parameters. The relevancy of this rule aligns with the MITRE ATT&CK framework under the **Execution** tactic, with particular reference to technique T1059. PowerShell, which can be employed by threat actors to execute malicious actions, makes this detection crucial for maintaining a secure enterprise environment.
  ### Investigation Steps
  - **Check EDR Alerts:** Review alerts from the EDR tool related to recent PowerShell executions. Cross-reference the timestamps of the detected command with other alerts to ascertain if there was a coordinated attack or unusual behavior.
  - **Analyze PowerShell Logs:** Investigate Windows PowerShell logs for details of the command execution, including the user context and script block logs. Pay attention to the parameters provided in the commands and any associated logs that may indicate unauthorized access or changes.
  - **Review Network Connections:** Use the network detection tools to monitor any outbound connections that may have resulted from the addition of new capabilities. Check if any new service related to the added capability, like OpenSSH, has been initiated that could facilitate remote access.
  - **Inspect User Activity:** Validate whether the user account that executed the command has legitimate administrative privileges and whether the actions align with scheduled maintenance or standard operating procedures. Look for evidence of lateral movement or privilege escalation.
  ### Prioritization
  This alert is rated as medium severity due to the potential misuse of the `Add-WindowsCapability` cmdlet, which could enable unauthorized services on Windows systems. Prompt investigation is essential to prevent unauthorized access and system exploitation.
  ### Blind Spots and Assumptions
  This rule assumes that script block logging is enabled on the target system, which may not always be the case. If script block logging is disabled or improperly configured, the rule will fail to detect the cmdlet execution. Additionally, the rule may generate false positives from legitimate administrative actions where trusted users are legitimately adding capabilities. Adversaries may attempt to obfuscate their actions by using alternative methods to add capabilities without directly invoking the cmdlet, so it is vital to monitor for suspicious behavior around these legitimate processes.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
