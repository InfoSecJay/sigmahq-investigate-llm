title: Silence.EDA Detection
id: 3ceb2083-a27f-449a-be33-14ec1b7cc973
status: test
description: Detects Silence EmpireDNSAgent as described in the Group-IP report
references:
- https://www.group-ib.com/resources/threat-research/silence_2.0.going_global.pdf
author: Alina Stepchenkova, Group-IB, oscd.community
date: 2019-11-01
modified: 2023-04-03
tags:
- attack.execution
- attack.t1059.001
- attack.command-and-control
- attack.t1071.004
- attack.t1572
- attack.impact
- attack.t1529
- attack.g0091
- attack.s0363
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  empire:
        # better to randomise the order
    ScriptBlockText|contains|all:
    - 'System.Diagnostics.Process'
    - 'Stop-Computer'
    - 'Restart-Computer'
    - 'Exception in execution'
    - '$cmdargs'
    - 'Close-Dnscat2Tunnel'
  dnscat:
        # better to randomise the order
    ScriptBlockText|contains|all:
    - 'set type=$LookupType`nserver'
    - '$Command | nslookup 2>&1 | Out-String'
    - 'New-RandomDNSField'
    - '[Convert]::ToString($SYNOptions, 16)'
    - '$Session.Dead = $True'
    - '$Session["Driver"] -eq'
  condition: empire and dnscat
falsepositives:
- Unknown
level: critical
notes: |
  ### Technical Context
  The Silence.EDA Detection rule is designed to identify malicious activity associated with the Silence group’s use of EmpireDNSAgent, which facilitates command and control communications. This Sigma rule operates by examining PowerShell script block logs for specific strings indicative of the attacker’s operational tactics, such as managing processes (`Stop-Computer`, `Restart-Computer`), handling DNS tunneling (`nslookup`, `New-RandomDNSField`), and error handling (`Exception in execution`). To effectively capture these potential threats, it requires that Script Block Logging is enabled on Windows systems, which provides a granular view of PowerShell script execution details, including commands and parameters that could signal dangerous behavior.
  By utilizing this rule, SOC analysts can pinpoint instances of possible malicious PowerShell commands used by attackers to manage system processes and establish external communications. Given its critical level classification, alerts generated by this rule should prioritize immediate investigation and response efforts, as they may indicate ongoing attacks within the environment.
  ### Investigation Steps
  - Review the relevant PowerShell script block logs in the EDR for matches to the specific command signatures outlined in the detection rule, paying attention to patterns indicating potential malicious activity.
  - Use the SIEM to correlate occurrences of these alerts with other security events to identify potential lateral movement or other indicators of compromise that might suggest a broader attack.
  - Investigate any identified PowerShell sessions found during the inspection, particularly those that show results from DNS lookups involving suspicious domains or addresses.
  - Conduct a thorough analysis of network traffic logs from the NDR or firewall to trace any outbound connections that could align with the identified command and control behavior, especially focusing on unusual DNS traffic patterns.
