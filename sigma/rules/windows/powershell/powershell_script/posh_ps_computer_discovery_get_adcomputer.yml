title: Computer Discovery And Export Via Get-ADComputer Cmdlet - PowerShell
id: db885529-903f-4c5d-9864-28fe199e6370
related:
- id: 435e10e4-992a-4281-96f3-38b11106adde
  type: similar
status: test
description: Detects usage of the Get-ADComputer cmdlet to collect computer information
  and output it to a file
references:
- http://blog.talosintelligence.com/2022/09/lazarus-three-rats.html
- https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/
- https://www.cisa.gov/uscert/sites/default/files/publications/aa22-320a_joint_csa_iranian_government-sponsored_apt_actors_compromise_federal%20network_deploy_crypto%20miner_credential_harvester.pdf
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-11-17
tags:
- attack.discovery
- attack.t1033
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - 'Get-ADComputer '
    - ' -Filter \*'
    ScriptBlockText|contains:
    - ' | Select '
    - 'Out-File'
    - 'Set-Content'
    - 'Add-Content'
  condition: selection
falsepositives:
- Legitimate admin scripts may use the same technique, it's better to exclude specific
  computers or users who execute these commands or scripts often
level: medium
notes: |
  ### Technical Context
  This detection rule focuses on identifying potential misuse of the PowerShell cmdlet `Get-ADComputer`, often leveraged by threat actors for reconnaissance activities within a network. The rule is specifically designed to catch instances where an attacker gathers information about computers in an Active Directory (AD) environment and exports this data into a file. The detection inspects the command's structure through the monitoring of PowerShell script block logging, particularly looking for the presence of key phrases such as `Get-ADComputer`, `-Filter *`, and file manipulation commands including `Out-File`, `Set-Content`, and `Add-Content`. This approach aligns with the MITRE ATT&CK tactic of Discovery (T1033), which highlights the importance of identifying and tracking potential threats to enterprise infrastructure.
  In practical terms, this rule necessitates that script block logging be enabled to ensure accurate data capture. By filtering the logs for specific keyword patterns, the rule detects relevant PowerShell commands typically utilized by unauthorized users to harvest sensitive information from an Active Directory environment.
  ### Investigation Steps
  - **Verify the Context of Detected Commands:** Review the user and device context associated with the alert in the EDR. Check if the user is authorized to run such commands or if this behavior is suspicious for their role.
    
  - **Examine PowerShell Command History:** Inspect the PowerShell command history on the machine where the alert was triggered. Look for additional related commands that may indicate intent to compromise or gather data further.
  - **Cross-Reference Logs:** Utilize SIEM to correlate the alert with other logs such as Windows Security or Application logs for additional suspicious activity, like subsequent access to sensitive resources or unusual login patterns.
  - **Evaluate Affected Systems:** Investigate the computers listed in the output of the `Get-ADComputer` command. Confirm whether they have seen any recent unusual access or if they belong to critical business functions, warranting further scrutiny.
  ### Prioritization
  The severity of this alert is considered medium due to the potential for misuse of PowerShell commands used in reconnaissance and information gathering, although legitimate administrative tasks might trigger it. A flexible response strategy is therefore vital to differentiate between benign and malicious activity.
  ### Blind Spots and Assumptions
  This rule assumes that script block logging is enabled in the environment, as it is vital for detecting the execution of PowerShell scripts. Additionally, it may not fire in scenarios where malicious actors obfuscate their commands or utilize alternative methods that don't generate typical script block logs. Furthermore, legitimate administrative scripts could produce false positives, suggesting the need for contextual filtering based on known user behavior. 
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
