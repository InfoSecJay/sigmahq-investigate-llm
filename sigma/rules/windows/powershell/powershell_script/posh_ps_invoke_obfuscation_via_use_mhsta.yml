title: Invoke-Obfuscation Via Use MSHTA - PowerShell
id: e55a5195-4724-480e-a77e-3ebe64bd3759
status: test
description: Detects Obfuscated Powershell via use MSHTA in Scripts
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task31)
author: Nikita Nazarov, oscd.community
date: 2020-10-08
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_4104:
    ScriptBlockText|contains|all:
    - 'set'
    - '&&'
    - 'mshta'
    - 'vbscript:createobject'
    - '.run'
    - '(window.close)'
  condition: selection_4104
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule, identified by its Sigma rule ID `e55a5195-4724-480e-a77e-3ebe64bd3759`, focuses on identifying obfuscated PowerShell scripts that employ MSHTA (Microsoft HTML Application Host) as a vehicle for executing malicious activities. The rule specifically looks for certain keywords and constructs in PowerShell script block text that indicate an attempt to invoke obfuscation techniques. These keywords include `set`, `&&`, `mshta`, `vbscript:createobject`, `.run`, and `(window.close)`. The technical data source for this detection is derived from Windows PowerShell Script Block Logging, which must be enabled in the environment. This detection is aligned with the MITRE ATT&CK tactics and techniques, particularly T1027 (Obfuscated Files or Information) and T1059.001 (PowerShell), under the defense evasion and execution categories.
  Responding to this alert requires an understanding of PowerShell behavior and the ability to correlate script execution patterns with potential malicious intent. Adversaries often use MSHTA as a method to evade traditional detection systems, making this rule a crucial component in identifying advanced threats that employ obfuscation to carry out their objectives.
  ### Investigation Steps
  - **Review PowerShell Logs:** Check PowerShell Script Block Logging on the affected system for any script blocks that contain the specified keywords related to MSHTA and obfuscation.
  - **Analyze Process Execution:** Use your EDR solution to trace process execution history and identify any instances of `mshta.exe` initiated by PowerShell or other potentially dubious scripts.
  - **Correlate with Network Activity:** Examine network logs for outbound connections that correspond to the timing of the script execution, looking for unexpected traffic, especially to known malicious IP addresses or domains.
  - **Inspect Application and Security Logs:** Investigate Windows Security and Application logs for any relevant alerts or anomalies that align with the timing of the PowerShell script execution, which may indicate further malicious activity.
  ### Prioritization
  Alerts generated by this rule should be taken seriously as they indicate high-severity potential threats. The use of obfuscated PowerShell scripts leveraging MSHTA is often indicative of sophisticated attacks aimed at evading detection mechanisms, warranting immediate investigation.
  ### Blind Spots and Assumptions
  While this rule is designed to detect obfuscated PowerShell scripts, it relies heavily on the presence of Script Block Logging, which may not be enabled in all environments. Additionally, sophisticated adversaries may employ various evasion tactics to bypass PowerShell logging or alter script execution patterns to avoid detection. There is also a risk of false positives stemming from benign usage of similar constructs in legitimate automation scripts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
