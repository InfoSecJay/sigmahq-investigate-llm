title: Security Software Discovery Via Powershell Script
id: 904e8e61-8edf-4350-b59c-b905fc8e810c
status: test
description: |
  Detects calls to "get-process" where the output is piped to a "where-object" filter to search for security solution processes.
  Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1518.001/T1518.001.md#atomic-test-2---security-software-discovery---powershell
author: frack113, Anish Bogati, Nasreddine Bencherchali (Nextron Systems)
date: 2021-12-16
modified: 2023-10-24
tags:
- attack.discovery
- attack.t1518.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_cmdlet:
    ScriptBlockText|contains:
    - 'get-process | \?'
    - 'get-process | where'
    - 'gps | \?'
    - 'gps | where'
  selection_field:
    ScriptBlockText|contains:
    - 'Company -like'
    - 'Description -like'
    - 'Name -like'
    - 'Path -like'
    - 'Product -like'
  selection_keywords:
    ScriptBlockText|contains:
            # Note: These strings are using wildcard assuming the search is using the "-like" operator.
            #       You can add specific variant with the actual process names to increase coverage
    - '\*avira\*'
    - '\*carbonblack\*'
    - '\*cylance\*'
    - '\*defender\*'
    - '\*kaspersky\*'
    - '\*malware\*'
    - '\*sentinel\*'
    - '\*symantec\*'
    - '\*virus\*'
  condition: all of selection_*
falsepositives:
- False positives might occur due to the nature of the ScriptBlock being ingested
  as a big blob. Initial tuning is required.
- As the "selection_cmdlet" is common in scripts the matching engine might slow down
  the search. Change into regex or a more accurate string to avoid heavy resource
  consumption if experienced
level: medium
notes: |
  n
  ### Technical Context
  The rule "Security Software Discovery Via Powershell Script" is designed to detect unauthorized attempts by adversaries to inventory security software on hosts within an enterprise environment. It specifically identifies PowerShell script executions that utilize the `get-process` command combined with a `where-object` filter to query for known security-related processes, such as antivirus solutions or firewall software. The rule captures specific patterns in the PowerShell script block that include commands targeting process properties, like 'Company', 'Description', and 'Name', with a focus on common security software names. The key syslog source for this detection is derived from PowerShell script block logging, which must be enabled on monitored systems. This detection aligns with the MITRE ATT&CK tactic "Discovery" (Tactic: T1083) and technique "Security Software Discovery" (Technique: T1518.001).
  ### Investigation Steps
  - **Check PowerShell Logs:** Review the PowerShell script block logs using your SIEM or EDR to find the specific instances of script executions that match the detected patterns.
  - **Identify Affected Endpoints:** Utilize your EDR or SIEM tools to identify the endpoints where the detection was triggered, looking for other suspicious activities around the same time.
  - **Review System Logs:** Inspect Windows Event Logs (especially Security, System, and Application) for any anomalous events that could indicate malicious behavior, focusing on process creation and account logon events.
  - **Cross-reference Security Products:** Use asset management or vulnerability scanning tools to verify if the reported security solutions are legitimately installed on the system in question, comparing that with the logs to identify any discrepancies.
  ### Prioritization
  The alert is classified as medium severity due to the potential indication of recon activity by an adversary attempting to gather intelligence about the organizationâ€™s defenses. While this is not immediately indicative of an active breach, it highlights a possible reconnaissance phase conducive to further malicious actions.
  ### Blind Spots and Assumptions
  The detection may not fire if script block logging is not enabled on the system, as it relies on capturing the execution of PowerShell commands. Additionally, sophisticated adversaries might obfuscate their commands or utilize alternative methods for process enumeration that fall outside the detection scope. There may also be false positives triggered by routine administrative or legitimate user activity that uses similar PowerShell commands without malicious intent. Analysts should be aware that the nature of PowerShell allows for various ways of accessing command results, making some detection efforts inherently imprecise.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
