title: Suspicious Process Discovery With Get-Process
id: af4c87ce-bdda-4215-b998-15220772e993
status: test
description: Get the processes that are running on the local computer.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1057/T1057.md#atomic-test-3---process-discovery---get-process
- https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-process?view=powershell-7.4
author: frack113
date: 2022-03-17
tags:
- attack.discovery
- attack.t1057
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains: Get-Process
  condition: selection
falsepositives:
- Legitimate PowerShell scripts
level: low
notes: |
  ### Technical Context
  This detection rule identifies potentially suspicious activity by monitoring PowerShell script execution for the use of the `Get-Process` cmdlet, which is commonly used to list all processes running on a Windows machine. The primary technical data source leveraged by this rule is PowerShell Script Block Logging, which captures detailed information about each executed script block, including its text content. When the Rule triggers, responders should consider the intent behind the utilization of `Get-Process`, as it may indicate an adversary's attempt to enumerate running processes during a reconnaissance phase. This behavior aligns with the MITRE ATT&CK technique T1057: Process Discovery, under the Discovery tactic, which adversaries may employ to gather information about the system.
  ### Investigation Steps
  - **Review the PowerShell Logs:** Start by examining the PowerShell script block logs to gather context about the execution of the `Get-Process` command, including the user and timing of the execution.
    
  - **Cross-reference with User Activity:** Use EDR tools to analyze associated activities performed by the user that executed the command, identifying any potentially malicious behavior surrounding the execution time.
  - **Check for Alternate Indicators:** Monitor for other related telemetry, such as network connections or file writes made by the user around the same time, to determine if this was part of broader suspicious activity.
  - **Assess Legitimate vs. Suspicious Use:** Determine if the execution aligns with legitimate administrative tasks or if it appears anomalous based on baselines of expected PowerShell usage within the environment.
  ### Prioritization
  Alerts triggered by this rule should be considered low severity, as legitimate administrative scripts frequently utilize the `Get-Process` cmdlet. However, the context of the alert, such as unexpected usage patterns or unusual user behavior, can escalate its significance.
  ### Blind Spots and Assumptions
  This rule assumes that Script Block Logging is enabled, as it is a prerequisite for detecting the `Get-Process` command executions. It may not fire if the PowerShell execution is obfuscated or if the specific cmdlet is executed in a way that bypasses logging configurations, such as using encoded command lines. Additionally, the rule does not distinguish between legitimate and malicious use cases, which may lead to false positives from authorized administrative scripts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
