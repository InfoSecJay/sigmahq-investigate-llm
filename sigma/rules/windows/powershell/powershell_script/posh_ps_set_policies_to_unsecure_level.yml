title: Change PowerShell Policies to an Insecure Level - PowerShell
id: 61d0475c-173f-4844-86f7-f3eebae1c66b
related:
- id: cf2e938e-9a3e-4fe8-a347-411642b28a9f     # ProcCreation Registry
  type: similar
- id: 87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180     # ProcCreation Cmdlet
  type: similar
- id: fad91067-08c5-4d1a-8d8c-d96a21b37814     # Registry
  type: similar
status: test
description: Detects changing the PowerShell script execution policy to a potentially
  insecure level using the "Set-ExecutionPolicy" cmdlet.
references:
- https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.4
- https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.4
- https://adsecurity.org/?p=2604
author: frack113
date: 2021-10-20
modified: 2023-12-14
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_cmdlet:
    ScriptBlockText|contains: 'Set-ExecutionPolicy'
  selection_option:
    ScriptBlockText|contains:
    - 'Unrestricted'
    - 'bypass'
  filter_optional_chocolatey:
    ScriptBlockText|contains:
    - "(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')"
    - "(New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')"
  condition: all of selection_* and not 1 of filter_optional_*
falsepositives:
- Administrator script
level: medium
notes: |
  n
  ### Technical Context
  This Sigma rule is designed to detect changes to the PowerShell execution policy using the `Set-ExecutionPolicy` cmdlet, particularly when the policy is set to potentially insecure levels such as "Unrestricted" or "Bypass." PowerShell execution policies are a security feature that helps prevent the execution of untrusted scripts, and changing them to insecure settings can enable malicious scripts to run without restriction. The detection focuses on the `ScriptBlockText` attribute, specifically looking for command strings containing "Set-ExecutionPolicy" along with keywords indicating insecure policies. To generate events enabled by this rule, Script Block Logging must be activated in the PowerShell environment. This detection corresponds with the MITRE ATT&CK Tactic: **Execution** and Technique: **T1059.001** (Command and Scripting Interpreter: PowerShell).
  ### Investigation Steps
  - **Verify the Change**: Use PowerShell logs (if Script Block Logging is enabled) or EDR tools to confirm whether the execution policy was changed and identify the user account that executed the change.
    
  - **Assess Context**: Review the context of the command execution, including user activity surrounding the time of the policy change. Check for other suspicious PowerShell commands and processes initiated by the user.
  - **Check for Other Malicious Activity**: Use endpoint detection and response tools to investigate any running PowerShell processes or scripts that may have been executed post-policy change, especially those calling external URLs to download content.
  - **Review Audit Logs**: Utilize Windows Security logs to track any suspicious authentication events or administrative actions that occurred effectively around the same timeframe as the policy change.
  ### Prioritization
  This alert is classified as medium severity because changing the PowerShell execution policy to a potentially insecure level can facilitate further malicious activities, such as executing unapproved scripts or downloading arbitrary content. However, it is essential to evaluate the source and intent of the action to determine its actual risk level.
  ### Blind Spots and Assumptions
  This rule relies on the assumption that Script Block Logging has been enabled in the PowerShell environment; if it is not, the detection will fail to trigger. Additionally, the rule may not capture benign administrative actions executed by legitimate users, such as system administrators updating policies for valid purposes. Adversaries may also employ obfuscation techniques to mask the command syntax, potentially leading to missed detections.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and comprehensiveness, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
