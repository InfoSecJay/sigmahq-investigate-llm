title: PowerView PowerShell Cmdlets - ScriptBlock
id: dcd74b95-3f36-4ed9-9598-0490951643aa
related:
- id: b2317cfa-4a47-4ead-b3ff-297438c0bc2d
  type: similar
status: test
description: Detects Cmdlet names from PowerView of the PowerSploit exploitation framework.
references:
- https://powersploit.readthedocs.io/en/stable/Recon/README
- https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon
- https://thedfirreport.com/2020/10/08/ryuks-return
- https://adsecurity.org/?p=2277
author: Bhabesh Raj
date: 2021-05-18
modified: 2023-11-22
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - 'Export-PowerViewCSV'
    - 'Find-DomainLocalGroupMember'
    - 'Find-DomainObjectPropertyOutlier'
    - 'Find-DomainProcess'
    - 'Find-DomainShare'
    - 'Find-DomainUserEvent'
    - 'Find-DomainUserLocation'
    - 'Find-ForeignGroup'
    - 'Find-ForeignUser'
    - 'Find-GPOComputerAdmin'
    - 'Find-GPOLocation'
    - 'Find-InterestingDomain'         # Covers: Find-InterestingDomainAcl, Find-InterestingDomainShareFile
    - 'Find-InterestingFile'
    - 'Find-LocalAdminAccess'
    - 'Find-ManagedSecurityGroups'
    - 'Get-CachedRDPConnection'
    - 'Get-DFSshare'
    - 'Get-DomainDFSShare'
    - 'Get-DomainDNSRecord'
    - 'Get-DomainDNSZone'
    - 'Get-DomainFileServer'
    - 'Get-DomainGPOComputerLocalGroupMapping'
    - 'Get-DomainGPOLocalGroup'
    - 'Get-DomainGPOUserLocalGroupMapping'
    - 'Get-LastLoggedOn'
    - 'Get-LoggedOnLocal'
    - 'Get-NetFileServer'
    - 'Get-NetForest'         # Covers: Get-NetForestCatalog, Get-NetForestDomain, Get-NetForestTrust
    - 'Get-NetGPOGroup'
    - 'Get-NetProcess'
    - 'Get-NetRDPSession'
    - 'Get-RegistryMountedDrive'
    - 'Get-RegLoggedOn'
    - 'Get-WMIRegCachedRDPConnection'
    - 'Get-WMIRegLastLoggedOn'
    - 'Get-WMIRegMountedDrive'
    - 'Get-WMIRegProxy'
    - 'Invoke-ACLScanner'
    - 'Invoke-CheckLocalAdminAccess'
    - 'Invoke-EnumerateLocalAdmin'
    - 'Invoke-EventHunter'
    - 'Invoke-FileFinder'
    - 'Invoke-Kerberoast'
    - 'Invoke-MapDomainTrust'
    - 'Invoke-ProcessHunter'
    - 'Invoke-RevertToSelf'
    - 'Invoke-ShareFinder'
    - 'Invoke-UserHunter'
    - 'Invoke-UserImpersonation'
    - 'Remove-RemoteConnection'
    - 'Request-SPNTicket'
    - 'Resolve-IPAddress'
            # - 'Get-ADObject'  # prone to FPs
            # - 'Get-Domain'  # too many FPs  # Covers Cmdlets like: DomainComputer, DomainController, DomainDFSShare, DomainDNSRecord, DomainGPO, etc.
            # - 'Add-DomainGroupMember'
            # - 'Add-DomainObjectAcl'
            # - 'Add-ObjectAcl'
            # - 'Add-RemoteConnection'
            # - 'Convert-ADName'
            # - 'Convert-NameToSid'
            # - 'ConvertFrom-UACValue'
            # - 'ConvertTo-SID'
            # - 'Get-DNSRecord'
            # - 'Get-DNSZone'
            # - 'Get-DomainComputer'
            # - 'Get-DomainController'
            # - 'Get-DomainGroup'
            # - 'Get-DomainGroupMember'
            # - 'Get-DomainManagedSecurityGroup'
            # - 'Get-DomainObject'
            # - 'Get-DomainObjectAcl'
            # - 'Get-DomainOU'
            # - 'Get-DomainPolicy'
            # - 'Get-DomainSID'
            # - 'Get-DomainSite'
            # - 'Get-DomainSPNTicket'
            # - 'Get-DomainSubnet'
            # - 'Get-DomainUser'
            # - 'Get-DomainUserEvent'
            # - 'Get-Forest' # Covers: Get-ForestDomain, Get-ForestGlobalCatalog, Get-ForestTrust
            # - 'Get-IPAddress'
            # - 'Get-NetComputer' # Covers: Get-NetComputerSiteName
            # - 'Get-NetDomain' # Covers: Get-NetDomainController, Get-NetDomainTrust
            # - 'Get-NetGroup' # Covers: Get-NetGroupMember
            # - 'Get-NetLocalGroup' # Covers: NetLocalGroupMember
            # - 'Get-NetLoggedon'
            # - 'Get-NetOU'
            # - 'Get-NetSession'
            # - 'Get-NetShare'
            # - 'Get-NetSite'
            # - 'Get-NetSubnet'
            # - 'Get-NetUser'
            # - 'Get-ObjectAcl'
            # - 'Get-PathAcl'
            # - 'Get-Proxy'
            # - 'Get-SiteName'
            # - 'Get-UserEvent'
            # - 'Get-WMIProcess'
            # - 'New-DomainGroup'
            # - 'New-DomainUser'
            # - 'Set-ADObject'
            # - 'Set-DomainObject'
            # - 'Set-DomainUserPassword'
            # - 'Test-AdminAccess'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule identifies potentially malicious use of PowerView cmdlets from the PowerSploit framework within PowerShell scripts. PowerView is commonly utilized by threat actors for domain reconnaissance, enabling them to gather information about users, groups, sessions, and shares in an Active Directory environment. The rule specifically looks for specific cmdlet names indicating attempts to extract sensitive information about the domain and its configuration, which may signify the presence of malicious actors in the network environment. The logs monitored for this detection require that PowerShell Script Block Logging is enabled, targeting the process creation logs where script block activity is recorded. This alert is associated with the MITRE ATT&CK techniques under the "Execution" tactic, specifically T1059.001 (Command and Scripting Interpreter: PowerShell) highlighting the use of PowerShell as a favored tool for executing malicious tasks.
  ### Investigation Steps
  - **Review PowerShell Logs:** Check the PowerShell Script Block Logging to identify the context in which the cmdlets were executed, focusing on the SourceId, Execution Policy, and User context to determine if the actions are legitimate.
  - **Correlate with EDR Data:** Utilize your Endpoint Detection and Response (EDR) tool to analyze the processes running at the time of execution; check for any known malicious indicators or unusual behaviors around the time of the alert.
  - **Network Traffic Analysis:** Investigate any outgoing network connections made by the host during the time the cmdlets were executed, focusing on unusual DNS queries or connections to suspicious IP addresses.
  - **Active Directory Review:** Conduct a review of Active Directory (AD) changes and group memberships to ascertain if any unauthorized modifications correspond with the execution of these cmdlets.
  ### Prioritization
  This alert is categorized as high severity due to the elevated risk it poses to the enterpriseâ€™s security posture. Detection of PowerView being executed often indicates possible reconnaissance by an adversary who may be attempting to exploit vulnerabilities in the network.
  ### Blind Spots and Assumptions
  It is important to note that this rule may not trigger if PowerShell Script Block Logging is not enabled or if cmdlets are executed in a manner that obfuscates the command line parameters (e.g., through encoded commands). Additionally, legitimate administrative use of PowerView by authorized personnel may result in false positives. Furthermore, skilled adversaries may use techniques to evade detection, such as using modified cmdlet names or executing scripts in a non-standard way.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
