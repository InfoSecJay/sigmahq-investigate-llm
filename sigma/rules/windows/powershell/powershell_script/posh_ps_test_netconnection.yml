title: Testing Usage of Uncommonly Used Port
id: adf876b3-f1f8-4aa9-a4e4-a64106feec06
status: test
description: |
  Adversaries may communicate using a protocol and port paring that are typically not associated.
  For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1571/T1571.md#atomic-test-1---testing-usage-of-uncommonly-used-port-with-powershell
- https://learn.microsoft.com/en-us/powershell/module/nettcpip/test-netconnection?view=windowsserver2022-ps
author: frack113
date: 2022-01-23
tags:
- attack.command-and-control
- attack.t1571
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - Test-NetConnection
    - '-ComputerName '
    - '-port '
  filter:
    ScriptBlockText|contains:
    - ' 443 '
    - ' 80 '
  condition: selection and not filter
falsepositives:
- Legitimate administrative script
level: medium
notes: |
  ### Technical Context
  This Sigma rule detects the use of the `Test-NetConnection` PowerShell command that checks connectivity to an unusually used port on a target computer. The rule specifically targets scenarios where this command is employed to establish connections over ports that are not typically associated with standard protocols, such as HTTPS or HTTP (e.g., ports 8088 or 587). It identifies instances of the command that contain `-ComputerName` and `-port` parameters while filtering out the more common ports (443 and 80). The detection leverages PowerShell script block logging, meaning that it relies on the logs generated by Windows when PowerShell scripts are executed and captures script block content. The rule aligns with the MITRE ATT&CK tactic of Command and Control (T1571).
  ### Investigation Steps
  - **Review PowerShell Logs**: Examine the Windows Security logs associated with PowerShell to fetch the relevant script block entries that triggered this alert, focusing on when the `Test-NetConnection` command was used.
    
  - **Analyze Network Traffic**: Use your EDR or network monitoring tools to correlate the source of the `Test-NetConnection` commands with outgoing network connections, specifically looking at traffic to the unusual ports identified in the alert.
  - **Identify User Context**: Determine the user or system account that executed the command by reviewing the event logs. Investigate if this behavior aligns with their typical usage patterns or access rights.
  - **Cross-reference with Other Logs**: Check additional logs (such as AV, Proxy, and others) for any suspicious activity related to the identified process or port that might provide further evidence of the context surrounding the command's execution.
  ### Prioritization
  The detection has a medium severity level due to the potential for abnormal command and control activities using uncommon ports, significant for identifying malicious activity, but not inherently indicative of compromise without further corroborating evidence.
  ### Blind Spots and Assumptions
  This rule is based on the assumption that PowerShell script block logging is enabled in your environment; if it is not, the rule will fail to fire. Additionally, legitimate administrative scripts using these commands for troubleshooting may generate false positives, so contextual analysis is crucial. The rule may also not capture attempts to obfuscate activity or use other less common PowerShell commands for similar purposes, depending on how adversaries might maneuver around detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
