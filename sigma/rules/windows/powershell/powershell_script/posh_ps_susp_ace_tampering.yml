title: Potential Persistence Via Security Descriptors - ScriptBlock
id: 2f77047c-e6e9-4c11-b088-a3de399524cd
status: test
description: Detects usage of certain functions and keywords that are used to manipulate
  security descriptors in order to potentially set a backdoor. As seen used in the
  DAMP project.
references:
- https://github.com/HarmJ0y/DAMP
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-05
tags:
- attack.persistence
- attack.defense-evasion
- attack.privilege-escalation
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - 'win32_Trustee'
    - 'win32_Ace'
    - '.AccessMask'
    - '.AceType'
    - '.SetSecurityDescriptor'
    ScriptBlockText|contains:
    - '\Lsa\JD'
    - '\Lsa\Skew1'
    - '\Lsa\Data'
    - '\Lsa\GBG'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule focuses on identifying suspicious PowerShell script blocks that leverage specific functions and keywords associated with manipulating security descriptors, which are often utilized in establishing persistence on compromised systems. The rule looks for PowerShell script blocks containing the terms related to `win32_Trustee`, `win32_Ace`, `AccessMask`, `AceType`, and `SetSecurityDescriptor`. The presence of these terms, especially in conjunction with LSA (Local Security Authority) paths such as `\Lsa\JD`, indicates potential attempts to set a backdoor that may facilitate unauthorized access or privilege escalation. The technical data sources involved in this detection include PowerShell Script Block Logging within Windows environments, which should be enabled for effective monitoring. This detection aligns with the MITRE ATT&CK tactics of **Persistence** and **Defense Evasion**, specifically techniques for manipulating security descriptors to maintain unauthorized access.
  ### Investigation Steps
  - **Check PowerShell Logs:** Review recent PowerShell script block logs in your EDR tool, focusing on instances with the identified keywords to determine the context of execution and any associated commands.
  - **Correlate with Security Events:** Use Windows Security Event Logs to investigate any account logins, permission changes, or other security-relevant events that coincide with the time of the detected script execution.
  - **Analyze User Behavior:** Assess the user account that executed the identified script block. Verify if the accountâ€™s privileges align with expected behavior and conduct an investigation into any unusual activity patterns or actions taken prior to the alert.
  - **Review Network Connections:** Examine outgoing network connections using your NDR or Firewall logs that might have occurred during the execution of the suspicious script to identify any unusual communication with external entities.
  ### Prioritization
  This alert is considered high severity because the techniques detected can potentially lead to persistent backdoors and privilege escalation, posing a significant threat to system integrity and security.
  ### Blind Spots and Assumptions
  One recognized blind spot is that if Script Block Logging is not enabled, the rule will not fire, resulting in missed opportunities to detect malicious activities. Additionally, legitimate administrative tasks might trigger false positives if they inadvertently mimic these patterns. It's essential to consider user baseline behavior and context to avoid misclassification. Adversaries may also employ obfuscation techniques or alternative scripting approaches that do not invoke these specific keywords, which could lead to evasion of detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
