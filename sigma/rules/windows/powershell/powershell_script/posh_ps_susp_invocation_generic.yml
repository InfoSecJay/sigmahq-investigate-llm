title: Suspicious PowerShell Invocations - Generic
id: ed965133-513f-41d9-a441-e38076a0798f
related:
- id: 3d304fda-78aa-43ed-975c-d740798a49c1
  type: derived
- id: bbb80e91-5746-4fbe-8898-122e2cafdbf4
  type: similar
status: test
description: Detects suspicious PowerShell invocation command parameters
references:
- Internal Research
author: Florian Roth (Nextron Systems)
date: 2017-03-12
modified: 2023-01-03
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_encoded:
    ScriptBlockText|contains:
    - ' -enc '
    - ' -EncodedCommand '
    - ' -ec '
  selection_hidden:
    ScriptBlockText|contains:
    - ' -w hidden '
    - ' -window hidden '
    - ' -windowstyle hidden '
    - ' -w 1 '
  selection_noninteractive:
    ScriptBlockText|contains:
    - ' -noni '
    - ' -noninteractive '
  condition: all of selection*
falsepositives:
- Very special / sneaky PowerShell scripts
level: high
notes: |
  n
  ### Technical Context
  This detection rule focuses on identifying suspicious PowerShell invocations by analyzing command parameters commonly used by adversaries to obfuscate their actions. The key technical data sources involved in this detection include PowerShell script block logging, which records script execution and parameter usage, particularly any command that includes encoded commands, hidden window execution, or non-interactive mode. The rule effectively flags instances where PowerShell scripts may be leveraged maliciously, aligning with the MITRE ATT&CK tactic of **Execution** and specifically the technique **T1059.001: Command and Scripting Interpreter: Windows PowerShell**. By monitoring these specific parameters, we can uncover attempts to execute potentially harmful scripts that might otherwise be concealed during routine monitoring.
  ### Investigation Steps
  - **Review PowerShell Logs**: Check PowerShell script block logs where the alert was triggered to obtain details about the specific command executed and its parameters.
  - **Check Recent Security Events**: Investigate Windows Security logs around the time of the alert to find any related login attempts or unusual user activity that might indicate an account compromise.
  - **Inspect Running Processes**: Use EDR tools to review currently running PowerShell processes initiated by the user in question, looking for any suspicious command line arguments or parent-child process relationships.
  - **Correlate with Network Activity**: Analyze network traffic logs from NDR tools to identify any outbound connections associated with the suspicious PowerShell executions, which may indicate communication with command and control servers.
  ### Prioritization
  Given that PowerShell is a powerful tool often abused by attackers, alerts generated by this rule should be considered high severity. They warrant immediate investigation to prevent any potential compromise or data exfiltration from occurring.
  ### Blind Spots and Assumptions
  This rule relies on the assumption that script block logging is enabled and properly configured in the environment. If disabled, the rule may not capture any suspicious activity. Additionally, there may be false negatives, such as legitimate scripts that use similar parameters for benign purposes or custom scripts crafted to evade detection by utilizing alternate encoding or obfuscation methods. Thus, analysts should remain vigilant about context and script behavior when investigating alerts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and comprehensiveness, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
