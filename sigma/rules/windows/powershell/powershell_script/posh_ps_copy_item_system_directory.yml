title: Powershell Install a DLL in System Directory
id: 63bf8794-9917-45bc-88dd-e1b5abc0ecfd
status: test
description: Uses PowerShell to install/copy a file into a system directory such as
  "System32" or "SysWOW64"
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1556.002/T1556.002.md#atomic-test-1---install-and-register-password-filter-dll
author: frack113, Nasreddine Bencherchali (Nextron Systems)
date: 2021-12-27
modified: 2024-01-22
tags:
- attack.credential-access
- attack.t1556.002
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|re: '(Copy-Item|cpi) .{2,128} -Destination .{1,32}\\Windows\\(System32|SysWOW64)'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This rule monitors for the use of PowerShell to copy a file into a sensitive system directory, specifically "System32" or "SysWOW64." By utilizing a regular expression, the rule looks for script block logs that contain command patterns indicative of nefarious activity, such as the commands `Copy-Item` or its alias `cpi`, followed by a destination path that leads to these critical directories. When PowerShell is used maliciously to place files in system directories, it typically indicates an attempt to execute or register malicious modules or DLLs, which can lead to further credential access or system compromise. This behavior is tied to the MITRE ATT&CK technique T1556.002, which focuses on the misuse of Windows PowerShell for credential access.
  ### Investigation Steps
  - **Review Alert Details:** Check the logs in your SIEM for the specific PowerShell command captured by script block logging. Identify the user account associated with the execution to determine the context of the activity.
    
  - **Correlate with Process Creation Logs:** Use EDR tools to correlate any process creation events with the time of the PowerShell command execution. Look for any suspicious parent processes that may have spawned the PowerShell script.
  - **Inspect File Integrity and Origin:** Query the file system for the presence of the file copy operation in "System32" or "SysWOW64." Verify the file's properties, including its hash and digital signature, to assess its legitimacy.
  - **Network Activity Review:** Analyze network logs using NDR to identify any outbound connections made by the PowerShell process. Look for anomalous traffic patterns that could indicate exfiltration or communication with external malicious servers.
  ### Prioritization
  The alert is classified as high severity due to the critical nature of the system directories involved and the potential risk for credential theft or system compromise when such activities are detected.
  ### Blind Spots and Assumptions
  This rule relies heavily on the existence of script block logging, which must be enabled for PowerShell. If script block logging is disabled or if an adversary uses obfuscation techniques, the detection may fail to trigger. Additionally, legitimate administrative activities that involve copying files into system directories could result in false positives, necessitating careful analysis of the context behind the command.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
