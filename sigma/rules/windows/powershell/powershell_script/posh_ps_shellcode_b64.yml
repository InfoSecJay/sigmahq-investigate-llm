title: PowerShell ShellCode
id: 16b37b70-6fcf-4814-a092-c36bd3aafcbd
status: test
description: Detects Base64 encoded Shellcode
references:
- https://twitter.com/cyb3rops/status/1063072865992523776
author: David Ledbetter (shellcode), Florian Roth (Nextron Systems)
date: 2018-11-17
modified: 2024-01-25
tags:
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1055
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - 'OiCAAAAYInlM'
    - 'OiJAAAAYInlM'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule aims to identify potential security threats originating from the execution of PowerShell scripts that include Base64 encoded Shellcode. It specifically looks for the presence of script block text containing certain encoded strings associated with shellcode, which can indicate malicious activity such as privilege escalation or evasion techniques used by attackers. To function properly, the rule requires that Script Block Logging be enabled on the monitored systems. When PowerShell executes scripts, it logs relevant activities that can be monitored for suspicious patterns, aiding in the detection of unauthorized or harmful execution attempts.
  The targeted data sources include the logs generated by PowerShell when script block logging is enabled, capturing command-line parameters and the actual script content being executed. By monitoring these logs, security analysts can detect anomalies signaling potential unauthorized access or escalation attempts, thereby facilitating timely and effective incident response efforts.
  ### Investigation Steps
  - Review the PowerShell script block logs in your EDR solution for any occurrences of the detected Base64 encoded shellcode strings identified in the alert.
  - Examine the command-line execution history for any related processes to determine if other suspicious commands were run in association with the flagged activity.
  - Cross-reference the alert with antivirus logs to identify any additional detections or blocks that may have occurred in conjunction with the PowerShell execution.
  - Analyze related network activity through your NDR tools to check for connections to known malicious IP addresses or domains that could correlate with the execution of malicious PowerShell scripts.
