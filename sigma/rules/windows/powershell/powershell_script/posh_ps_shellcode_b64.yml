title: PowerShell ShellCode
id: 16b37b70-6fcf-4814-a092-c36bd3aafcbd
status: test
description: Detects Base64 encoded Shellcode
references:
- https://twitter.com/cyb3rops/status/1063072865992523776
author: David Ledbetter (shellcode), Florian Roth (Nextron Systems)
date: 2018-11-17
modified: 2024-01-25
tags:
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1055
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - 'OiCAAAAYInlM'
    - 'OiJAAAAYInlM'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The "PowerShell ShellCode" rule is designed to detect the execution of potentially malicious Base64 encoded shellcode through PowerShell scripts. It specifically looks for the presence of specific Base64 strings within logged ScriptBlockText, which are known to be used in various payloads for evasion and privilege escalation tactics by attackers. The detection mechanism leverages Windows PowerShell Script Block Logging, which must be enabled for the rule to function effectively. This logging captures the execution of scripts, allowing the monitoring of what PowerShell commands are being processed and enabling analysts to identify non-standard or suspicious activity. The rule is associated with the MITRE ATT&CK technique T1059.001, focusing on command-line interface execution, and T1055, which involves processes that can hide their activity.
  ### Investigation Steps
  - **Verify Script Block Logging:** Check that Script Block Logging is enabled on the affected systems. If it is not enabled, the detection capabilities of this rule will be impaired.
  - **Analyze EDR Alerts:** Use your EDR solution to review alerts associated with any detected PowerShell activity. Pay attention to the context in which the script was executed and look for any associated processes.
  - **Examine PowerShell Execution History:** Query the execution history logs for PowerShell to identify any recent execution of scripts that utilized Base64 encoding or had similar patterns to those detected by the rule.
  - **Cross-reference Network Activity:** Review firewall and proxy logs for unusual outbound connections following the execution of flagged PowerShell scripts. This can help identify potential data exfiltration or command and control communications.
  ### Prioritization
  This alert is prioritized as high severity due to the potential for immediate privilege escalation and the ability of attackers to obfuscate malicious activities using PowerShell, which can lead to significant compromise within the enterprise environment.
  ### Blind Spots and Assumptions
  This rule assumes that Script Block Logging is enabled and properly configured across all monitored systems, which may not always be the case in every environment. If this logging is disabled, or if attackers utilize techniques to obfuscate their commands that evade detection, the rule may fail to fire. Additionally, it may not capture legitimate scripts that incidentally contain the detected Base64 patterns, leading to potential false positives.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
