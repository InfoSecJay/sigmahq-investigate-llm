title: Malicious ShellIntel PowerShell Commandlets
id: 402e1e1d-ad59-47b6-bf80-1ee44985b3a7
status: test
description: Detects Commandlet names from ShellIntel exploitation scripts.
references:
- https://github.com/Shellntel/scripts/
author: Max Altgelt (Nextron Systems), Tobias Michalski (Nextron Systems)
date: 2021-08-09
modified: 2023-01-02
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - 'Invoke-SMBAutoBrute'
    - 'Invoke-GPOLinks'
            # - 'Out-Minidump' # Covered in 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6
    - 'Invoke-Potato'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled *Malicious ShellIntel PowerShell Commandlets* is designed to detect potentially malicious PowerShell commandlets originating from exploitation scripts associated with ShellIntel. Specifically, the rule looks for certain commandlet names such as `Invoke-SMBAutoBrute`, `Invoke-GPOLinks`, and `Invoke-Potato` within the PowerShell script block logs, indicating possible attempts to execute unauthorized actions. To effectively utilize this detection, it is essential to ensure that Script Block Logging is enabled on Windows systems, as this is the primary data source. This logging feature captures the content of PowerShell commands and scripts executed, allowing for the detection of suspicious activity as they are processed in memory.
  This rule aligns with the MITRE ATT&CK framework's tactics under *Execution* (T1059.001), specifically highlighting the risks associated with the use of PowerShell in attack scenarios. Analysts should be aware that the detection targets specific PowerShell commandlets often leveraged by attackers during post-exploitation phases, aiming to manipulate system configurations or compromise network security.
  ### Investigation Steps
  - **Check PowerShell Execution Logs**: Review the PowerShell script block logs in the relevant security event logs to identify any instances where the detected commandlets were executed, paying attention to the source process and any associated arguments.
  - **Correlate with EDR Tooling**: Utilize your EDR solution to track the process tree associated with the detected commandlet execution, looking for any unusual parent-child relationships or suspicious processes.
  - **Review Network Traffic**: Inspect network traffic using your Network Detection and Response (NDR) tool for any unusual outbound connections or data exfiltration that may correlate with the execution of the malicious commandlets.
  - **Assess User and System Context**: Analyze user activity and context from Windows Security logs, focusing on logon types and whether the executed commands correspond to known users or elevated permissions that could indicate potential abuse or compromise.
  ### Prioritization
  The alert has been assigned a high severity level due to the potential for significant impact from the execution of malicious PowerShell commandlets, which may lead to system compromise, data exfiltration, or lateral movement within an enterprise environment.
  ### Blind Spots and Assumptions
  The effectiveness of this detection rule may be diminished in environments where Script Block Logging is not consistently enabled, or if PowerShell commandlets are obfuscated in such a way that they do not trigger the rule. Additionally, attackers may employ alternative execution methods, such as directly executing compiled binaries or using alternative scripting frameworks, to bypass this detection mechanism. Therefore, analysts should be aware of these potential blind spots in their monitoring capabilities and consider complementing this detection with broader threat hunting strategies.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
