title: Extracting Information with PowerShell
id: bd5971a7-626d-46ab-8176-ed643f694f68
status: test
description: |
  Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials.
  These can be files created by users to store their own credentials, shared credential stores for a group of individuals,
  configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1552.001/T1552.001.md
author: frack113
date: 2021-12-19
modified: 2022-12-25
tags:
- attack.credential-access
- attack.t1552.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - ls
    - ' -R'
    - 'select-string '
    - '-Pattern '
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule targets the use of PowerShell for extracting sensitive information, specifically through commands designed to list files and search their contents for insecurely stored credentials. Adversaries may employ such techniques to locate user-created files or configuration files containing passwords or other sensitive information. The rule focuses on specific PowerShell patterns that indicate a search operation, such as the `ls` (list) command combined with `select-string`, which filters files based on a specified pattern. To detect these actions effectively, the rule relies on PowerShell script block logging, which must be enabled on Windows systems, allowing the security operations team to monitor and analyze scripting activity.
  ### Investigation Steps
  - Utilize EDR to search for PowerShell scripts executed during the alert timeframe, focusing on those containing the `ls` or `select-string` commands to determine the intent behind the actions.
  - Review process creation logs in the SIEM to correlate additional processes spawned by the detected PowerShell commands, identifying any parent-child relationships that may indicate malicious usage.
  - Check file system or server logs to identify the files accessed or manipulated during the execution of the detected commands, paying special attention to any sensitive configuration files.
  - Analyze network traffic logs through your NDR tools to see if any external connections were made during these PowerShell executions, which could suggest data exfiltration attempts.
