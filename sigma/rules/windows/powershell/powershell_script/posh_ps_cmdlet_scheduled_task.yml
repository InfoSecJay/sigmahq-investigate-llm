title: Powershell Create Scheduled Task
id: 363eccc0-279a-4ccf-a3ab-24c2e63b11fb
status: test
description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling
  for initial or recurring execution of malicious code
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1053.005/T1053.005.md#atomic-test-4---powershell-cmdlet-scheduled-task
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1053.005/T1053.005.md#atomic-test-6---wmi-invoke-cimmethod-scheduled-task
author: frack113
date: 2021-12-28
tags:
- attack.persistence
- attack.t1053.005
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_cmdlet:
    ScriptBlockText|contains:
    - 'New-ScheduledTaskAction'
    - 'New-ScheduledTaskTrigger'
    - 'New-ScheduledTaskPrincipal'
    - 'New-ScheduledTaskSettingsSet'
    - 'New-ScheduledTask'
    - 'Register-ScheduledTask'
  selection_cimmethod:
    ScriptBlockText|contains|all:
    - 'Invoke-CimMethod'
    - '-ClassName'
    - 'PS_ScheduledTask'
    - '-NameSpace'
    - 'Root\Microsoft\Windows\TaskScheduler'
  condition: 1 of selection_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This detection rule identifies the use of PowerShell commands associated with the creation and management of scheduled tasks in Windows. Such tasks can be exploited by adversaries to persistently execute malicious code without user awareness. The rule leverages Script Block Logging to monitor executed PowerShell commands for specific cmdlets that are commonly associated with scheduling tasks, such as `New-ScheduledTaskAction`, `Register-ScheduledTask`, and `Invoke-CimMethod`. By capturing these commands, the rule can detect potential misuse of the Windows Task Scheduler for malicious purposes, facilitating early identification of adversarial activities.
  To effectively utilize this rule, it is essential that organizations have PowerShell Script Block Logging enabled, as this allows for the granular inspection of script execution details, including the command-line parameters and any associated metadata. This information is crucial for confirming whether legitimate administrative activities are being conducted, or if the environment is being manipulated by a threat actor.
  ### Investigation Steps
  - Check the EDR logs for any recent execution of PowerShell commands that correspond to the detected scheduled task commands, focusing on the specific users and systems involved.
  - Review the Windows Event Logs for Scheduled Task creation events, particularly looking at events generated around the time of the PowerShell execution to determine the context of the activities.
  - Analyze the command-line parameters used in the detected PowerShell scripts to identify any unusual or suspicious behavior that could indicate malicious intent.
  - Conduct a network traffic analysis via NDR or Proxy logs to see if there are any outgoing connections or attempts to download additional payloads related to the suspicious scheduled tasks.
