title: Suspicious PowerShell Get Current User
id: 4096a49c-7de4-4da0-a230-c66ccd56ea5a
status: test
description: Detects the use of PowerShell to identify the current logged user.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1033/T1033.md#atomic-test-4---user-discovery-with-env-vars-powershell-script
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1033/T1033.md#atomic-test-5---getcurrent-user-with-powershell-script
author: frack113
date: 2022-04-04
tags:
- attack.discovery
- attack.t1033
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - '[System.Environment]::UserName'
    - '$env:UserName'
    - '[System.Security.Principal.WindowsIdentity]::GetCurrent()'
  condition: selection
falsepositives:
- Legitimate PowerShell scripts
level: low
notes: |
  ### Technical Context
  This detection rule is designed to identify potentially malicious use of PowerShell scripts aimed at discovering the current logged-in user on a Windows system. Specifically, it looks for the presence of certain PowerShell script block texts that retrieve user information, such as `[System.Environment]::UserName`, `$env:UserName`, and `[System.Security.Principal.WindowsIdentity]::GetCurrent()`. These commands can be innocuous when used in legitimate administration scripts but can also be employed by attackers to gather user context for further exploitation. The rule relies on telemetry from Windows PowerShell script block logging, which must be enabled in the environment. This detection falls under the MITRE ATT&CK tactics of Discovery (TA0007), specifically technique T1033, which focuses on account discovery.
  ### Investigation Steps
  - **Check PowerShell Logs:** Examine detailed PowerShell execution logs (or script block logs) to identify the full context in which these commands were executed, verifying if they were part of legitimate administrative tasks or potentially malicious activity.
    
  - **Evaluate User Account Context:** Assess the account that executed the PowerShell command. Investigate whether this user has a history of legitimate administrative activity or if their behavior is inconsistent with typical usage patterns.
  - **Cross-reference EDR Alerts:** Review EDR alerts around the same timeframe to identify any associated unusual process activity or lateral movement attempts that may indicate malicious intent behind user discovery.
  - **Analyze Network Traffic:** Look at any outbound network connections or proxy logs initiated by the user during the timeframe of executing the suspicious PowerShell script, as these may provide insight into further potential compromise activities.
  ### Prioritization
  Given that this alert concerns the discovery of user information, it holds a lower severity in an enterprise environment. However, it should still be closely monitored as it could indicate preparatory activities tied to a larger attack strategy.
  ### Blind spots and Assumptions
  This rule may not trigger in scenarios where script block logging is not enabled, failing to capture any suspicious activity from PowerShell execution. Furthermore, legitimate administrative scripts commonly utilize commands that retrieve user context, which can lead to false positives. Adversaries may also obfuscate their scripts or employ alternative languages or methods for user discovery that this rule cannot detect.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
