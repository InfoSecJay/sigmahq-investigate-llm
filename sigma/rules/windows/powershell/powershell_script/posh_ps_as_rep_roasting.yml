title: Get-ADUser Enumeration Using UserAccountControl Flags
id: 96c982fe-3d08-4df4-bed2-eb14e02f21c8
status: test
description: Detects AS-REP roasting is an attack that is often-overlooked. It is
  not very common as you have to explicitly set accounts that do not require pre-authentication.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1069.002/T1069.002.md#atomic-test-11---get-aduser-enumeration-using-useraccountcontrol-flags-as-rep-roasting
- https://shellgeek.com/useraccountcontrol-flags-to-manipulate-properties/
author: frack113
date: 2022-03-17
tags:
- attack.discovery
- attack.t1033
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
        # 4194304 DONT_REQ_PREAUTH
    ScriptBlockText|contains|all:
    - 'Get-ADUser'
    - '-Filter'
    - 'useraccountcontrol'
    - '-band'
    - '4194304'
  condition: selection
falsepositives:
- Legitimate PowerShell scripts
level: medium
notes: |
  ### Technical Context
  This Sigma rule aims to detect the enumeration of Active Directory (AD) users using specific UserAccountControl flags, particularly in the context of an AS-REP roasting attack. AS-REP roasting is a stealthy technique that targets accounts configured without the requirement for pre-authentication, making them susceptible to enumeration via PowerShell. The rule looks for PowerShell script blocks that contain the `Get-ADUser` cmdlet, specifically searching for the use of the `-Filter` parameter along with the `useraccountcontrol` flags via a bitwise AND operation (`-band`) with the value 4194304, which signifies accounts that do not require pre-authentication. The rule utilizes logs generated by PowerShell script block logging, as it is crucial for capturing the specific command and parameters used. This detection aligns with the MITRE ATT&CK technique T1033 (System Owner/User Discovery) under the Discovery tactic.
  ### Investigation Steps
  - **Review PowerShell Logs:** Check the PowerShell script block logs for instances where the detected command was executed, focusing on the user and timestamp for context about the potential activity.
  - **Cross-reference AD Logs:** Investigate Active Directory event logs to see if there are related authentication attempts or unusual login behavior associated with the accounts found during enumeration.
  - **Analyze User Changes:** Review any recent changes to user account settings or security-related attributes, which could indicate a compromise or questionable administrative activity.
  - **Evaluate Network Traffic:** Use EDR/Network Monitoring tools to observe any unusual outbound connections from the affected systems, especially towards known adversary IPs or during odd hours.
  ### Prioritization
  The alert is prioritized as medium severity due to the specific targeting of accounts that may indicate preparatory actions for a credential-based attack, necessitating further investigation to assess the overall security posture and potential exposure.
  ### Blind Spots and Assumptions
  This detection may not fire if PowerShell script block logging is not enabled on the monitored systems. Additionally, legitimate administrative scripts may trigger false positives, leading to confusion. The rule relies on specific scripts' execution; thus, if an adversary employs a different method to enumerate users or uses obfuscation techniques, the detection may fail. The absence of PowerShell execution or alteration of account policies, like toggling pre-authentication requirements, could also lead to non-detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
