title: WMIC Unquoted Services Path Lookup - PowerShell
id: 09658312-bc27-4a3b-91c5-e49ab9046d1b
related:
- id: 68bcd73b-37ef-49cb-95fc-edc809730be6
  type: similar
status: test
description: Detects known WMI recon method to look for unquoted service paths, often
  used by pentest inside of powershell scripts attackers enum scripts
references:
- https://github.com/nccgroup/redsnarf/blob/35949b30106ae543dc6f2bc3f1be10c6d9a8d40e/redsnarf.py
- https://github.com/S3cur3Th1sSh1t/Creds/blob/eac23d67f7f90c7fc8e3130587d86158c22aa398/PowershellScripts/jaws-enum.ps1
- https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-06-20
modified: 2022-11-25
tags:
- attack.execution
- attack.t1047
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - 'Get-WmiObject '
    - 'gwmi '
    ScriptBlockText|contains|all:
    - ' Win32_Service '
    - 'Name'
    - 'DisplayName'
    - 'PathName'
    - 'StartMode'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The WMIC Unquoted Services Path Lookup rule detects the execution of PowerShell commands that utilize Windows Management Instrumentation (WMI) to enumerate unquoted service paths. Attackers may exploit unquoted service paths as they can lead to privilege escalation when service executables are not properly quoted. This rule specifically looks for usage of the `Get-WmiObject` or its alias `gwmi` in PowerShell scripts that include references to the `Win32_Service` class along with attributes such as `Name`, `DisplayName`, `PathName`, and `StartMode`. Data sources involved in this detection include PowerShell script block logs, which must be enabled in order to capture the relevant command executions.
  ### Investigation Steps
  - Check the related PowerShell script logs in EDR tools for any instances of the `Get-WmiObject` or `gwmi` commands, particularly those referencing `Win32_Service`.
  - Review the execution timestamps and user context to identify which accounts are executing these commands; look for any anomalies or accounts with excessive permissions.
  - Analyze the related UI logs and behavior for the identified scripts to ascertain whether further malicious activity is connected to the execution of the PowerShell commands.
  - Correlate findings with other logs from Firewall or Proxy services to explore outbound connections initiated as a result of the script execution, especially if suspicious external communication is observed.
