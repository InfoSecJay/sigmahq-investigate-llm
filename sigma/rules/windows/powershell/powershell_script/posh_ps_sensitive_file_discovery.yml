title: Powershell Sensitive File Discovery
id: 7d416556-6502-45b2-9bad-9d2f05f38997
related:
- id: d23f2ba5-9da0-4463-8908-8ee47f614bb9
  type: derived
status: test
description: Detect adversaries enumerate sensitive files
references:
- https://twitter.com/malmoeb/status/1570814999370801158
author: frack113
date: 2022-09-16
tags:
- attack.discovery
- attack.t1083
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_action:
    ScriptBlockText|contains:
    - ls
    - get-childitem
    - gci
  selection_recurse:
    ScriptBlockText|contains: '-recurse'
  selection_file:
    ScriptBlockText|contains:
    - '.pass'
    - '.kdbx'
    - '.kdb'
  condition: all of selection_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The "Powershell Sensitive File Discovery" Sigma rule is designed to detect potential reconnaissance activity by adversaries attempting to enumerate sensitive files on Windows systems. The rule specifically looks for PowerShell commands that are often used for file enumeration, such as `ls`, `get-childitem`, and its alias `gci`. Additionally, it examines script blocks for patterns that include the `-recurse` parameter, which would allow an attacker to search through directories and find sensitive files, particularly those with extensions such as `.pass`, `.kdbx`, and `.kdb`. 
  To effectively monitor for these actions, the rule utilizes Windows PowerShell script block logging, which must be enabled in the environment. This logging provides insight into the commands executed via PowerShell, allowing the detection of potentially malicious activity. The identified actions map to the MITRE ATT&CK framework under the Discovery tactic (T1083).
  ### Investigation Steps
  - **Check PowerShell Logs**: Review the related PowerShell script block logs in your SIEM for instances where the detected commands were executed, including their parameters and the execution context.
  - **Evaluate Process Creation**: Use EDR tools to analyze the process creation events around the time of the PowerShell command execution to ensure the legitimacy of the session and user running these commands.
  - **Investigate File Access**: Query filesystem change logs for any access to sensitive file types, paying attention to the directories and files mentioned in the PowerShell commands detected.
  - **Correlate with User Activity**: Look into user activity logs to discern whether the user who executed the commands has a legitimate need for accessing sensitive files or whether further investigation is warranted.
  ### Prioritization
  This alert is classified as medium severity due to the sensitive nature of the file extensions involved, which could indicate preparatory steps by adversaries. Such findings should be prioritized for review as they may signify an elevated risk of data exfiltration or unauthorized access.
  ### Blind spots and Assumptions
  One potential blind spot for this rule is the requirement for PowerShell script block logging to be enabled, which is not always the case in enterprise environments. Additionally, if an adversary uses obfuscation techniques or alternative methods to enumerate files without directly invoking these commands, the rule may fail to fire. It is also assumed that legitimate administrative users will not routinely use these commands indiscriminately for sensitive files, but misconfigurations or misinterpretations could lead to false positives.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
