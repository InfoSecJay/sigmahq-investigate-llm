title: Suspicious TCP Tunnel Via PowerShell Script
id: bd33d2aa-497e-4651-9893-5c5364646595
status: test
description: Detects powershell scripts that creates sockets/listeners which could
  be indicative of tunneling activity
references:
- https://github.com/Arno0x/PowerShellScripts/blob/a6b7d5490fbf0b20f91195838f3a11156724b4f7/proxyTunnel.ps1
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-07-08
tags:
- attack.command-and-control
- attack.t1090
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - '[System.Net.HttpWebRequest]'
    - 'System.Net.Sockets.TcpListener'
    - 'AcceptTcpClient'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The "Suspicious TCP Tunnel Via PowerShell Script" Sigma rule is designed to detect PowerShell scripts that create network sockets and listeners, which can be indicative of tunneling activities by threat actors. The rule explicitly looks for specific coding patterns within script blocks that include references to `[System.Net.HttpWebRequest]`, `System.Net.Sockets.TcpListener`, and `AcceptTcpClient`. When these elements are detected in PowerShell executed in the environment, it raises an alert. This monitoring relies heavily on Windows PowerShell Script Block Logging, which must be enabled for effective detection. This rule maps to the MITRE ATT&CK technique T1090 
  - "Communication Through Removable Media," as it identifies potential command and control activities.
  ### Investigation Steps
  - **Review PowerShell Execution Logs**: Check PowerShell script execution logs in Windows Event Logs to identify the specific script that triggered the alert, including time-stamps and user context.
    
  - **Analyze Network Connections**: Use EDR or network monitoring tools to verify if there are any active or recent network connections that correspond to the alert, focusing on unusual outbound traffic patterns or connections to untrusted IP addresses.
  - **Examine Associated Processes**: Investigate running processes on the affected system during the time of the alert to identify if any unauthorized or suspicious processes were initiated that may relate to the PowerShell script execution.
  - **Assess User Activity**: Review user account activities and behavior logs to ascertain if the account executing the PowerShell script has a history of legitimate use or if it appears to be compromised.
  ### Prioritization
  The alert is assigned a medium severity level due to the potential for misuse of PowerShell for tunneling and command and control purposes, which could lead to data exfiltration or additional compromise if left unchecked.
  ### Blind Spots and Assumptions
  This rule assumes that PowerShell Script Block Logging is enabled, which may not be the case in all environments. It may also fail to detect obfuscated or modified script patterns that do not adhere to the specified conditions. Additionally, if adversaries employ advanced techniques such as executing code in memory without writing to disk, this detection may not trigger. Understanding these limitations is crucial for a comprehensive security posture.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
