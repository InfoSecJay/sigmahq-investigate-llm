title: Suspicious TCP Tunnel Via PowerShell Script
id: bd33d2aa-497e-4651-9893-5c5364646595
status: test
description: Detects powershell scripts that creates sockets/listeners which could
  be indicative of tunneling activity
references:
- https://github.com/Arno0x/PowerShellScripts/blob/a6b7d5490fbf0b20f91195838f3a11156724b4f7/proxyTunnel.ps1
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-07-08
tags:
- attack.command-and-control
- attack.t1090
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - '[System.Net.HttpWebRequest]'
    - 'System.Net.Sockets.TcpListener'
    - 'AcceptTcpClient'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This detection rule monitors for suspicious PowerShell scripts that exhibit behavior consistent with TCP tunneling activities. Specifically, it looks for the presence of certain .NET classes like `System.Net.HttpWebRequest`, `System.Net.Sockets.TcpListener`, and the method `AcceptTcpClient`. When these elements are combined in a PowerShell script, it indicates that the script is likely trying to create sockets or listeners, which could be used to exfiltrate data or establish unauthorized remote connections. For this detection to function effectively, Script Block Logging must be enabled on the Windows host, allowing the capture and inspection of executed PowerShell scripts.
  The rule utilizes data sources such as PowerShell script execution logs, specifically focusing on the command text of the executed scripts to identify any potentially malicious activities. By identifying these specific components within scripts, the SOC can proactively intervene before any potential tunneling actions are executed.
  ### Investigation Steps
  - **Review PowerShell execution logs** to identify the specific script that triggered the alert. Cross-reference the script against known malicious scripts from threat intelligence sources.
  - **Examine the process details** related to the PowerShell execution, including parent-child process relationships, to assess whether the execution was part of a larger malicious activity.
  - **Check network traffic logs** for unusual outbound connections or attempts to connect to suspicious IP addresses associated with the identified PowerShell script activity.
  - **Analyze endpoint logs** for any alerts generated by EDR, focusing on behaviors indicative of tunneling or unusual data transmission patterns. This might include file activity or registry changes associated with the scriptâ€™s execution.
