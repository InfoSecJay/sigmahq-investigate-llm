title: PowerShell Get-Process LSASS in ScriptBlock
id: 84c174ab-d3ef-481f-9c86-a50d0b8e3edb
status: test
description: Detects a Get-Process command on lsass process, which is in almost all
  cases a sign of malicious activity
references:
- https://web.archive.org/web/20220205033028/https://twitter.com/PythonResponder/status/1385064506049630211
author: Florian Roth (Nextron Systems)
date: 2021-04-23
modified: 2022-12-25
tags:
- attack.credential-access
- attack.t1003.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains: 'Get-Process lsass'
  condition: selection
falsepositives:
- Legitimate certificate exports invoked by administrators or users (depends on processes
  in the environment - filter if unusable)
level: high
notes: |
  ### Technical Context
  This detection rule monitors Windows PowerShell activity, specifically targeting the `Get-Process` command being invoked with "lsass" as a parameter. The Local Security Authority Subsystem Service (LSASS) is responsible for enforcing the security policy on a Windows system, and accessing it is often a precursor to credential theft or further exploitation. When a script block containing the command `Get-Process lsass` is executed, it typically indicates an attempt to gather sensitive information, resulting in a high alert status. The required telemetry for this detection comes from Windows PowerShell Script Block Logging, which must be enabled to capture the necessary events. This detection aligns with the MITRE ATT&CK technique T1003.001 (Credential Dumping: LSASS Memory), as it highlights the potential risk associated with unauthorized access attempts to LSASS.
  ### Investigation Steps
  - **Review PowerShell Logs:** Check the PowerShell script block logs for the corresponding command execution timestamp to identify the user who executed it and the context of the execution.
  - **Correlate with Process Tree:** Use EDR tools to analyze the process tree around the time of the alert to determine if any other suspicious processes were initiated by the same user or process.
  - **Inspect User Activity:** Investigate user activity logs and context to assess whether this command could be part of legitimate administrative tasks or if it raises further red flags.
  - **Check for Related Network Activity:** Utilize log data from network monitoring tools to review for any outbound connections or suspicious activities following the command execution, particularly targeting known credential theft indicators.
  ### Prioritization
  The severity of this alert is rated as high due to the critical nature of LSASS in maintaining system security and the commonality of this technique in credential theft activities. Any alert triggered by the execution of this command necessitates immediate investigation to mitigate potential threats.
  ### Blind Spots and Assumptions
  This rule assumes that PowerShell Script Block Logging is enabled across the environment to capture relevant data. It may not fire in environments where this logging is disabled, thereby missing potentially malicious activities. Additionally, legitimate administrative usage of the `Get-Process lsass` command can lead to false positives if not properly filtered, as some system maintenance tasks could include accessing this process.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
