title: PowerShell Get-Process LSASS in ScriptBlock
id: 84c174ab-d3ef-481f-9c86-a50d0b8e3edb
status: test
description: Detects a Get-Process command on lsass process, which is in almost all
  cases a sign of malicious activity
references:
- https://web.archive.org/web/20220205033028/https://twitter.com/PythonResponder/status/1385064506049630211
author: Florian Roth (Nextron Systems)
date: 2021-04-23
modified: 2022-12-25
tags:
- attack.credential-access
- attack.t1003.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains: 'Get-Process lsass'
  condition: selection
falsepositives:
- Legitimate certificate exports invoked by administrators or users (depends on processes
  in the environment - filter if unusable)
level: high
notes: |
  ### Technical Context
  This Sigma rule identifies potentially malicious behavior by monitoring PowerShell script blocks for the execution of the command `Get-Process lsass`. The Local Security Authority Subsystem Service (LSASS) process in a Windows environment is critical for handling security policies and user authentication. Hence, any attempt to access this process using PowerShell could indicate an attackerâ€™s interest in retrieving sensitive information such as credentials. The rule requires that Script Block Logging is enabled to capture relevant events, as the command parameters are logged within the script block detail. This allows for effective detection of suspicious activities involving the LSASS process, which is commonly targeted by credential dumping techniques.
  ### Investigation Steps
  - Review alerts related to the execution of PowerShell commands, focusing particularly on the `Get-Process lsass` instances, using EDR solutions to analyze the context and origin of the execution.
  - Cross-reference script block logs with user activity logs in the SIEM to assess whether the command was initiated by an authorized user or if it represents unexpected behavior.
  - Examine network traffic logs through NDR solutions to identify any suspicious outbound connections that could signal data exfiltration post-credential access.
  - Utilize endpoint detection logs to check for any processes that were running concurrently with the PowerShell command to evaluate if there is a broader pattern of malicious activity on the host.
