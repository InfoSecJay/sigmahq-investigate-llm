title: Execute Invoke-command on Remote Host
id: 7b836d7f-179c-4ba4-90a7-a7e60afb48e6
status: test
description: Adversaries may use Valid Accounts to interact with remote systems using
  Windows Remote Management (WinRM). The adversary may then perform actions as the
  logged-on user.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.006/T1021.006.md#atomic-test-2---invoke-command
- https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/invoke-command?view=powershell-7.4
author: frack113
date: 2022-01-07
tags:
- attack.lateral-movement
- attack.t1021.006
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_cmdlet:
    ScriptBlockText|contains|all:
    - 'invoke-command '
    - ' -ComputerName '
  condition: selection_cmdlet
falsepositives:
- Legitimate script
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the execution of the PowerShell cmdlet `Invoke-Command`, which can be used by adversaries to execute commands on remote systems using Windows Remote Management (WinRM). The rule specifically looks for the presence of the string "invoke-command" and the associated parameter "-ComputerName" within the script block text, as this indicates an attempt to target a remote system. The ability to remotely manage systems can be exploited by adversaries with valid accounts to conduct lateral movement across the network, potentially leading to unauthorized actions by the logged-on user. Detection relies on Windows PowerShell Script Block Logging, which needs to be enabled for this rule to function effectively. The relevant MITRE ATT&CK tactic associated with this rule is "Lateral Movement," specifically under the technique "T1021.006: Remote Services 
  - Windows Remote Management." 
  ### Investigation Steps
  - **Review PowerShell Logs**: Check PowerShell script block logs within the designated Windows Security Event Logs to identify instances of the `Invoke-Command` cmdlet being executed and to understand the context in which it was run.
  - **Investigate Network Connections**: Utilize EDR tools to examine any corresponding network connections that match the time frame of the alert, focusing on connections established to remote hosts that align with `-ComputerName` targets.
  - **Assess User Account Activity**: Review the activity of the user account that executed the `Invoke-Command` for any suspicious or unauthorized actions, leveraging SIEM capabilities to correlate events related to this user.
  - **Cross-reference Remote Management Usage**: Analyze Windows Event Logs to determine if the execution of the PowerShell command correlates with legitimate administrative actions, or if there are anomalies that suggest malicious intent.
  ### Prioritization
  Alerts generated from this rule should be considered medium priority, as they indicate potentially unauthorized remote interactions that could signify lateral movement within the network, but do not necessarily confirm malicious intent by themselves.
  ### Blind Spots and Assumptions
  This rule may not fire if PowerShell Script Block Logging is disabled on target machines, as the relevant logs would not be generated. Additionally, legitimate administrative activities using `Invoke-Command` by authorized users may generate false positives, complicating investigations. Adversaries could also use tactics to obfuscate their use of this cmdlet, such as encoding commands or utilizing alternate shells if access to PowerShell is restricted.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and usability, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
