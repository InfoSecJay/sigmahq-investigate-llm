title: PowerShell Set-Acl On Windows Folder - PsScript
id: 3bf1d859-3a7e-44cb-8809-a99e066d3478
related:
- id: cae80281-ef23-44c5-873b-fd48d2666f49     # PsScript Low
  type: derived
- id: 0944e002-e3f6-4eb5-bf69-3a3067b53d73     # ProcCreation Susp
  type: derived
- id: bdeb2cff-af74-4094-8426-724dc937f20a     # ProcCreation Low
  type: derived
status: test
description: Detects PowerShell scripts to set the ACL to a file in the Windows folder
references:
- https://github.com/redcanaryco/atomic-red-team/blob/74438b0237d141ee9c99747976447dc884cb1a39/atomics/T1505.005/T1505.005.md
- https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-acl?view=powershell-5.1
author: frack113, Nasreddine Bencherchali (Nextron Systems)
date: 2023-07-18
tags:
- attack.defense-evasion
- attack.t1222
logsource:
  product: windows
  category: ps_script
  definition: bade5735-5ab0-4aa7-a642-a11be0e40872
detection:
  selection_cmdlet:
    ScriptBlockText|contains|all:
    - 'Set-Acl '
    - '-AclObject '
  selection_paths:
        # Note: Add more suspicious paths
    ScriptBlockText|contains:
    - '-Path "C:\Windows'
    - '-Path "C:/Windows'
    - "-Path 'C:\\Windows"
    - "-Path 'C:/Windows"
    - '-Path C:\\Windows'
    - '-Path C:/Windows'
    - '-Path $env:windir'
    - '-Path "$env:windir'
    - "-Path '$env:windir"
  selection_permissions:
        # Note: Add more suspicious permissions
    ScriptBlockText|contains:
    - 'FullControl'
    - 'Allow'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule monitors PowerShell command activity specifically focusing on the use of the `Set-Acl` cmdlet, which modifies Access Control Lists (ACLs) for files or folders in Windows. The primary objective of this rule is to identify potentially malicious attempts to alter permissions on critical Windows system folders, enabling unauthorized access or privilege escalation by adversaries. The rule checks the `ScriptBlockText` for specific keywords associated with the `Set-Acl` command and looks for altered permissions and paths that indicate targeting the Windows folder (e.g., `C:\Windows`, `$env:windir`). This activity is relevant under the MITRE ATT&CK tactic of **Defense Evasion** and the technique **T1222**.
  The telemetry involved in this detection comes exclusively from PowerShell script execution logs on Windows, hence analysts will primarily utilize PowerShell-related event logs, specifically focusing on Sysmonâ€™s capabilities. These logs capture executed commands and parameters, allowing for the identification of suspicious behavior regarding permissions changes on system-critical files.
  ### Investigation Steps
  - **Check EDR Alerts:** Review EDR alerts related to PowerShell activity around the time of the detection. Look for any process executions that are unusual or not commonly observed.
  - **Analyze Process Creation Logs:** Investigate the process creation logs for the PowerShell executable that triggered the alert. Identify the parent process and any command-line arguments used.
  - **Inspect File Permissions:** Using File Explorer or command-line tools, inspect the ACLs of the targeted folder (C:\Windows) to determine if any unexpected changes were made. This confirms whether the command was successfully executed.
  - **Review Related Network Activity:** If applicable, check for any network connections initiated by the same process or related processes that could indicate further malicious activity following the ACL change.
  ### Prioritization
  Given the sensitive nature of the Windows folder and the potential implications of unauthorized ACL modifications, this alert is prioritized as **high severity**. Any alteration in permissions could potentially enable attackers to escalate privileges, leading to greater access and control over compromised systems.
  ### Blind Spots and Assumptions
  It is essential to recognize that this rule may not fire in instances where the attacker uses obfuscation techniques that evade detection. Additionally, some benign administrative activities may inadvertently trigger this rule, particularly in environments where legitimate PowerShell scripting is commonplace. This could lead to possible false positives, making it crucial for investigators to contextualize findings with accompanying event data. Moreover, if PowerShell has been disabled or if logging is insufficient, the detection may also fail. Analysts should consider environments that implement scripting restrictions as these might not generate the expected telemetry.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
