title: Potential Suspicious PowerShell Keywords
id: 1f49f2ab-26bc-48b3-96cc-dcffbc93eadf
status: test
description: Detects potentially suspicious keywords that could indicate the use of
  a PowerShell exploitation framework
references:
- https://posts.specterops.io/entering-a-covenant-net-command-and-control-e11038bcf462
- https://github.com/PowerShellMafia/PowerSploit/blob/d943001a7defb5e0d1657085a77a0e78609be58f/CodeExecution/Invoke-ReflectivePEInjection.ps1
- https://github.com/hlldz/Phant0m/blob/30c2935d8cf4aafda17ee2fab7cd0c4aa9a607c2/old/Invoke-Phant0m.ps1
- https://gist.github.com/MHaggis/0dbe00ad401daa7137c81c99c268cfb7
author: Florian Roth (Nextron Systems), Perez Diego (@darkquassar), Tuan Le (NCSGroup)
date: 2019-02-11
modified: 2023-04-21
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - 'System.Reflection.Assembly.Load($'
    - '[System.Reflection.Assembly]::Load($'
    - '[Reflection.Assembly]::Load($'
    - 'System.Reflection.AssemblyName'
    - 'Reflection.Emit.AssemblyBuilderAccess'
    - 'Reflection.Emit.CustomAttributeBuilder'
    - 'Runtime.InteropServices.UnmanagedType'
    - 'Runtime.InteropServices.DllImportAttribute'
    - 'SuspendThread'
    - 'rundll32'
            # - 'FromBase64'
            # - 'Invoke-WMIMethod' # Prone to FP
            # - 'http://127.0.0.1' # Prone to FP
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule aims to detect potentially suspicious PowerShell keywords that could indicate the use of a PowerShell exploitation framework. It focuses on monitoring PowerShell script block logs, specifically looking for certain keywords associated with reflective DLL injection and dynamic assembly loading, which are common tactics employed by adversaries during attacks. The rule identifies keywords such as `System.Reflection.Assembly.Load($`, `rundll32`, and various reflection-related types from the .NET framework, which could indicate that the PowerShell environment is being exploited. By analyzing the ScriptBlockText field, which contains the actual PowerShell commands being executed, the rule can trigger alerts when it detects any of these suspicious indicators. This detection aligns with the MITRE ATT&CK technique T1059.001 (Command and Scripting Interpreter: PowerShell), highlighting its relevance in identifying advanced attack behaviors.
  ### Investigation Steps
  - **Review PowerShell Script Execution Logs**: Use your EDR or SIEM to search for recent executions of PowerShell scripts that triggered this alert and examine the complete logs for context around the commands executed.
  - **Analyze Process Trees**: Check the process creation logs to identify parent and child processes associated with the execution of suspicious PowerShell scripts to understand the context of the execution.
  - **Cross-reference with Other Alerts**: Check for any related security alerts such as EDR detections for unusual system behavior or network connections established from the executing process to determine if there is a broader incident.
  - **Investigate System Configuration**: Validate that Script Block Logging is enabled on affected systems, as the effectiveness of this rule relies on having it configured correctly within the PowerShell environment.
  ### Prioritization
  Given that this rule detects potential exploitation techniques often used by threat actors, alerts fired by this detection should be treated with a medium severity level. It ideally prompts immediate investigation due to the possibility of exploitation or compromise of the environment.
  ### Blind spots and Assumptions
  There are several assumptions that can affect the efficacy of this rule. First, if Script Block Logging is not enabled on target systems, this rule will not generate alerts despite the potential for malicious activity. Additionally, the rule may yield false positives, as not all instances of these keywords indicate malicious intent; they could arise from legitimate administrative activities. Lastly, threat actors could employ obfuscation techniques or custom scripting methods to evade detection by avoiding these specific keywords.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and reliability, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
