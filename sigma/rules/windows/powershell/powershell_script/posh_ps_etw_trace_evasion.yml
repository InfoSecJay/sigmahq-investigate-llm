title: Disable of ETW Trace - Powershell
id: 115fdba9-f017-42e6-84cf-d5573bf2ddf8
related:
- id: a238b5d0-ce2d-4414-a676-7a531b3d13d6
  type: derived
status: test
description: Detects usage of powershell cmdlets to disable or remove ETW trace sessions
references:
- https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-06-28
modified: 2022-11-25
tags:
- attack.defense-evasion
- attack.t1070
- attack.t1562.006
- car.2016-04-002
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_pwsh_remove:     # Autologger provider removal
    ScriptBlockText|contains: 'Remove-EtwTraceProvider '
  selection_pwsh_set:     # Provider “Enable” property modification
    ScriptBlockText|contains|all:
    - 'Set-EtwTraceProvider '
    - '0x11'
  condition: 1 of selection*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule is designed to identify potential tampering with Event Tracing for Windows (ETW) by monitoring the execution of specific PowerShell cmdlets used to disable or modify trace sessions. The rule focuses on two primary actions: the removal of ETW trace providers using the `Remove-EtwTraceProvider` cmdlet and altering the provider state with the `Set-EtwTraceProvider` cmdlet, particularly when the command includes the notation `0x11`, which indicates disabling a trace. The rule relies on PowerShell script block logging as a data source, capturing command lines executed within PowerShell. When malicious actors attempt to obscure their tracks or disable logging to evade detection, this rule helps identify those activities. This behavior corresponds to MITRE ATT&CK techniques `T1070` (Indicator Removal on Host) and `T1562.006` (Disable Security Tools).
  ### Investigation Steps
  - **Check PowerShell Logs**: Review PowerShell script block logs to examine the executed commands and confirm the presence of `Remove-EtwTraceProvider` or `Set-EtwTraceProvider` commands.
  - **Correlate with EDR Alerts**: Utilize EDR to investigate any associated alerts that may indicate lateral movement or other suspicious activities tied to the timeframe of the detected command usage.
  - **Examine Event Logs**: Look at Windows Security, System, or Application logs for events that indicate other possible manipulations or security incidents around the time of the suspicious PowerShell execution.
  - **Analyze Network Activity**: Inspect network connection logs for unusual outbound traffic or communication with potentially malicious destinations that could indicate an ongoing threat posture.
  ### Prioritization
  This alert is categorized as high severity due to its association with disabling security features that protect against detection and could signify an active intrusion or malicious intent to cover tracks after a security breach.
  ### Blind Spots and Assumptions
  This rule assumes that PowerShell script block logging is enabled; if it is not, the detection will fail, leaving a blind spot for malicious activities. Additionally, adversaries may use obfuscation techniques to avoid triggering the rule, or they may leverage alternate methods that do not involve the specified cmdlets. These factors could result in a failure to detect attempts to tamper with ETW.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and reliability, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
