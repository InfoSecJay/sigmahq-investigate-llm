title: PowerShell Write-EventLog Usage
id: 35f41cd7-c98e-469f-8a02-ec4ba0cc7a7e
status: test
description: Detects usage of the "Write-EventLog" cmdlet with 'RawData' flag. The
  cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve
  them later for later use
references:
- https://www.blackhillsinfosec.com/windows-event-logs-for-red-teams/
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-08-16
tags:
- attack.defense-evasion
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - 'Write-EventLog'
    - '-RawData '
  condition: selection
falsepositives:
- Legitimate applications writing events via this cmdlet. Investigate alerts to determine
  if the action is benign
level: medium
notes: |
  ### Technical Context
  This detection rule targets the usage of the PowerShell cmdlet `Write-EventLog` with the 'RawData' flag, which is significant in the context of evasion tactics used by malicious actors. By leveraging this cmdlet, adversaries can write custom entries to the Windows Event Log, potentially embedding malicious payloads that can be retrieved later, thereby evading detection methods reliant on standard logging practices. The main data sources for this detection are the PowerShell script block logs, which capture the execution of PowerShell commands, including command text and parameters. Therefore, it is essential for Script Block Logging to be enabled in the environment for this rule to function effectively. This behavior aligns with the MITRE ATT&CK tactic of Defense Evasion (ATT&CK ID: T1070), where threats attempt to manipulate or modify logging mechanisms to hide their activities.
  ### Investigation Steps
  - **Verify the PowerShell Execution Context:** Check the context in which the `Write-EventLog` command was executed (e.g., user account, script path) using EDR tools to determine if it was part of legitimate administrative tasks or potentially malicious behavior.
  - **Inspect Related Event Logs:** The event logs (Security, Application, and System) might contain entries generated by the use of `Write-EventLog`. Look for anomalies or suspicious entries that align with the cmdlet's execution timing.
  - **Cross-Reference with Other Logs:** Utilize Sysmon and Windows Event Logs to look for additional suspicious activities, such as unusual process creation or networking activity that may be associated with the same user session or time frame.
  - **Examine Script Block Logging:** Investigate the specific script block that triggered the alert to analyze the entire context of the executed command, and determine if it signifies planned evasion activities.
  ### Prioritization
  The alert is classified as medium priority because, while the use of `Write-EventLog` with the 'RawData' flag is a notable indicator of potential malicious intent, it could also originate from legitimate administrative operations. Therefore, thorough investigation is required to assess the severity of the activity.
  ### Blind Spots and Assumptions
  This detection rule assumes that Script Block Logging is properly configured and enabled across all relevant systems; if it is not enabled, the rule may not trigger. Additionally, legitimate applications may use `Write-EventLog` for benign purposes, leading to false positives. Adversaries may also employ various techniques to obfuscate their use of PowerShell, such as encoding commands or using alternative methods for logging, which could defeat this detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
