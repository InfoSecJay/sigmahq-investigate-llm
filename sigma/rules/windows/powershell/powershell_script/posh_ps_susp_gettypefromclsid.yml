title: Suspicious GetTypeFromCLSID ShellExecute
id: 8bc063d5-3a3a-4f01-a140-bc15e55e8437
status: test
description: Detects suspicious Powershell code that execute COM Objects
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.015/T1546.015.md#atomic-test-2---powershell-execute-com-object
author: frack113
date: 2022-04-02
tags:
- attack.privilege-escalation
- attack.persistence
- attack.t1546.015
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - '::GetTypeFromCLSID('
    - '.ShellExecute('
  condition: selection
falsepositives:
- Legitimate PowerShell scripts
level: medium
notes: |
  ### Technical Context
  This detection rule focuses on identifying potentially malicious PowerShell scripts that utilize the `GetTypeFromCLSID` method in conjunction with the `ShellExecute` function. These methods can be exploited by adversaries to execute COM objects, which may be used to escalate privileges, establish persistence, or perform other malicious activities. By monitoring `ScriptBlockText` logs, specifically looking for scripts that include both `GetTypeFromCLSID(` and `.ShellExecute(`, we can effectively flag suspicious behavior indicative of attempts to execute unauthorized commands. 
  The rule utilizes Windows event logging, particularly capped at the PowerShell script level, and has a prerequisite that 'Script Block Logging' be enabled to capture script content. This aligns with the MITRE ATT&CK framework, specifically technique T1546.015, which relates to the execution of malicious scripts through COM object instantiation.
  ### Investigation Steps
  - **Review the PowerShell Logs**: Utilize the EDR solution to filter PowerShell script logs for the specific execution time and user account associated with the alert to determine the context of the executed script.
  - **Analyze Process Creation Events**: Correlate the alert with Windows Security Event logs to examine any related process creation events to understand if additional malicious processes were spawned concurrently.
  - **Investigate Network Activity**: Use the network connection logs to identify any outbound connections made by the process, which could indicate data exfiltration or communication with a command-and-control server.
  - **Check for Anomalous Behavior**: Look for any signs of privilege escalation or additional persistence mechanisms in the altered registry keys or running services that may indicate a larger compromise.
  ### Prioritization
  The alert is classified as medium severity because while the presence of PowerShell exploiting COM objects is concerning and warrants investigation, legitimate administrative tasks can sometimes trigger similar alerts. Therefore, further context is necessary to determine the real threat level.
  ### Blind Spots and Assumptions
  This rule relies on the assumption that Script Block Logging is enabled, which may not always be the case in all environments. It may not fire if an attacker uses obfuscation techniques to disguise the command, or if the PowerShell execution is performed in an environment where logging is less comprehensive. Additionally, because legitimate PowerShell scripts can also utilize these methods, there is a possibility of false positives. Understanding the normal behavior of PowerShell usage in the network is crucial for effective interpretation of the alerts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
