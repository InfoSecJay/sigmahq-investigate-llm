title: Enumerate Credentials from Windows Credential Manager With PowerShell
id: 603c6630-5225-49c1-8047-26c964553e0e
status: test
description: |
  Adversaries may search for common password storage locations to obtain user credentials.
  Passwords are stored in several places on a system, depending on the operating system or application holding the credentials.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1555/T1555.md
author: frack113
date: 2021-12-20
modified: 2022-12-25
tags:
- attack.credential-access
- attack.t1555
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_cmd:
    ScriptBlockText|contains|all:
    - vaultcmd
    - '/listcreds:'
  selection_option:
    ScriptBlockText|contains:
    - 'Windows Credentials'
    - 'Web Credentials'
  condition: all of selection_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect unauthorized attempts to enumerate credentials stored in the Windows Credential Manager using PowerShell. It focuses on identifying PowerShell scripts where the commands include `vaultcmd` along with the parameter `/listcreds:`. Successful execution of such commands indicates an attempt to extract sensitive user credentials. The rule leverages Script Block Logging, which captures detailed information about executed PowerShell commands, including their structure and parameters, allowing analysts to identify malicious activity related to credential access. 
  The primary log source for this detection is Windows PowerShell script execution logs that track the commands and parameters used in PowerShell sessions. By examining these logs, defenders can identify any unauthorized access attempts to sensitive user credential storage.
  ### Investigation Steps
  - Review PowerShell logs for indications of the specific commands used (e.g., `vaultcmd /listcreds:`) by correlating with the user context under which they were executed.
  - Utilize an Endpoint Detection and Response (EDR) solution to gather information about the process that executed the suspicious PowerShell commands, including parent-child process relationships.
  - Check the Windows Credential Manager to assess if any credentials were accessed or compromised during the detected script execution.
  - Analyze user activity logs in the relevant systems to determine if there are any unusual authentication requests or connections from the affected user post-detection.
