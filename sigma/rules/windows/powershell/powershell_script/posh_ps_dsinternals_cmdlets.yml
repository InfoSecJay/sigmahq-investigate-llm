title: DSInternals Suspicious PowerShell Cmdlets - ScriptBlock
id: 846c7a87-8e14-4569-9d49-ecfd4276a01c
related:
- id: 43d91656-a9b2-4541-b7e2-6a9bd3a13f4e
  type: similar
status: experimental
description: |
  Detects execution and usage of the DSInternals PowerShell module. Which can be used to perform what might be considered as suspicious activity such as dumping DPAPI backup keys or manipulating NTDS.DIT files.
  The DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory. These include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.
references:
- https://github.com/MichaelGrafnetter/DSInternals/blob/39ee8a69bbdc1cfd12c9afdd7513b4788c4895d4/Src/DSInternals.PowerShell/DSInternals.psd1
author: Nasreddine Bencherchali (Nextron Systems)
date: 2024-06-26
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - 'Add-ADDBSidHistory'
    - 'Add-ADNgcKey'
    - 'Add-ADReplNgcKey'
    - 'ConvertFrom-ADManagedPasswordBlob'
    - 'ConvertFrom-GPPrefPassword'
    - 'ConvertFrom-ManagedPasswordBlob'
    - 'ConvertFrom-UnattendXmlPassword'
    - 'ConvertFrom-UnicodePassword'
    - 'ConvertTo-AADHash'
    - 'ConvertTo-GPPrefPassword'
    - 'ConvertTo-KerberosKey'
    - 'ConvertTo-LMHash'
    - 'ConvertTo-MsoPasswordHash'
    - 'ConvertTo-NTHash'
    - 'ConvertTo-OrgIdHash'
    - 'ConvertTo-UnicodePassword'
    - 'Disable-ADDBAccount'
    - 'Enable-ADDBAccount'
    - 'Get-ADDBAccount'
    - 'Get-ADDBBackupKey'
    - 'Get-ADDBDomainController'
    - 'Get-ADDBGroupManagedServiceAccount'
    - 'Get-ADDBKdsRootKey'
    - 'Get-ADDBSchemaAttribute'
    - 'Get-ADDBServiceAccount'
    - 'Get-ADDefaultPasswordPolicy'
    - 'Get-ADKeyCredential'         # Covers 'Get-ADKeyCredentialLink'
    - 'Get-ADPasswordPolicy'
    - 'Get-ADReplAccount'
    - 'Get-ADReplBackupKey'
    - 'Get-ADReplicationAccount'
    - 'Get-ADSIAccount'
    - 'Get-AzureADUserEx'
    - 'Get-BootKey'
    - 'Get-KeyCredential'
    - 'Get-LsaBackupKey'
    - 'Get-LsaPolicy'         # Covers 'Get-LsaPolicyInformation'
    - 'Get-SamPasswordPolicy'
    - 'Get-SysKey'
    - 'Get-SystemKey'
    - 'New-ADDBRestoreFromMediaScript'
    - 'New-ADKeyCredential'         # Covers 'New-ADKeyCredentialLink'
    - 'New-ADNgcKey'
    - 'New-NTHashSet'
    - 'Remove-ADDBObject'
    - 'Save-DPAPIBlob'
    - 'Set-ADAccountPasswordHash'
    - 'Set-ADDBAccountPassword'         # Covers 'Set-ADDBAccountPasswordHash'
    - 'Set-ADDBBootKey'
    - 'Set-ADDBDomainController'
    - 'Set-ADDBPrimaryGroup'
    - 'Set-ADDBSysKey'
    - 'Set-AzureADUserEx'
    - 'Set-LsaPolicy'         # Covers 'Set-LSAPolicyInformation'
    - 'Set-SamAccountPasswordHash'
    - 'Set-WinUserPasswordHash'
    - 'Test-ADDBPasswordQuality'
    - 'Test-ADPasswordQuality'
    - 'Test-ADReplPasswordQuality'
    - 'Test-PasswordQuality'
    - 'Unlock-ADDBAccount'
    - 'Write-ADNgcKey'
    - 'Write-ADReplNgcKey'
  condition: selection
falsepositives:
- Legitimate usage of DSInternals for administration or audit purpose.
level: high
notes: |
  ### Technical Context
  This detection rule identifies instances of the DSInternals PowerShell module being executed within a Windows environment, specifically through its script block logging capabilities. The rule targets several PowerShell cmdlets associated with potentially suspicious activities involving Active Directory (AD) and Azure Active Directory (AAD), including tasks such as dumping sensitive DPAPI backup keys, manipulating NTDS.DIT files, and conducting password auditing. By monitoring the specific cmdlet names in the script block text, the rule can signal when unauthorized or harmful activities are attempted using the DSInternals module. Required data sources for effective detection include PowerShell script block logs, which must be enabled to capture the relevant command usage.
  ### Investigation Steps
  - Investigate the specific PowerShell script block logs related to the alert, focusing on the context of the cmdlets being used to determine if they were executed by an authorized user.
  - Use your EDR solution to track the user activity and process creation leading up to the execution of the PowerShell command, identifying any potential signs of compromise or misuse.
  - Review any related logs from user activity, such as VPN logs or proxy logs, to assess if there was unusual access or data exfiltration occurring around the time of the alert.
  - Check for other security alerts within the SIEM that might correlate with the detected activity, aiming to build a full timeline of events and user behavior prior to the usage of the DSInternals module.
