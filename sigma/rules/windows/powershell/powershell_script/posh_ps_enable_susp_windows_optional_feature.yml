title: Potential Suspicious Windows Feature Enabled
id: 55c925c1-7195-426b-a136-a9396800e29b
related:
- id: c740d4cf-a1e9-41de-bb16-8a46a4f57918
  type: similar
status: test
description: |
  Detects usage of the built-in PowerShell cmdlet "Enable-WindowsOptionalFeature" used as a Deployment Image Servicing and Management tool.
  Similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images
references:
- https://learn.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature?view=windowsserver2022-ps
- https://learn.microsoft.com/en-us/windows/win32/projfs/enabling-windows-projected-file-system
- https://learn.microsoft.com/en-us/windows/wsl/install-on-server
author: frack113
date: 2022-09-10
modified: 2022-12-29
tags:
- attack.defense-evasion
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_cmd:
    ScriptBlockText|contains|all:
    - 'Enable-WindowsOptionalFeature'
    - '-Online'
    - '-FeatureName'
  selection_feature:
        # Add any insecure/unusual windows features to your env
    ScriptBlockText|contains:
    - 'TelnetServer'
    - 'Internet-Explorer-Optional-amd64'
    - 'TFTP'
    - 'SMB1Protocol'
    - 'Client-ProjFS'
    - 'Microsoft-Windows-Subsystem-Linux'
  condition: all of selection_*
falsepositives:
- Legitimate usage of the features listed in the rule.
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Potential Suspicious Windows Feature Enabled" focuses on detecting the usage of the PowerShell cmdlet `Enable-WindowsOptionalFeature`, commonly used in the Deployment Image Servicing and Management (DISM) context. This cmdlet allows users to manage various Windows features, including enabling or disabling specific capabilities within the operating system. The rule specifically watches for script block logging of PowerShell commands that include `-Online` alongside any reference to potentially insecure Windows features, such as `TelnetServer`, `Internet-Explorer-Optional-amd64`, `TFTP`, `SMB1Protocol`, `Client-ProjFS`, and `Microsoft-Windows-Subsystem-Linux`. 
  The detection relies on Windows PowerShell's script block logging, which must be enabled in the environment for the rule to function effectively. This ties into the MITRE ATT&CK framework under the tactic of Defense Evasion (T1211), as enabling potentially vulnerable features may indicate attempts to circumvent security controls or implement additional attack vectors.
  ### Investigation Steps
  - **Check PowerShell Activity:** Review PowerShell logs in your SIEM or EDR tool to find instances of the detected cmdlet usage, focusing on context surrounding any anomalies.
  - **Analyze Script Blocks:** Investigate the specific script blocks that triggered the alert to determine the nature and payload of the commands, looking for unusual feature names or parameters.
  - **Correlate with Environment Baselines:** Compare the detected cmdlet usage with known baselines for legitimate activity. Document any relevant changes in system configurations or feature states.
  - **Review User Behavior:** Investigate user accounts that executed the cmdlet for any suspicious activity, including abnormal logon times or locations, to assess if their actions align with typical behavior.
  ### Prioritization
  This alert is classified as medium severity because the use of the cmdlet to modify system features could indicate an attempt to exploit known vulnerabilities or evade existing security controls. While there may be legitimate scenarios for its use, the associated risks warrant prompt investigation.
  ### Blind Spots and Assumptions
  The rule may not fire if script block logging is not enabled across all endpoints, leaving gaps in visibility for PowerShell usage. Additionally, legitimate administrative tasks may trigger false positives, leading to potential alerts that could obscure genuine threats. It is assumed that users are familiar with secure practices regarding system configurations and that any unusual modifications would raise sufficient alarm without further investigation.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
