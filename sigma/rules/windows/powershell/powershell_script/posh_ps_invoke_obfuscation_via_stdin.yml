title: Invoke-Obfuscation Via Stdin - Powershell
id: 86b896ba-ffa1-4fea-83e3-ee28a4c915c7
status: test
description: Detects Obfuscated Powershell via Stdin in Scripts
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task28)
author: Nikita Nazarov, oscd.community
date: 2020-10-12
modified: 2024-04-05
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_4104:
    ScriptBlockText|re: '(?i)(set).*&&\s?set.*(environment|invoke|\$\{?input).*&&.*"'
  condition: selection_4104
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule, titled "Invoke-Obfuscation Via Stdin 
  - Powershell," is designed to identify obfuscated PowerShell scripts that utilize the standard input (stdin) feature. It works by analyzing the script block logging data to detect specific patterns in the PowerShell script commands, particularly those involving combined "set" commands with dynamic invocation elements. The rule employs a regular expression to recognize when environment variables or input parameters are being manipulated or invoked in an unusual way, which may indicate an attempt to circumvent security measures or stealthily execute malicious activities. This activity corresponds to the MITRE ATT&CK techniques related to defense evasion (T1027) and execution (T1059.001) where adversaries use obfuscation to mask their intentions.
  Critical technical data sources leveraged in this detection include PowerShell script block logs, specifically the `ScriptBlockText` field. The effective deployment of this rule is reliant on having PowerShell script block logging enabled on the monitored systems, allowing for comprehensive visibility into script execution patterns that may signify malicious behavior.
  ### Investigation Steps
  - **Check PowerShell Script Logs:** Validate the specific PowerShell script block logs for entries matching the regex outlined in the detection rule to confirm unusual command executions.
  - **Analyze Process Creation Events:** Use EDR tools to review associated process creation events occurring concurrently with the detected script to identify the parent process and any suspicious command lines used.
  - **Review Network Connections:** Assess network connection logs for outbound traffic tied to the timing of the PowerShell execution to determine if there's an attempt to retrieve additional payloads from external sources.
  - **Correlate with User Activity:** Examine user account activity and authentication logs to establish if the user executing the commands has exhibited any unusual behaviors preceding the alert, which may indicate account compromise.
  ### Prioritization
  This alert is classified as high severity due to the critical nature of obfuscated PowerShell executions often indicating active evasion tactics employed by threat actors, which can lead to further exploitation within the environment.
  ### Blind spots and Assumptions
  This rule may not fire if the script block logging feature is not enabled on monitored systems, potentially leaving a gap in visibility for PowerShell executions. Additionally, if an attacker uses fully coded or non-obfuscated scripts, they may bypass detection entirely. It's also assumed that traditional security controls (like endpoint protection) might not detect these obfuscated commands, thereby necessitating additional scrutiny of execution contexts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
