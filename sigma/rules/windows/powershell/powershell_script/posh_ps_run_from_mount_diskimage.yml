title: Suspicious Invoke-Item From Mount-DiskImage
id: 902cedee-0398-4e3a-8183-6f3a89773a96
status: test
description: Adversaries may abuse container files such as disk image (.iso, .vhd)
  file formats to deliver malicious payloads that may not be tagged with MOTW.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.005/T1553.005.md#atomic-test-2---mount-an-iso-image-and-run-executable-from-the-iso
- https://learn.microsoft.com/en-us/powershell/module/storage/mount-diskimage?view=windowsserver2022-ps
author: frack113
date: 2022-02-01
tags:
- attack.defense-evasion
- attack.t1553.005
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - 'Mount-DiskImage '
    - '-ImagePath '
    - Get-Volume
    - '.DriveLetter'
    - 'invoke-item '
    - '):\'
  condition: selection
falsepositives:
- Legitimate PowerShell scripts
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Suspicious Invoke-Item From Mount-DiskImage" is designed to detect potential abuse of PowerShell commands in an environment where disk images (like .iso and .vhd files) are being manipulated. Adversaries may exploit these container files to deliver malicious payloads that could circumvent traditional protections, particularly if those payloads are not flagged with the Mark of the Web (MOTW). This rule specifically looks for the invocation of the `Mount-DiskImage` PowerShell cmdlet along with subsequent use of `Invoke-Item` to run executables from mounted disk images. It utilizes data from PowerShell script block logging to gain visibility into potential abuses.
  This detection is tied to the MITRE ATT&CK tactical framework, specifically under tactics for **Defense Evasion** (tag: attack.defense-evasion) and utilizes the technique **Application Layer Protocol** (T1553.005), highlighting how attackers can use legitimate tools to achieve their malicious goals without raising immediate alarms.
  ### Investigation Steps
  - **Check PowerShell Logs**: Review PowerShell script block logs for related events and extract the complete command used, focusing on `Mount-DiskImage` and `Invoke-Item` to assess the context of execution.
  - **Analyze File and Network Activity**: Use EDR solutions to monitor file activity related to the mounted disk image and check for any unusual network connections originating from that process.
  - **Inspect the Mounted Image**: Use forensic tools to examine the content of the mounted disk image for any suspicious executables or scripts that might be attempting to execute.
  - **Verify File Hashes**: Cross-reference the executables identified in the mounted image with threat intelligence databases to determine if they are known malware or indicators of compromise.
  ### Prioritization
  The severity level is marked as medium due to the potential for malicious activity associated with the mounting and execution of files from foreign disk images, which may contain payloads designed for exploitation or reconnaissance.
  ### Blind Spots and Assumptions
  There are several recognized issues that may affect the efficacy of this rule. The rule assumes that PowerShell script block logging is enabled, as lack of logging would prevent detection. Additionally, legitimate administrative activities using `Mount-DiskImage` in trusted contexts may lead to false positives, potentially obscuring true incidents. Adversaries may also use various PowerShell obfuscation techniques to avoid detection, which could prevent this rule from firing.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and usefulness, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
