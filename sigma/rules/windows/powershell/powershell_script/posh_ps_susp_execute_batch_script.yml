title: Powershell Execute Batch Script
id: b5522a23-82da-44e5-9c8b-e10ed8955f88
status: test
description: |
  Adversaries may abuse the Windows command shell for execution.
  The Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems.
  The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands.
  Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops.
  Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple system
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.003/T1059.003.md#atomic-test-1---create-and-execute-batch-script
author: frack113
date: 2022-01-02
tags:
- attack.execution
- attack.t1059.003
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_start:
    ScriptBlockText|contains: Start-Process
  selection_batch:
    ScriptBlockText|contains:
    - '.cmd'
    - '.bat'
  condition: all of selection_*
falsepositives:
- Legitimate administration script
level: medium
notes: |
  n
  ### Technical Context
  The Sigma rule "Powershell Execute Batch Script" monitors PowerShell script execution for the use of batch files (.bat or .cmd) in conjunction with the `Start-Process` cmdlet. This monitoring focuses on the `ScriptBlockText` field to identify whether commands that make use of the Windows command shell to execute these batch files are being issued. Attackers may exploit this capability to run unauthorized scripts which could potentially result in data exfiltration or system compromise. By detecting instances of PowerShell using batch scripts, this rule is targeting MITRE ATT&CK tactic: Execution (T1059.003), specifically pertaining to how adversaries manipulate PowerShell for malicious activities.
  ### Investigation Steps
  - **Analyze PowerShell Logs:** Review Windows PowerShell logs, ensuring that Script Block Logging is enabled, to identify the full command context and any unusual parameters used in the execution.
  - **Correlate with EDR Alerts:** Check EDR alerts for any associated process creation events correlating with the batch file execution time to identify any potentially malicious processes.
  - **Examine Network Connections:** Utilize Network Detection and Response (NDR) tools to investigate any outgoing connections made by the running processes to ensure they are not contacting known malicious IP addresses.
  - **Review User Activity:** Look into user activity logs to determine if the batch execution aligns with legitimate administrative tasks or if itâ€™s an indicator of unauthorized access.
  ### Prioritization
  This alert is assigned a medium severity level as it indicates potential misuse of system resources through PowerShell, which can often precede more severe compromise or exploitation activities.
  ### Blind Spots and Assumptions
  The rule may not effectively capture all instances of batch script usage if Script Block Logging is not configured correctly in the PowerShell settings. Additionally, legitimate administrative scripts may generate false positives, which necessitates careful validation of detection instances. The effectiveness of this rule can also be diminished if an adversary employs obfuscation techniques or runs scripts in environments where PowerShell is disabled or restricted.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and relevance, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
