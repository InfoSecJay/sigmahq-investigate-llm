title: Powershell Detect Virtualization Environment
id: d93129cd-1ee0-479f-bc03-ca6f129882e3
status: test
description: |
  Adversaries may employ various system checks to detect and avoid virtualization and analysis environments.
  This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1497.001/T1497.001.md
- https://techgenix.com/malicious-powershell-scripts-evade-detection/
author: frack113, Duc.Le-GTSC
date: 2021-08-03
modified: 2022-03-03
tags:
- attack.defense-evasion
- attack.t1497.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_action:
    ScriptBlockText|contains:
    - Get-WmiObject
    - gwmi
  selection_module:
    ScriptBlockText|contains:
    - MSAcpi_ThermalZoneTemperature
    - Win32_ComputerSystem
  condition: all of selection*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to identify malicious PowerShell scripts that attempt to detect whether they are running in a virtualized environment, which is a common tactic used by adversaries to evade analysis tools. The rule focuses on the presence of specific commands and modules that are often employed in these checks, such as `Get-WmiObject` (or its alias `gwmi`), which can query system information that may indicate a virtual machine setup. To effectively detect these activities, the logging of PowerShell script blocks must be enabled to capture the relevant ScriptBlockText, allowing incident responders to analyze suspicious behavior indicative of potential evasion tactics when running within virtualized environments.
  ### Investigation Steps
  - Review the PowerShell logs in the SIEM to identify instances where the `Get-WmiObject` command is invoked along with any associated ScriptBlockText to understand the context of the execution.
  - Cross-reference the affected endpoints using your EDR solution to examine the processes surrounding the PowerShell execution and any related network activity.
  - Check for any abnormal or unauthorized software installations that might correlate with the identified PowerShell activities, utilizing both Endpoint and AV tools to validate system integrity.
  - If applicable, analyze cloud logs in AWS, GCP, or Azure to determine if there are any corresponding events or changes that align with the suspicious PowerShell executions noted in the initial investigation.
