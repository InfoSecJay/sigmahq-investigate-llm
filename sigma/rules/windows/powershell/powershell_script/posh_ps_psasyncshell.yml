title: PSAsyncShell - Asynchronous TCP Reverse Shell
id: afd3df04-948d-46f6-ae44-25966c44b97f
status: test
description: Detects the use of PSAsyncShell an Asynchronous TCP Reverse Shell written
  in powershell
references:
- https://github.com/JoelGMSec/PSAsyncShell
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-10-04
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains: 'PSAsyncShell'
  condition: selection
falsepositives:
- Unlikely
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "PSAsyncShell 
  - Asynchronous TCP Reverse Shell" is designed to detect instances of the PowerShell-based reverse shell known as PSAsyncShell, which facilitates asynchronous communication over TCP. The detection mechanism utilizes the Script Block Logging feature in PowerShell, which must be enabled for the rule to function effectively. When a PowerShell script that includes the string 'PSAsyncShell' is executed, this detection rule triggers an alert. This behavior falls into the MITRE ATT&CK technique T1059.001 (Command and Scripting Interpreter: Windows PowerShell), highlighting the execution of potentially harmful scripts that could compromise system integrity and data security. As attackers often leverage such tools to establish remote access to compromised environments, detecting and investigating these actions promptly is critical for safeguarding enterprise assets.
  ### Investigation Steps
  - **Review PowerShell Command Logs**: Check the PowerShell command logs for instances where the 'PSAsyncShell' script has been executed. Look for unusual command execution patterns or execution from non-standard user contexts.
    
  - **Analyze Process Creation Logs**: Utilize EDR tools to examine process creation logs for any unexpected PowerShell processes spawned in conjunction with network connections to unusual external IP addresses, indicating potential reverse shell activity.
  - **Inspect Network Connections**: Review network connection logs to identify outgoing TCP connections originating from the affected host targeting known malicious IPs or unusual ports, which may suggest reverse shell communications. 
  - **Validate Script Block Logging**: Ensure that Script Block Logging is indeed enabled on all applicable endpoints; if it is not enabled, the alert may not fire, and an investigation cannot be conducted effectively.
  ### Prioritization
  This alert is categorized as high severity, as detection of a reverse shell can indicate significant compromise within the network, enabling attackers persistent and covert access to systems. Timely investigation is essential to prevent data exfiltration and further intrusion.
  ### Blind Spots and Assumptions
  This detection rule relies heavily on PowerShell Script Block Logging being configured correctly within the target system. If this logging is disabled or inadequately configured, the rule will fail to detect its intended threats. Additionally, sophisticated adversaries might obfuscate their PowerShell commands or use alternative scripting languages that are not monitored by this rule, leading to undetected malicious activity. Analysts should remain vigilant for signs of lateral movement and unusual administrative behavior outside of typical norms.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and utility, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
