title: Zip A Folder With PowerShell For Staging In Temp - PowerShell Script
id: b7a3c9a3-09ea-4934-8864-6a32cacd98d9 # PowerShell Script
related:
- id: 71ff406e-b633-4989-96ec-bc49d825a412     # PowerShell Classic
  type: similar
- id: daf7eb81-35fd-410d-9d7a-657837e602bb     # PowerShell Module
  type: similar
- id: 85a8e5ba-bd03-4bfb-bbfa-a4409a8f8b98     # Process Creation
  type: similar
status: test
description: |
  Detects PowerShell scripts that make use of the "Compress-Archive" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.
  An adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1074.001/T1074.001.md
- https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a
author: Nasreddine Bencherchali (Nextron Systems), frack113
date: 2021-07-20
modified: 2023-12-18
tags:
- attack.collection
- attack.t1074.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - 'Compress-Archive -Path*-DestinationPath $env:TEMP'
    - 'Compress-Archive -Path*-DestinationPath*\AppData\Local\Temp\'
    - 'Compress-Archive -Path*-DestinationPath*:\Windows\Temp\'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  n
  ### Technical Context
  This detection rule identifies the use of PowerShell's `Compress-Archive` cmdlet in contexts where folders and files are being compressed to temporary locations often exploited by adversaries for data exfiltration. The rule specifically looks for instances where the `DestinationPath` parameter points to common temporary directories such as `$env:TEMP`, `AppData\Local\Temp`, or `C:\Windows\Temp`. These paths are often used by malicious actors to store compressed files prior to transferring them out of the network, allowing for quicker exfiltration of potentially sensitive information. The detection leverages PowerShell Script Block Logging to monitor the content of executed scripts and aligns with the MITRE ATT&CK tactic of Collection (TA0124) and its technique T1074.001 (Data Staged).
  ### Investigation Steps
  - **Check EDR Alerts:** Review endpoint detection and response alerts for any related suspicious activities or processes that were active during the time of the `Compress-Archive` detection.
  - **Examine PowerShell Command History:** Look for the execution history of PowerShell commands on affected hosts to establish the context and intent of the compression command.
  - **Analyze Temp Directory Contents:** Investigate the contents of the specified temporary directories to identify any unexpected files that have been compressed, particularly those that have been modified or created recently.
  - **Check Network Activity:** Review network logs to determine if there are any corresponding outbound connections or traffic patterns indicating potential data exfiltration associated with the compressed files.
  ### Prioritization
  Given that this rule is triggered by potential malicious activity aimed at compressing and possibly exfiltrating sensitive data, alerts are categorized with medium severity. Responders should prioritize these alerts to prevent possible data breaches.
  ### Blind Spots and Assumptions
  This rule relies on the availability of PowerShell Script Block Logging, which must be enabled for the rule to function effectively. There may be instances where legitimate applications or scripts perform similar actions without malicious intent, leading to false positives. Additionally, adversaries may use obfuscation techniques or modify script contents to evade detection, so ongoing updates to detection logic may be necessary to adapt to evolving threats.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
