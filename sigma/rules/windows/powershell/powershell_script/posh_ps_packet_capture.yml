title: Potential Packet Capture Activity Via Start-NetEventSession - ScriptBlock
id: da34e323-1e65-42db-83be-a6725ac2caa3
status: experimental
description: |
  Detects the execution of powershell scripts with calls to the "Start-NetEventSession" cmdlet. Which allows an attacker to start event and packet capture for a network event session.
  Adversaries may attempt to capture network to gather information over the course of an operation.
  Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/5f866ca4517e837c4ea576e7309d0891e78080a8/atomics/T1040/T1040.md#atomic-test-16---powershell-network-sniffing
- https://github.com/0xsyr0/Awesome-Cybersecurity-Handbooks/blob/7b8935fe4c82cb64d61343de1a8b2e38dd968534/handbooks/10_post_exploitation.md
- https://github.com/forgottentq/powershell/blob/9e616363d497143dc955c4fdce68e5c18d28a6cb/captureWindows-Endpoint.ps1#L13
author: frack113
date: 2024-05-12
tags:
- attack.credential-access
- attack.discovery
- attack.t1040
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains: 'Start-NetEventSession'
  condition: selection
falsepositives:
- Legitimate network diagnostic scripts.
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the execution of PowerShell scripts that invoke the `Start-NetEventSession` cmdlet, which is often used by attackers for unauthorized network traffic monitoring. By leveraging this cmdlet, an adversary can create a network event session to capture packets, which may expose sensitive data including user credentials transmitted over unencrypted protocols. The detection relies on PowerShell script block logs, specifically looking for script content that contains the term `Start-NetEventSession`. It is critical that Script Block Logging is enabled in the Windows environment for this rule to function effectively.
  ### Investigation Steps
  - **Review PowerShell Activity:** Utilize your EDR solution to analyze recent PowerShell command execution logs related to the incident, focusing on those that contain the `Start-NetEventSession` cmdlet.
  - **Check Network Traffic:** Examine network logs for unusual patterns or spikes in traffic, particularly focusing on unencrypted protocols that might have been targeted during the event session.
  - **Evaluate User Activities:** Investigate the user accounts associated with the execution of the suspicious scripts, looking at login times, locations, and applicable user permissions to assess potential insider threats.
  - **Correlate with Other Threat Signals:** Use your SIEM to correlate this alert with other security events across the environment, such as failed login attempts or unauthorized data access, to gauge the severity and potential impact of the detected activity.
