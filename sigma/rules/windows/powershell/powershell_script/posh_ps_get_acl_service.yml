title: Service Registry Permissions Weakness Check
id: 95afc12e-3cbb-40c3-9340-84a032e596a3
status: test
description: |
  Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.
  Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.
  Windows stores local service configuration information in the Registry under HKLM\SYSTEM\CurrentControlSet\Services
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1574.011/T1574.011.md#atomic-test-1---service-registry-permissions-weakness
- https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-acl?view=powershell-7.4
author: frack113
date: 2021-12-30
tags:
- attack.persistence
- attack.t1574.011
- stp.2a
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - 'get-acl'
    - 'REGISTRY::HKLM\SYSTEM\CurrentControlSet\Services\'
  condition: selection
falsepositives:
- Legitimate administrative script
level: medium
notes: |
  ### Technical Context
  The "Service Registry Permissions Weakness Check" rule is designed to detect potential malicious activity related to the manipulation of Windows service registry entries. Adversaries often exploit weaknesses in registry permissions to redirect service executables to their own payloads, allowing them to execute unauthorized code upon service start. This rule looks for instances of PowerShell scripts that contain the command `get-acl` targeting the registry path `HKLM\SYSTEM\CurrentControlSet\Services`, which is where Windows manages service configurations. By monitoring such activities, the SOC can identify attempts to check or modify the access controls for services, thereby indicating possible malicious intent in line with the MITRE ATT&CK technique T1574.011 (Hijack Execution Flow: DLL Side-Loading).
  ### Investigation Steps
  - **Review PowerShell Logs:** Analyze the PowerShell logs in Windows Event Logs to identify the execution context and the user associated with the script running the `get-acl` command.
  - **Check Registry Permissions:** Utilize tools like PowerShell's `Get-Acl` to verify if the permissions for any services in the specified registry path have been modified or appear overly permissive.
  - **Investigate Associated Services:** Cross-reference the affected services with known services in your environment to determine if any have been targeted or are at risk of being hijacked.
  - **Monitor Service Changes:** Use EDR solutions to monitor for any subsequent changes in service configurations or anomalies indicating unauthorized service execution.
  ### Prioritization
  This alert is deemed medium severity because it signifies a potential reconnaissance activity that may lead to service exploitation. Immediate investigation is warranted to mitigate risks associated with unauthorized service control.
  ### Blind Spots and Assumptions
  One potential blind spot is that legitimate administrative scripts may trigger the rule as false positives. This can happen if service administrators regularly use scripts that check service permissions. Furthermore, the rule assumes that Script Block Logging is constantly enabled, which might not always be the case; if not enabled, the detection might fail. Adversaries could also use alternative methods to manipulate service registry entries that do not invoke this command or bypass detection by using tools that do not leverage PowerShell.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and applicability, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
