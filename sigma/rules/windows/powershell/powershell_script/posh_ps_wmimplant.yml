title: WMImplant Hack Tool
id: 8028c2c3-e25a-46e3-827f-bbb5abf181d7
status: test
description: Detects parameters used by WMImplant
references:
- https://github.com/FortyNorthSecurity/WMImplant
author: NVISO
date: 2020-03-26
modified: 2022-12-25
tags:
- attack.execution
- attack.t1047
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - 'WMImplant'
    - ' change_user '
    - ' gen_cli '
    - ' command_exec '
    - ' disable_wdigest '
    - ' disable_winrm '
    - ' enable_wdigest '
    - ' enable_winrm '
    - ' registry_mod '
    - ' remote_posh '
    - ' sched_job '
    - ' service_mod '
    - ' process_kill '
            # - ' process_start '
    - ' active_users '
    - ' basic_info '
            # - ' drive_list '
            # - ' installed_programs '
    - ' power_off '
    - ' vacant_system '
    - ' logon_events '
  condition: selection
falsepositives:
- Administrative scripts that use the same keywords.
level: high
notes: |
  n
  ### Technical Context
  The WMImplant detection rule is designed to identify the use of specific parameters associated with the WMImplant hacking tool through PowerShell scripts. The rule monitors the `ScriptBlockText` for keywords commonly associated with WMImplant activities, such as 'change_user', 'command_exec', and 'registry_mod'. By leveraging PowerShell Script Block Logging, which must be enabled for this rule to function, the detection captures relevant script executions to detect potential malicious activities. This rule maps to the MITRE ATT&CK tactic of Execution, specifically the technique T1047 (Windows Management Instrumentation) and T1059.001 (PowerShell). The intent is to help SOC analysts and incident responders identify and mitigate the risks posed by the use of WMImplant within their environments.
  ### Investigation Steps
  - **Check Script Block Logs**: Review the PowerShell script block logs for the detected keywords to understand what scripts were executed and the context of their execution.
  - **Analyze EDR Alerts**: Inspect endpoint detection and response (EDR) alerts for any associated processes initiated around the same timestamp as the detected PowerShell script, looking for suspicious behaviors or indicators of compromise.
  - **Review Network Connections**: Examine network logs, particularly outgoing connections, to identify any anomalous communications that may be linked to WMImplant usage.
  - **Query User Activity**: Use Active Directory logs to track user activity and verify if there were any unauthorized account logins or changes that correspond with the execution of the detected scripts.
  ### Prioritization
  The alert is given a high severity level due to the potential for WMImplant to facilitate unauthorized access and control over systems, posing a significant security threat to the enterprise environment. Immediate investigation is necessary to mitigate risks of data exfiltration or further lateral movement within the network.
  ### Blind Spots and Assumptions
  This detection rule assumes that Script Block Logging is enabled; without it, the rule will not fire. Additionally, there may be blind spots for administrative scripts that also use the same keywords as WMImplant, potentially leading to false positives. Furthermore, adversaries might employ obfuscation techniques to camouflage their scripts or vary the keywords, which could prevent detection and allow malicious activities to persist without triggering alerts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
