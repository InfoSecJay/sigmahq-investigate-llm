title: Usage Of Web Request Commands And Cmdlets - ScriptBlock
id: 1139d2e2-84b1-4226-b445-354492eba8ba
related:
- id: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d
  type: derived
status: test
description: Detects the use of various web request commands with commandline tools
  and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs
references:
- https://4sysops.com/archives/use-powershell-to-download-a-file-with-http-https-and-ftp/
- https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell
author: James Pemberton / @4A616D6573
date: 2019-10-24
modified: 2023-01-10
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - '[System.Net.WebRequest]::create'
    - 'curl '
    - 'Invoke-RestMethod'
    - 'Invoke-WebRequest'
    - 'iwr '
    - 'Net.WebClient'
    - 'Resume-BitsTransfer'
    - 'Start-BitsTransfer'
    - 'wget '
    - 'WinHttp.WinHttpRequest'
  filter:
    Path|startswith: 'C:\Packages\Plugins\Microsoft.GuestConfiguration.ConfigurationforWindows\'
  condition: selection and not filter
falsepositives:
- Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Usage Of Web Request Commands And Cmdlets 
  - ScriptBlock" is designed to detect suspicious PowerShell activity that could indicate potentially malicious behavior targeting an organizationâ€™s infrastructure. This rule specifically focuses on identifying the invocation of various web request-related commands and cmdlets in PowerShell script block logs. The commands captured include well-known functions such as `Invoke-RestMethod`, `Invoke-WebRequest`, and aliases like `iwr` and `curl`, which could be used by an attacker to download malicious payloads or exfiltrate sensitive data. 
  The detection leverages logs generated from PowerShell Script Block Logging, which must be enabled to capture this telemetry effectively. When matched against the defined criteria, the rule aims to identify instances where these web commands are executed while filtering out known benign paths, thus enhancing the detection of potential command and control (C2) communication or data theft, as categorized under the MITRE ATT&CK technique T1059.001 (PowerShell). 
  ### Investigation Steps
  - **Review PowerShell Logs:** Check Windows PowerShell script block logs (Sysmon or Security logs) for matching instances of the defined web request commands executed by PowerShell to assess the context and potential malicious intent. 
  - **Correlate with EDR Data:** Use the Endpoint Detection and Response (EDR) tool to evaluate the process tree and determine if the command was initiated by a legitimate process or potentially a compromised application.
  - **Check Network Activity:** Analyze network traffic logs (NDR/Firewall) for outbound connections corresponding to the times the alerts were triggered to identify any unusual or unauthorized external communications.
  - **Validate Against Known Good:** Cross-reference the detected commands with known good use cases (such as system automation scripts) to rule out false positives, focusing on user activities and script origins.
  ### Prioritization
  When this alert is triggered, it is considered medium severity as it indicates the potential execution of commands that can facilitate data exfiltration or malicious downloads. Such activities could signify a compromise, warranting immediate investigation to prevent further escalation.
  ### Blind Spots and Assumptions
  One key blind spot in this detection rule is its reliance on PowerShell Script Block Logging, which must be enabled for effective monitoring; if not enabled, malicious activity may go unnoticed. Additionally, adversaries can employ obfuscation techniques or run malicious commands from benign paths that are excluded by the filter, potentially bypassing detection. It's assumed that benign scripts invoking these commands (e.g., system automation tasks) will not be prevalent, but unexpected usage patterns can occur. 
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
