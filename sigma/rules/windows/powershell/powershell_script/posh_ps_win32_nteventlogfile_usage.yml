title: Potentially Suspicious Call To Win32_NTEventlogFile Class - PSScript
id: e2812b49-bae0-4b21-b366-7c142eafcde2
status: test
description: Detects usage of the WMI class "Win32_NTEventlogFile" in a potentially
  suspicious way (delete, backup, change permissions, etc.) from a PowerShell script
references:
- https://learn.microsoft.com/en-us/previous-versions/windows/desktop/legacy/aa394225(v=vs.85)
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-07-13
tags:
- attack.defense-evasion
logsource:
  category: ps_script
  product: windows
  definition: bade5735-5ab0-4aa7-a642-a11be0e40872
detection:
  selection_class:
    ScriptBlockText|contains: 'Win32_NTEventlogFile'
  selection_function:
    ScriptBlockText|contains:
    - '.BackupEventlog('
    - '.ChangeSecurityPermissions('
    - '.ChangeSecurityPermissionsEx('
    - '.ClearEventLog('
    - '.Delete('
    - '.DeleteEx('
    - '.Rename('
    - '.TakeOwnerShip('
    - '.TakeOwnerShipEx('
  condition: all of selection_*
falsepositives:
- Legitimate administration and backup scripts
level: medium
notes: |
  ### Technical Context
  This Sigma rule is focused on detecting potentially suspicious activities involving the Windows Management Instrumentation (WMI) class `Win32_NTEventlogFile` when invoked through PowerShell scripts. Specifically, it monitors for the execution of critical operations such as backup, deletion, changing permissions, and clearing event logs, which are typically associated with attempts to mask malicious activity or tamper with system logging. The rule utilizes data sources from PowerShell script block logs, targeting specific functions within the `Win32_NTEventlogFile` class that, if misused, could indicate an attempt at defense evasion and stealthy malware execution. By analyzing the contained script text for these high-risk operations, the rule aligns with the MITRE ATT&CK tactic of "Defense Evasion" (ID: T1561), which encompasses methods adversaries use to evade detection and make their actions less noticeable.
  ### Investigation Steps
  - **Query Event Logs**: Investigate the PowerShell script block logs in Windows Event Logs for the identified suspicious script executions to confirm if there was an actual event or threat when the alert triggered.
  - **Review EDR Alerts**: Use your EDR tool to check for any related processes spawned by the PowerShell script. Pay attention to any unusual parent-child relationships and process trees that could indicate malicious behavior.
  - **Examine Execution Context**: Check the context in which the PowerShell script was executed, including user accounts and the source of the script (e.g., local file, SMB share, or downloaded from the internet) for any signs of compromise.
  - **Correlate with Other Logs**: Cross-reference findings with network logs, authentication logs, and other security products to identify any potential breaches or lateral movements that coincide with the PowerShell alerts.
  ### Prioritization
  The medium severity level of this alert signifies a potential risk that could lead to significant issues if not addressed promptly, given that tampering with event logs could hinder incident response capabilities and allow malicious activity to go undetected.
  ### Blind Spots and Assumptions
  This rule may not trigger in situations where PowerShell script logging is disabled, or if scripts are obfuscated or not logged properly. Additionally, legitimate administrative scripts that execute similar commands can generate false positives, which may lead to alert fatigue. It is also assumed that adversaries may limit their command choices or modify script contents to avoid detection, which could lead to missed detections.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
