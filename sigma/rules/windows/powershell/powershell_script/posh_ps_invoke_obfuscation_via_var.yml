title: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - PowerShell
id: e54f5149-6ba3-49cf-b153-070d24679126
status: test
description: Detects Obfuscated Powershell via VAR++ LAUNCHER
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task27)
author: Timur Zinniatullin, oscd.community
date: 2020-10-13
modified: 2024-04-05
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_4104:
    ScriptBlockText|re: '(?i)&&set.*(\{\d\}){2,}\\"\s+?-f.*&&.*cmd.*/c'     # FPs with |\/r
  condition: selection_4104
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION 
  - PowerShell" is designed to detect the execution of obfuscated PowerShell scripts using a technique called "Invoke-Obfuscation." This methodology is often leveraged by adversaries to obscure their intentions and evade detection by security solutions. The rule particularly focuses on identifying specific script block patterns that indicate obfuscation attempts, particularly those containing commands that may seek to execute underlying operating system commands (e.g., cmd.exe). 
  To effectively trigger this detection, Windows Script Block Logging must be enabled; this enables the collection of relevant telemetry data that includes the script block text being executed. The rule's implementation maps to the MITRE ATT&CK tactics of defense evasion (T1027 
  - Obfuscated Files or Information) and execution (T1059.001 
  - PowerShell) as it seeks to uncover scripts crafted to evade detection mechanisms.
  ### Investigation Steps
  - **Review PowerShell Logs:** Utilize Windows Event Logs to examine the relevant PowerShell script execution logs and inspect the full content of any flagged script blocks for malicious intent.
  - **Investigate Process Execution:** Use EDR to collect details about the processes that invoked the PowerShell scripts, including parent process ID, command-line arguments, and execution path.
  - **Check for Network Activity:** Utilize Network detection tools to analyze outbound connections initiated by the detected PowerShell script, looking for any indications of communication with known malicious IPs or domains.
  - **Correlate with Other Logs:** Examine other related logs (e.g., Sysmon logs for process creation and network connections) for unusual behavior or patterns that may further confirm malicious activity.
  ### Prioritization
  This alert is classified as high severity due to the potential risk associated with obfuscated PowerShell scripts, which often indicate an attempt by attackers to perform malicious activities while evading detection. Given the capabilities of PowerShell in executing harmful commands, prompt investigation is crucial.
  ### Blind spots and Assumptions
  The detection rule may not trigger in environments where Script Block Logging is not enabled, leading to undetected obfuscation attempts. Additionally, advanced adversaries may modify their techniques to bypass this detection by using less commonly obfuscated patterns or employing alternative scripting methods. It is assumed that the detection infrastructure is correctly configured and has access to comprehensive logging data.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
