title: Powershell Timestomp
id: c6438007-e081-42ce-9483-b067fbef33c3
status: test
description: |
  Adversaries may modify file time attributes to hide new or changes to existing files.
  Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.006/T1070.006.md
- https://www.offensive-security.com/metasploit-unleashed/timestomp/
author: frack113
date: 2021-08-03
modified: 2022-12-25
tags:
- attack.defense-evasion
- attack.t1070.006
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_ioc:
    ScriptBlockText|contains:
    - '.CreationTime ='
    - '.LastWriteTime ='
    - '.LastAccessTime ='
    - '[IO.File]::SetCreationTime'
    - '[IO.File]::SetLastAccessTime'
    - '[IO.File]::SetLastWriteTime'
  condition: selection_ioc
falsepositives:
- Legitimate admin script
level: medium
notes: |
  ### Technical Context
  The Powershell Timestomp detection rule aims to identify instances where adversaries manipulate file timestamps to obfuscate their activities and evade detection. Timestomping involves altering file attributes such as creation, last access, and last modification times, allowing malicious files to blend in with legitimate ones in the same directory. This Sigma rule leverages PowerShell script block logging to identify specific commands and properties that relate to timestamp modifications. It looks for the presence of critical attributes (e.g., `.CreationTime`, `.LastWriteTime`, and `.LastAccessTime`) being set through PowerShell commands like `[IO.File]::SetCreationTime` or similar script text. To effectively use this rule, ensure that script block logging is enabled in your environment, as it captures the execution of PowerShell scripts, making it possible to detect such timestamp manipulation activities.
  ### Investigation Steps
  - Utilize your EDR tool to review PowerShell execution events around the time of the alert to identify the associated powershell.exe process and any suspicious parent processes.
  - Cross-reference the file system logs to determine which files were accessed or modified at the time of the potential timestomping, paying close attention to unexpected changes in timestamps.
  - Review user activity logs from your SIEM to assess if legitimate administrative users executed scripts that may have altered file timestamps around the time of the alert.
  - Check cloud logs in case the files involved were hosted in cloud environments like AWS S3 or GCP buckets, looking for any unusual access patterns or modifications to storage settings.
