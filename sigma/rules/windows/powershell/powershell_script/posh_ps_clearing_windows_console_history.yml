title: Clearing Windows Console History
id: bde47d4b-9987-405c-94c7-b080410e8ea7
status: test
description: Identifies when a user attempts to clear console history. An adversary
  may clear the command history of a compromised account to conceal the actions undertaken
  during an intrusion.
references:
- https://stefanos.cloud/blog/kb/how-to-clear-the-powershell-command-history/
- https://www.shellhacks.com/clear-history-powershell/
- https://community.sophos.com/sophos-labs/b/blog/posts/powershell-command-history-forensics
author: Austin Songer @austinsonger
date: 2021-11-25
modified: 2022-12-25
tags:
- attack.defense-evasion
- attack.t1070
- attack.t1070.003
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection1:
    ScriptBlockText|contains: Clear-History
  selection2a:
    ScriptBlockText|contains:
    - Remove-Item
    - rm
  selection2b:
    ScriptBlockText|contains:
    - ConsoleHost_history.txt
    - (Get-PSReadlineOption).HistorySavePath
  condition: selection1 or selection2a and selection2b
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to identify actions indicative of adversarial behavior in a Windows environment, specifically the attempt to clear command history in PowerShell. The focus is on the usage of commands such as `Clear-History`, `Remove-Item`, and `rm`, which, along with the targeted files or settings related to PowerShell history (e.g., `ConsoleHost_history.txt` or `(Get-PSReadlineOption).HistorySavePath`), can signify an attempt to erase evidence of prior actions performed within a compromised account. The rule mandates that Script Block Logging must be enabled to capture the relevant PowerShell events effectively. This detection aligns with the MITRE ATT&CK framework under the tactic of **Defense Evasion** and the technique **T1070.003: Indicator Removal on Host**.
  ### Investigation Steps
  - **Check EDR Alerts**: Review endpoint detection and response (EDR) alerts for suspicious PowerShell activity in the context of the user account attempting to clear history. Look for any associated anomalies or additional alerting around the same time.
    
  - **Analyze PowerShell Logs**: Access the PowerShell event logs to trace activities around the usage of the `Clear-History` or `Remove-Item` command. Identify if there were any preceding suspicious commands executed by the same user.
  - **Correlate with User Actions**: Verify if the identified command history clearing correlates with any known or documented user activity, like legitimate troubleshooting or maintenance tasks. This can help determine if the activity was benign or malicious.
  - **Review Account Activity**: Using User and Entity Behavior Analytics (UEBA), review the account's login patterns and any recent changes in access privileges. Assess if the account shows signs of compromise or abnormal behavior leading up to the command history clearing.
  ### Prioritization
  The severity level is marked as high because the clearing of command history can indicate an attempt to hide malicious activity, necessitating immediate attention from the SOC team.
  ### Blind Spots and Assumptions
  One potential blind spot is the reliance on enabled Script Block Logging; if it is not configured correctly or is disabled, the detection will not be triggered, leaving adversarial actions unnoticed. Additionally, some commands may not generate sufficient logging depending on the Windows version or configuration. Furthermore, a well-skilled adversary might use alternative methods to clear history that this rule does not capture.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
