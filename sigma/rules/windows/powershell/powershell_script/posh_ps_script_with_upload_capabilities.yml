title: PowerShell Script With File Upload Capabilities
id: d2e3f2f6-7e09-4bf2-bc5d-90186809e7fb
status: test
description: Detects PowerShell scripts leveraging the "Invoke-WebRequest" cmdlet
  to send data via either "PUT" or "POST" method.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1020/T1020.md
- https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html
- https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-7.4
author: frack113
date: 2022-01-07
modified: 2023-05-04
tags:
- attack.exfiltration
- attack.t1020
logsource:
  product: windows
  category: ps_script
  definition: bade5735-5ab0-4aa7-a642-a11be0e40872
detection:
  selection_cmdlet:
    ScriptBlockText|contains:
    - 'Invoke-WebRequest'
    - 'iwr '
  selection_flag:
    ScriptBlockText|contains:
    - '-Method Put'
    - '-Method Post'
  condition: all of selection_*
falsepositives:
- Unknown
level: low
notes: |
  n
  ### Technical Context
  The detection rule for "PowerShell Script With File Upload Capabilities" targets potentially malicious activity where PowerShell scripts make use of the `Invoke-WebRequest` cmdlet to upload files to external servers. Specifically, this rule looks for scripts that execute HTTP requests with the methods "PUT" or "POST," commonly associated with data exfiltration. The underlying technical data sources involved include Windows PowerShell script logs that track command execution and script block text to identify specific command patterns that signify an upload. The identified techniques align with the MITRE ATT&CK framework under the tactic of "Exfiltration" and technique "T1020". Misuse of these methods may indicate an attempt to send sensitive information outside the enterprise network.
  ### Investigation Steps
  - **Review PowerShell Logs:** Investigate the corresponding PowerShell logs within your SIEM to find detailed information on the script execution and command parameters used in the `Invoke-WebRequest` calls.
  - **Correlate with EDR Alerts:** Check for any Endpoint Detection and Response (EDR) alerts or blocked actions related to the system from which the PowerShell script was executed. This can help determine if malicious file uploads were attempted.
  - **Inspect Network Traffic:** Examine network traffic around the time of the alert to identify any unexpected connections to external IP addresses, particularly those that received `PUT` or `POST` requests.
  - **Check File Integrity:** Investigate any files that may have been uploaded or manipulated as part of the PowerShell script's execution by reviewing file system logs for unusual access patterns.
  ### Prioritization
  Given that the alert pertains to potential data exfiltration via PowerShell, the severity is considered low, highlighting the need for further investigation to validate the context and intent behind the detected behavior before escalating.
  ### Blind Spots and Assumptions
  This rule may not trigger in environments where PowerShell logging is not configured or where execution policies restrict the use of scripts. Additionally, skilled adversaries may obfuscate their command execution by changing script patterns or using alternative methods, rendering the detection ineffective. Assumptions include the presence of network monitoring and the capability for log aggregation from across the enterprise environment to accurately assess the risk associated with detected behavior.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environmental and operational needs. Please communicate any changes to the detection engineering team.
