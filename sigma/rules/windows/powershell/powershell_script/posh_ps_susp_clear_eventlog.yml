title: Suspicious Eventlog Clear
id: 0f017df3-8f5a-414f-ad6b-24aff1128278
related:
- id: cc36992a-4671-4f21-a91d-6c2b72a2edf5
  type: derived
status: test
description: Detects usage of known powershell cmdlets such as "Clear-EventLog" to
  clear the Windows event logs
references:
- https://twitter.com/oroneequalsone/status/1568432028361830402
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.001/T1070.001.md
- https://eqllib.readthedocs.io/en/latest/analytics/5b223758-07d6-4100-9e11-238cfdd0fe97.html
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-09-12
tags:
- attack.defense-evasion
- attack.t1070.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - 'Clear-EventLog '
    - 'Remove-EventLog '
    - 'Limit-EventLog '
    - 'Clear-WinEvent '
  condition: selection
falsepositives:
- Rare need to clear logs before doing something. Sometimes used by installers or
  cleaner scripts. The script should be investigated to determine if it's legitimate
level: medium
notes: |
  ### Technical Context
  The "Suspicious Eventlog Clear" detection rule monitors the usage of specific PowerShell cmdlets that are commonly associated with malicious activities aimed at manipulating Windows event logs. This rule specifically looks for instances of `Clear-EventLog`, `Remove-EventLog`, `Limit-EventLog`, and `Clear-WinEvent`. These cmdlets are often utilized by adversaries to erase or limit access to event logs, thus impeding the ability to conduct thorough investigations after a potential compromise. The primary technical data source for this rule is Windows PowerShell Script Block Logging, which must be enabled for the rule to function effectively. By inspecting the script block text for these specific cmdlets, the rule leverages the MITRE ATT&CK framework, particularly focusing on the tactic of *Defense Evasion* under the technique T1070.001 (Indicator Removal on Host).
  ### Investigation Steps
  - **Analyze PowerShell Logs:** Review recent PowerShell logs in your SIEM or EDR alongside the timestamp of the alert to identify the context in which these cmdlets were executed.
  - **Correlate with Event Logs:** Check Windows Security and System Event Logs for any unusual activities or processes that coincide with the execution of the PowerShell commands, particularly those related to log clearing.
  - **Examine Running Processes:** Use your EDR tools to look for any suspicious processes that initiated the PowerShell commands, checking their parent processes to infer how they were executed.
  - **Conduct a File Integrity Check:** Query for any changes to the event log files and investigate any abnormal deletions or alterations that could signify an attempt to cover tracks.
  ### Prioritization
  This alert has a medium severity due to the potential risk it poses to forensic investigations. The ability of an attacker to clear event logs can significantly delay or obfuscate detection efforts, indicating possible malicious intent.
  ### Blind Spots and Assumptions
  This rule may not fire if PowerShell Script Block Logging is not enabled, which is a prerequisite for detection. Additionally, legitimate applications or scripts that use log-clearing cmdlets for maintenance or cleanup purposes can produce false positives. It is also assumed that any adaptation of the cmdlets or the use of alternate methods for clearing logs may evade detection, as this rule specifically looks for exact command usage.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
