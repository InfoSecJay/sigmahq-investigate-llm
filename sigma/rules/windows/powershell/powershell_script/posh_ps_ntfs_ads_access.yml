title: NTFS Alternate Data Stream
id: 8c521530-5169-495d-a199-0a3a881ad24e
status: test
description: Detects writing data into NTFS alternate data streams from powershell.
  Needs Script Block Logging.
references:
- https://web.archive.org/web/20220614030603/http://www.powertheshell.com/ntfsstreams/
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1564.004/T1564.004.md
author: Sami Ruohonen
date: 2018-07-24
modified: 2022-12-25
tags:
- attack.defense-evasion
- attack.t1564.004
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_content:
    ScriptBlockText|contains:
    - set-content
    - add-content
  selection_stream:
    ScriptBlockText|contains: '-stream'
  condition: all of selection*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule identifies suspicious activity related to NTFS Alternate Data Streams (ADS) that can be used by attackers to hide malicious payloads. The rule specifically looks for the use of PowerShell commands such as `set-content` and `add-content` which are commonly employed to create or modify these streams. By examining the `ScriptBlockText` of PowerShell commands logged with Script Block Logging enabled, we can identify when an actor is trying to utilize the `-stream` parameter that specifies target streams. This behavior aligns with the MITRE ATT&CK techniques for Defense Evasion (T1564.004) and Execution (T1059.001), showcasing an adversary's attempt to obscure their actions or deliver additional payloads without detection.
  To leverage this detection rule effectively, it requires the availability of Windows event logs, specifically those generated by PowerShell, as well as ensuring that Script Block Logging is enabled on the Windows systems being monitored. The capability to detect unauthorized writing to ADS could provide critical insights into malicious activities that are not always visible through conventional methods, adding a layer of defense against fileless malware techniques and other evasion strategies.
  ### Investigation Steps
  - **Check PowerShell Logs:** Review the PowerShell logs in the Windows Event Logs (Security, System) for any entries related to the execution of `set-content` or `add-content` commands, particularly those including the `-stream` argument.
  - **Correlate with EDR Data:** Utilize EDR solutions to examine the endpoint's process creation events around the time of the alert. Look for any PowerShell processes that may have been initiated with suspicious command-line arguments.
  - **Examine File System Changes:** Investigate the file system for any files with alternate data streams. Tools such as `Sysinternals Streams` can provide visibility into potential hidden data that may have been written as a result of the detected activity.
  - **Network Traffic Analysis:** Analyze network logs for any signs of unusual communication or data exfiltration that might correlate with suspicious activity from the PowerShell scripts. Look for connections that could indicate data being sent from the modified streams.
  ### Prioritization
  Given the high severity level of this alert, the detection of writing to NTFS Alternate Data Streams is a significant indicator of potential malicious behavior that may evade traditional detection mechanisms. Immediate investigation is warranted as it may suggest advanced attempts to hide activities or data on the affected systems.
  ### Blind Spots and Assumptions
  The rule assumes that Script Block Logging is enabled; if not, the necessary telemetry required to trigger the detection will be unavailable. Additionally, attackers who are aware of this detection signature may utilize obfuscation techniques or alternative scripting environments that do not trigger this logging mechanism, potentially evading capture. Lastly, environmental factors, such as legitimate usage of PowerShell for application management, may lead to false positives if not properly contextualized during investigations.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and applicability, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
