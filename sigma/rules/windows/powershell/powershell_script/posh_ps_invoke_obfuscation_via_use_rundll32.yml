title: Invoke-Obfuscation Via Use Rundll32 - PowerShell
id: a5a30a6e-75ca-4233-8b8c-42e0f2037d3b
status: test
description: Detects Obfuscated Powershell via use Rundll32 in Scripts
references:
- https://github.com/SigmaHQ/sigma/issues/1009
author: Nikita Nazarov, oscd.community
date: 2019-10-08
modified: 2022-11-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_4104:
    ScriptBlockText|contains|all:
    - '&&'
    - 'rundll32'
    - 'shell32.dll'
    - 'shellexec_rundll'
    ScriptBlockText|contains:
    - 'value'
    - 'invoke'
    - 'comspec'
    - 'iex'
  condition: selection_4104
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule identifies potential obfuscated PowerShell commands that employ the `rundll32` Windows utility as a means for executing scripts, often used by attackers to execute malicious payloads. The common technique involves invoking `rundll32.exe` with parameters that can shield the true intent of the PowerShell execution from security mechanisms by using obfuscation techniques. The rule specifically looks for the presence of key terms in the script block that indicate suspicious activity, such as `&&`, `rundll32`, and references to `shell32.dll`, which are indicative of potentially malicious behavior. The detection relies on Windows PowerShell Script Block Logging, which must be enabled, and taps into the MITRE ATT&CK tactic of Defense Evasion (T1027) as well as Execution (T1059.001).
  ### Investigation Steps
  - **Assess the Alert Context:** Review the generated alert in the SIEM for specific script block details, including the full PowerShell command used and any error messages returned during execution. 
  - **Correlate with Process Creation Logs:** Use EDR tools to examine logs corresponding to `rundll32.exe` and the PowerShell instance, focusing on the parent-child process relationships to identify how the execution was initiated.
  - **Identify Network Activity:** Inspect network connections and DNS queries at the time of alerting for any unusual or malicious connections that may correlate with the obfuscated script execution, utilizing NDR tools.
  - **Review System Changes:** Check for recent file or registry modifications made during or after the execution to uncover any persistence mechanisms or lateral movement, using File Integrity Monitoring and registry logs.
  ### Prioritization
  Given that this alert indicates a high-severity threat, the use of obfuscated PowerShell via `rundll32` could represent an active maneuver by an attacker to exploit the environment, necessitating immediate investigation and response.
  ### Blind Spots and Assumptions
  This rule may not fire if PowerShell Script Block Logging is disabled, if attackers use alternate methods to execute commands (bypassing `rundll32`), or if obfuscation techniques evolve beyond current detection capabilities. Additionally, certain benign applications might invoke `rundll32` in legitimate ways, leading to possible false positives. Analysts should consider that sophisticated adversaries may employ custom obfuscation strategies that do not trigger this detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
