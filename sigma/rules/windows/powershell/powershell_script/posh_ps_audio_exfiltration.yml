title: Potential Data Exfiltration Via Audio File
id: e4f93c99-396f-47c8-bb0f-201b1fa69034
status: test
description: Detects potential exfiltration attempt via audio file using PowerShell
references:
- https://github.com/gtworek/PSBits/blob/e97cbbb173b31cbc4d37244d3412de0a114dacfb/NoDLP/bin2wav.ps1
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-16
tags:
- attack.exfiltration
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_main:
    ScriptBlockText|contains|all:
    - '[System.Math]::'
    - '[IO.FileMode]::'
    - 'BinaryWriter'
  selection_header_wav:
    ScriptBlockText|contains|all:
            # Byte chunks from the WAV header used in the example POC
            # You can extend this for different audio formats by adding different selections
    - '0x52'
    - '0x49'
    - '0x46'
    - '0x57'
    - '0x41'
    - '0x56'
    - '0x45'
    - '0xAC'
  condition: selection_main and 1 of selection_header_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This detection rule identifies potential data exfiltration attempts conducted through audio files utilizing PowerShell scripts. The key indicators for this rule are specific PowerShell constructs, such as the usage of the `BinaryWriter` class to write binary data, combined with the identification of certain byte sequences characteristic of WAV file headers. It monitors for scripts that contain references to `[System.Math]::`, `[IO.FileMode]::`, and other file operations typically associated with reading or writing data in a binary format that align with audio file signatures. The logs generated should be collected from PowerShell Script Block Logging, which must be enabled on endpoints for effective monitoring. This rule is classified under the MITRE ATT&CK tactic of exfiltration, specifically relating to the technique of "Exfiltration Over Command and Control Channel".
  ### Investigation Steps
  - **Review Executed Powershell Script:** Utilize the EDR to obtain and examine the PowerShell script that triggered the alert to understand its purpose and functionality.
  - **Correlate with Recent File Access:** Check file access logs and the file system for any audio files (WAV) that may have been created or modified around the time of the alert, as this can provide insights into potential exfiltration.
  - **Inspect Remote Connections:** Use network logs to identify any suspicious outbound connections or connections to unknown external hosts originating from the affected endpoint to evaluate any possible exfiltration paths.
  - **Check for Data Loss Prevention (DLP) Policies:** Investigate if there have been any violations or alerts from DLP systems related to the identified Powershell activity, as they can assist in confirming the sensitivity of the data being targeted.
  ### Prioritization
  The alert's medium severity signifies a noteworthy incident that could indicate an attempt to exfiltrate potentially sensitive information. It requires timely investigation to prevent the loss of critical data.
  ### Blind Spots and Assumptions
  This rule assumes that PowerShell Script Block Logging is properly configured across all endpoints; without this, the rule may not generate alerts. Additionally, adversaries could evade detection by obfuscating PowerShell scripts or using other scripting languages to perform similar actions. If the typical WAV header byte pattern is altered, the detection may also fail. Analysts should remain vigilant about non-standard methods of data exfiltration.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
