title: Import PowerShell Modules From Suspicious Directories
id: 21f9162c-5f5d-4b01-89a8-b705bd7d10ab
related:
- id: c31364f7-8be6-4b77-8483-dd2b5a7b69a3
  type: similar
status: test
description: Detects powershell scripts that import modules from suspicious directories
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.002/T1003.002.md
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-07-07
modified: 2023-01-10
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains:
    - 'Import-Module "$Env:Temp\'
    - Import-Module '$Env:Temp\
    - 'Import-Module $Env:Temp\'
    - 'Import-Module "$Env:Appdata\'
    - Import-Module '$Env:Appdata\
    - 'Import-Module $Env:Appdata\'
    - 'Import-Module C:\Users\Public\'
            # Import-Module alias is "ipmo"
    - 'ipmo "$Env:Temp\'
    - ipmo '$Env:Temp\
    - 'ipmo $Env:Temp\'
    - 'ipmo "$Env:Appdata\'
    - ipmo '$Env:Appdata\
    - 'ipmo $Env:Appdata\'
    - 'ipmo C:\Users\Public\'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This detection rule is designed to identify potential misuse of PowerShell by monitoring for commands that import modules from suspicious directories, specifically those associated with temporary files or application data (`$Env:Temp`, `$Env:Appdata`, and `C:\Users\Public`). Such directories are often targeted by adversaries to execute malicious scripts, as they provide a less scrutinized space for stored code. The rule leverages Windows PowerShell Script Block Logging to capture the script block text during execution, allowing it to search for specific commands, including `Import-Module` and its alias `ipmo`, that signal potentially malicious activity. The use of these commands in these directories signifies an attempt to load suspicious or unauthorized PowerShell modules that could indicate a security incident.
  ### Investigation Steps
  - Review the related PowerShell script block logs in your EDR tool to isolate events that triggered this detection. Focus on those containing the specified suspicious import commands.
  - Correlate the identified scripts with running processes using process creation logs to understand the context in which these commands were executed. This will help establish whether they were initiated by legitimate or unauthorized users.
  - Check the user accounts involved in these PowerShell commands to assess their permissions and verify if any unauthorized access or anomalous behavior is present.
  - Analyze associated network activities using your NDR tools, specifically looking for connections that may align with the timing of these imports, suggesting that they might be part of a broader attack strategy.
