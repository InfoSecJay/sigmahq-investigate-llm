title: Powershell Keylogging
id: 34f90d3c-c297-49e9-b26d-911b05a4866c
status: test
description: Adversaries may log user keystrokes to intercept credentials as the user
  types them.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.001/src/Get-Keystrokes.ps1
author: frack113
date: 2021-07-30
modified: 2022-07-11
tags:
- attack.collection
- attack.t1056.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_basic:
    ScriptBlockText|contains: 'Get-Keystrokes'
  selection_high:   # want to run in background and keyboard
    ScriptBlockText|contains|all:
    - 'Get-ProcAddress user32.dll GetAsyncKeyState'
    - 'Get-ProcAddress user32.dll GetForegroundWindow'
  condition: 1 of selection_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The "Powershell Keylogging" detection rule is designed to identify the execution of PowerShell scripts that may be employed by adversaries to capture user keystrokes, which could potentially expose sensitive information like credentials. This is particularly concerning as it directly involves the exploitation of built-in Windows functionalities via PowerShell. Key indicators that the rule is monitoring include the presence of specific commands in script blocks, such as `Get-Keystrokes`, `GetProcAddress user32.dll GetAsyncKeyState`, and `GetProcAddress user32.dll GetForegroundWindow`. These commands leverage the user32.dll library to tap into system-level keystroke logging. The telemetry used for this detection comes from Windows Sysmon, focusing on PowerShell script execution logs, specifically Script Block Logging, which is a requirement for effective detection. The rule aligns with MITRE ATT&CK tactics related to data collection, specifically the technique labeled as T1056.001 (Input Capture: Keylogging).
  ### Investigation Steps
  - **Verify PowerShell Script Execution:** Check the PowerShell execution logs in your EDR solution to identify the invocation of scripts containing the detected keylogging commands.
  - **Review Script Block Logging:** Confirm that Script Block Logging is enabled on the affected systems and inspect the related logs for unusual script execution behaviors.
  - **Analyze User Activity:** Utilize user activity logs to contextualize the PowerShell execution and verify if any unauthorized or suspicious accounts initiated the detected command.
  - **Conduct Scope Analysis:** Determine if multiple endpoints executed similar scripts by querying your SIEM or logs across the enterprise, which may indicate a wider compromise.
  ### Prioritization
  The alert is assigned a medium severity level, as it indicates a potentially serious threat involving the interception of sensitive user input, which may lead to credential theft if no further layers of protection exist.
  ### Blind Spots and Assumptions
  This detection rule may not fire if Script Block Logging is not enabled, as the requisite telemetry would be absent. Additionally, sophisticated adversaries may employ obfuscation techniques on their scripts or utilize other programming languages to evade detection. Other issues could arise from legitimate administrative tasks running similar commands, which could lead to false positives.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
