title: Registry-Free Process Scope COR_PROFILER
id: 23590215-4702-4a70-8805-8dc9e58314a2
status: test
description: |
  Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR.
  The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR).
  These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.
  (Citation: Microsoft Profiling Mar 2017)
  (Citation: Microsoft COR_PROFILER Feb 2013)
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1574.012/T1574.012.md#atomic-test-3---registry-free-process-scope-cor_profiler
author: frack113
date: 2021-12-30
tags:
- attack.persistence
- attack.t1574.012
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - '$env:COR_ENABLE_PROFILING'
    - '$env:COR_PROFILER'
    - '$env:COR_PROFILER_PATH'
  condition: selection
falsepositives:
- Legitimate administrative script
level: medium
notes: |
  ### Technical Context
  This detection rule aims to identify the misuse of the COR_PROFILER environment variable, which can be leveraged by adversaries to manipulate the execution flow of .NET applications. The rule works by monitoring PowerShell script block logging for specific environment variable assignments that relate to .NET profiling features: `$env:COR_ENABLE_PROFILING`, `$env:COR_PROFILER`, and `$env:COR_PROFILER_PATH`. These variables, if set, indicate that an external profiling DLL is being injected into the process, which can be a tactic used during the software exploitation or persistence stages of an attack. The identified MITRE ATT&CK tactic for this rule is **Persistence** (T1574.012 
  - Registry and Fileless Exfiltration). Critical data sources for this detection include the PowerShell script block logs, which must be enabled to capture such activities.
  ### Investigation Steps
  - **Review PowerShell Command Logs:** Check the PowerShell logs to find the context in which these environment variables were set. Look for unusual user accounts or scripts running suspicious commands.
  - **Examine EDR Alerts:** Utilize your endpoint detection and response (EDR) tools to investigate the processes that were running when the environment variables were set. Determine if there are any known malicious processes associated with this activity.
  - **Analyze Related Network Activity:** Use network logs to monitor communications that occur as a result of the suspicious PowerShell activity. Look for connections to external IPs that may indicate command and control activity.
  - **Assess User Activity:** Review the user accounts associated with the alert to determine if there are any indicators of compromise or unusual behavior. Pay attention to administrative accounts and their associated activities.
  ### Prioritization
  The alert is categorized as medium severity because although it indicates potentially malicious behavior, it can also be triggered by legitimate administrative actions. Analysts should prioritize investigation based on the context and history of the user account involved.
  ### Blind Spots and Assumptions
  This rule relies on PowerShell script block logging being enabled, which may not be standard in all environments. Furthermore, legitimate administrative scripts that execute these environment variable settings could generate false positives. An adversary may bypass detection by executing the profiling without using PowerShell or by using obfuscation techniques that prevent detection. Additionally, this rule may not fire if the attacker uses alternative methods to inject malicious code without modifying these specific environment variables.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
