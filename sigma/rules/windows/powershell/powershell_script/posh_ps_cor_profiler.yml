title: Registry-Free Process Scope COR_PROFILER
id: 23590215-4702-4a70-8805-8dc9e58314a2
status: test
description: |
  Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR.
  The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR).
  These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.
  (Citation: Microsoft Profiling Mar 2017)
  (Citation: Microsoft COR_PROFILER Feb 2013)
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1574.012/T1574.012.md#atomic-test-3---registry-free-process-scope-cor_profiler
author: frack113
date: 2021-12-30
tags:
- attack.persistence
- attack.t1574.012
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - '$env:COR_ENABLE_PROFILING'
    - '$env:COR_PROFILER'
    - '$env:COR_PROFILER_PATH'
  condition: selection
falsepositives:
- Legitimate administrative script
level: medium
notes: |
  ### Technical Context
  The "Registry-Free Process Scope COR_PROFILER" detection rule is designed to identify potentially malicious use of the COR_PROFILER environment variable within Windows PowerShell scripts. Adversaries might exploit this feature to hijack the execution flow of .NET applications by loading an external profiler DLL. The detection leverages script block logging to monitor for instances where PowerShell scripts contain references to three specific environment variables: `COR_ENABLE_PROFILING`, `COR_PROFILER`, and `COR_PROFILER_PATH`. By capturing these elements, the rule can highlight potentially unauthorized profiling activities that may indicate attempts to manipulate .NET processes for malicious purposes. Monitoring these variables helps distinguish between benign administrative actions and those that pose a security risk to the enterprise.
  ### Investigation Steps
  - Investigate the script execution logs in your EDR to identify the user and the session in which the PowerShell script executed with the suspicious environment variables.
  - Review the command-line history and associated parent processes in the EDR to determine if any known malicious binaries were executed around the same timeframe.
  - Check the network traffic logs from your NDR to evaluate if any unusual outbound connections were made during or shortly after the execution of the identified script.
  - Inspect any relevant logs from your SIEM for additional context, focusing on failures, warnings, or unauthorized access attempts that correlate with the execution of the PowerShell script.
