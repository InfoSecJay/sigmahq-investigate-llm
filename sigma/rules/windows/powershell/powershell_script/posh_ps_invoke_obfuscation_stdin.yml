title: Invoke-Obfuscation STDIN+ Launcher - Powershell
id: 779c8c12-0eb1-11eb-adc1-0242ac120002
status: test
description: Detects Obfuscated use of stdin to execute PowerShell
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task 25)
author: Jonathan Cheong, oscd.community
date: 2020-10-15
modified: 2024-04-05
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_4104:
    ScriptBlockText|re: 'cmd.{0,5}(?:/c|/r).+powershell.+(?:\$?\{?input\}?|noexit).+"'
  condition: selection_4104
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule identifies the obfuscated use of PowerShell to execute commands through standard input (STDIN). Specifically, it looks for script block logging events that contain command-line syntax often used by adversaries to mask their true intentions. The primary data source leveraged by this rule is Windows PowerShell script block logs, which require Script Block Logging to be enabled for capturing extensive PowerShell activities, including those which involve command obfuscation. This activity aligns with the MITRE ATT&CK techniques for **Defense Evasion** (T1027) and **Execution** (T1059.001), indicating that attackers are attempting to evade detection and execute potentially malicious payloads under the guise of legitimate PowerShell commands.
  ### Investigation Steps
  - **Check PowerShell Execution Logs:** Review the Windows Event Logs under the 'PowerShell' category for related events that show script execution. Look specifically for event IDs related to script block logging to gather context on the execution environment.
  - **Analyze Command Line Parameters:** Use EDR tools to inspect the command line parameters used in the detected PowerShell execution and correlate them with the process IDs logged during the incident. Ensure that the commands appearing in the logs are legitimate and not part of a malicious execution attempt.
  - **Review Networking Activities:** Examine network connection logs from your NGFW or NDR to identify any suspicious outbound connections made by the PowerShell process. Look for connections to known command and control (C2) domains that may correlate with the use of obfuscated PowerShell.
  - **Conduct Malware Scanning:** Utilize your AV solutions to perform a thorough scan on the affected machine to identify if any malware or unauthorized changes were introduced during the obfuscated command's execution.
  ### Prioritization
  This alert is assigned a high severity level as the use of obfuscated PowerShell often indicates an attempt by an adversary to execute malicious commands undetected, potentially compromising the integrity of the system.
  ### Blind Spots and Assumptions
  This rule may fail to fire if script block logging is not enabled, which is a prerequisite for capturing the necessary PowerShell activities. Additionally, if an attacker uses non-standard techniques to execute PowerShell or employs techniques that bypass standard logging (e.g., using wmi_exec, scheduled tasks, or invoking PowerShell from non-standard contexts), the detection rule may not catch the activity. It is also crucial to consider false positives from legitimate administrative tasks that utilize similar PowerShell commands.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
