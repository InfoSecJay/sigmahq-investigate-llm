title: PowerShell WMI Win32_Product Install MSI
id: 91109523-17f0-4248-a800-f81d9e7c081d
status: test
description: Detects the execution of an MSI file using PowerShell and the WMI Win32_Product
  class
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.007/T1218.007.md
author: frack113
date: 2022-04-24
tags:
- attack.defense-evasion
- attack.t1218.007
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - 'Invoke-CimMethod '
    - '-ClassName '
    - 'Win32_Product '
    - '-MethodName '
    - '.msi'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  n
  ### Technical Context
  This detection rule focuses on identifying potentially unauthorized installations of software via Microsoft Installer (MSI) files executed through PowerShell using the Windows Management Instrumentation (WMI) class Win32_Product. The rule captures PowerShell script block events that contain specific command segments indicative of MSI installation attempts. By monitoring the Script Block Logs for the presence of the `Invoke-CimMethod` command along with parameters like `-ClassName Win32_Product` and the inclusion of an MSI file extension, this rule successfully flags actions that may circumvent traditional application control measures.
  The significance of this rule aligns with the MITRE ATT&CK framework under the tactic of Defense Evasion and the technique T1218.007, which details the misuse of WMI for executing malicious payloads. Monitoring these behaviors enables security teams to proactively respond to potentially harmful installations that could compromise the integrity of enterprise systems.
  ### Investigation Steps
  - **Review PowerShell Logs**: Utilize your SIEM and Windows Event Logs to extract detailed logs related to PowerShell execution during the time frame of the alert to assess the context of the operation.
  - **Correlate with EDR Data**: Examine alerts from EDR solutions for any suspicious behavior related to the process that triggered the alert, such as unusual parent-child process relationships or known malicious indicators.
  - **Audit Installed Applications**: Query the systems to list installed applications and identify whether the flagged MSI file aligns with legitimate software or appears anomalous within the organization’s software inventory.
  - **Check Network Connections**: Inspect network traffic around the time of the alert to identify any unusual outbound connections, especially from the process executing the PowerShell command, which can indicate a secondary payload download or command-and-control communications.
  ### Prioritization
  The severity level of this alert is classified as medium due to the potential risk associated with unauthorized software installations, which can lead to vulnerabilities or backdoor access. Investigations should be carried out promptly to mitigate possible threats to the enterprise infrastructure.
  ### Blind Spots and Assumptions
  This rule relies on the assumption that PowerShell Script Block Logging is enabled on monitored endpoints; if this logging is disabled, the rule will not generate alerts. Additionally, the detection is contingent on identifying command structures that specifically match the criteria—adversaries may use obfuscation techniques or alternative methods to install software, circumventing this rule. Analysts should remain aware that legitimate administrative actions may trigger false positives, necessitating careful analysis.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
