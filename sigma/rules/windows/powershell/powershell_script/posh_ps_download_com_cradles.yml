title: Potential COM Objects Download Cradles Usage - PS Script
id: 3c7d1587-3b13-439f-9941-7d14313dbdfe
related:
- id: 02b64f1b-3f33-4e67-aede-ef3b0a5a8fcf
  type: similar
status: test
description: Detects usage of COM objects that can be abused to download files in
  PowerShell by CLSID
references:
- https://learn.microsoft.com/en-us/dotnet/api/system.type.gettypefromclsid?view=net-7.0
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=57
author: frack113
date: 2022-12-25
tags:
- attack.command-and-control
- attack.t1105
logsource:
  product: windows
  category: ps_script
  definition: Script Block Logging must be enable
detection:
  selection_1:
    ScriptBlockText|contains: '[Type]::GetTypeFromCLSID('
  selection_2:
    ScriptBlockText|contains:
    - '0002DF01-0000-0000-C000-000000000046'
    - 'F6D90F16-9C73-11D3-B32E-00C04F990BB4'
    - 'F5078F35-C551-11D3-89B9-0000F81FE221'
    - '88d96a0a-f192-11d4-a65f-0040963251e5'
    - 'AFBA6B42-5692-48EA-8141-DC517DCF0EF1'
    - 'AFB40FFD-B609-40A3-9828-F88BBE11E4E3'
    - '88d96a0b-f192-11d4-a65f-0040963251e5'
    - '2087c2f4-2cef-4953-a8ab-66779b670495'
    - '000209FF-0000-0000-C000-000000000046'
    - '00024500-0000-0000-C000-000000000046'
  condition: all of selection_*
falsepositives:
- Legitimate use of the library
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potentially malicious behavior in PowerShell scripts that utilize COM objects to download files from the internet. COM (Component Object Model) objects are a Microsoft technology that allows for inter-process communication. The rule specifically looks for the use of the PowerShell call to `[Type]::GetTypeFromCLSID()` along with a list of specific CLSIDs (Class Identifiers) known to be associated with downloading files. When a script block contains these elements, it indicates an attempt to use COM objects to exfiltrate data or execute malicious payloads, which correlates with the MITRE ATT&CK technique T1105 (Ingress Tool Transfer) under the Command and Control tactic. 
  To effectively use this detection, Script Block Logging must be enabled in the Windows environment, and the rule leverages information collected from PowerShell script execution logs to identify patterns consistent with the abuse of these COM objects. By focusing on eliminating false positives that may originate from legitimate uses of these libraries, the detection is fine-tuned for identifying malicious activities.
  ### Investigation Steps
  - **Review PowerShell Logs**: Check the PowerShell script block logs for relevant activities around the detected alert time to identify the exact script execution context and commands used.
    
  - **Analyze Network Connections**: Use EDR and network logs to trace any outbound connections initiated by the detected PowerShell scripts to determine if any suspicious file downloads occurred.
  - **Inspect Related Processes**: Cross-reference the PowerShell session details with related process creations, looking for any associated processes that could indicate a higher likelihood of malicious intent.
  - **Correlate with Endpoint Activity**: Examine alerts from the EDR, including behaviors and indicators of compromise (IOCs) related to the CLSIDs, which can enhance understanding of the overall impact and potential lateral movement within the network.
  ### Prioritization
  The severity level for this alert is classified as medium due to the potential risk associated with downloading files via COM objects, which could lead to data compromise or system exploitation. While not always indicative of malicious activity, the behavior warrants immediate investigation due to its capability to facilitate further attacks.
  ### Blind spots and Assumptions
  This rule may fail to fire in scenarios where PowerShell script block logging is not enabled, which is a common oversight in configuration management practices. Additionally, legitimate administrative tasks that utilize these COM objects could generate false positives, thus complicating the identification of true malicious activity. Furthermore, skilled adversaries may obfuscate script usage or utilize other methods to bypass detection mechanisms by not using the specified CLSIDs or PowerShell altogether. Understanding these limitations is crucial for SOC analysts to adapt their investigations accordingly.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
