title: Suspicious Start-Process PassThru
id: 0718cd72-f316-4aa2-988f-838ea8533277
status: test
description: Powershell use PassThru option to start in background
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1036.003/T1036.003.md
- https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/Start-Process?view=powershell-5.1&viewFallbackFrom=powershell-7
author: frack113
date: 2022-01-15
tags:
- attack.defense-evasion
- attack.t1036.003
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - Start-Process
    - '-PassThru '
    - '-FilePath '
  condition: selection
falsepositives:
- Legitimate PowerShell scripts
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Suspicious Start-Process PassThru" is designed to identify potentially malicious PowerShell scripts that utilize the `Start-Process` cmdlet with the `-PassThru` option. This capability enables an attacker to spawn processes in the background while capturing their handles. This interaction can often be a tactic used to obscure the execution of malicious processes, making it an important detection point for defenders monitoring for suspicious PowerShell activity. The rule leverages Windows event logs provided by PowerShell script block logging, specifically looking for script block content that includes the keywords "Start-Process," "-PassThru," and "-FilePath." This detection aligns with the MITRE ATT&CK tactic of defense evasion (T1036.003), which covers techniques that attackers use to disguise the presence and execution of their code.
  ### Investigation Steps
  - **Verify PowerShell Logs:** Review the specific PowerShell logs associated with the script block that triggered the alert to examine the complete command and surrounding context.
  - **Analyze Process Creation:** Use EDR tools to inspect the processes spawned by PowerShell; validate the legitimacy and behavior of any created processes associated with the alert.
  - **Check for Indicators of Compromise:** Utilize threat intelligence platforms to determine if the file paths or commands used have been previously flagged as malicious or part of known attack patterns.
  - **Audit Environment Configuration:** Ensure that script block logging is correctly configured and operational within the PowerShell environment to facilitate future detection and analysis.
  ### Prioritization
  Given the medium severity level assigned to this alert, the detection signifies a notable risk that an attacker may be attempting to execute malicious code through PowerShell, necessitating prompt investigation within the enterprise environment.
  ### Blind Spots and Assumptions
  This rule assumes that PowerShell script block logging is enabled, which is often not the case in all environments. If logging is disabled or improperly configured, this rule may fail to fire, potentially allowing malicious activity to go undetected. Additionally, legitimate PowerShell scripts that use similar commands could trigger false positives, complicating the response process. It's important to acknowledge that skilled adversaries might employ obfuscation techniques to bypass detection, such as altering the command syntax or executing PowerShell commands from non-standard process contexts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
