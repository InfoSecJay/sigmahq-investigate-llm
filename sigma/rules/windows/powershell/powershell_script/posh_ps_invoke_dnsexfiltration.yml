title: Powershell DNSExfiltration
id: d59d7842-9a21-4bc6-ba98-64bfe0091355
status: test
description: DNSExfiltrator allows for transferring (exfiltrate) a file over a DNS
  request covert channel
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1048/T1048.md#atomic-test-3---dnsexfiltration-doh
- https://github.com/Arno0x/DNSExfiltrator
author: frack113
date: 2022-01-07
tags:
- attack.exfiltration
- attack.t1048
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_cmdlet:
  - ScriptBlockText|contains: 'Invoke-DNSExfiltrator'
  - ScriptBlockText|contains|all:
    - ' -i '
    - ' -d '
    - ' -p '
    - ' -doh '
    - ' -t '
  condition: selection_cmdlet
falsepositives:
- Legitimate script
level: high
notes: |
  ### Technical Context
  The "Powershell DNSExfiltration" detection rule is designed to identify attempts at data exfiltration using a PowerShell script called DNSExfiltrator. This tool leverages DNS requests as a covert channel to transfer files, a method that can often evade traditional security measures. The rule operates by monitoring PowerShell script block logs for specific command-line patterns associated with the operation of DNSExfiltrator, specifically looking for the command "Invoke-DNSExfiltrator" along with its execution parameters (such as "-i" for input file, "-d" for destination, "-p" for port, "-doh" for DNS over HTTPS, and "-t" for type). It requires that PowerShell script block logging is enabled to capture relevant execution details. This detection is aligned with the MITRE ATT&CK framework, specifically the **Exfiltration** tactic under the technique **T1048: Exfiltration Over Alternative Protocol**.
  ### Investigation Steps
  - **Review PowerShell Logs:** Check the PowerShell script block logs in Windows Event Logs to locate instances of the "Invoke-DNSExfiltrator" command and confirm the parameters used.
  - **Analyze Network Traffic:** Utilize the EDR and network intrusion detection systems (NDR) to monitor for any unusual DNS traffic or outbound DNS requests that may correspond with the identified script executions.
  - **Correlate with user activity:** Cross-reference the PowerShell execution context with user activity logs to determine if the responsible user has legitimate authorization for the actions taken or if they exhibit suspicious behaviors.
  - **Check for false positives:** Inspect the context of the alert to identify any legitimate scripts that may have triggered the rule, validating if the detected activity correlates with known good behavior patterns.
  ### Prioritization
  The alert is classified as high severity due to the potential impact of data loss through unauthorized exfiltration of sensitive information over DNS, which can be particularly challenging to detect and prevent.
  ### Blind Spots and Assumptions
  Potential blind spots include scenarios where PowerShell script block logging is disabled, as this would prevent detection of the DNSExfiltrator being executed. Additionally, legitimate scripts that utilize similar command patterns could generate false positives. It is assumed that all users and systems are properly configured to log PowerShell activities, which may not always be the case in certain enterprise environments. Adversaries could also employ obfuscation techniques that alter the command structure, thereby avoiding detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
