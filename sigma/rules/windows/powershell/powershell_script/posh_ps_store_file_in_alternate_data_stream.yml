title: Powershell Store File In Alternate Data Stream
id: a699b30e-d010-46c8-bbd1-ee2e26765fe9
status: test
description: Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1564.004/T1564.004.md
author: frack113
date: 2021-09-02
modified: 2022-12-25
tags:
- attack.defense-evasion
- attack.t1564.004
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection_compspec:
    ScriptBlockText|contains|all:
    - 'Start-Process'
    - '-FilePath "$env:comspec" '
    - '-ArgumentList '
    - '>'
  condition: selection_compspec
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This detection rule focuses on identifying PowerShell scripts that potentially store files in Alternate Data Streams (ADS), which is a method used by some malware, such as Astaroth, to hide data. This technique falls under the MITRE ATT&CK framework's "Defense Evasion" tactic, specifically the technique T1564.004, which describes data hiding methods. The rule looks for specific phrases within the ScriptBlockText of PowerShell scripts that indicate the use of the Start-Process command with arguments for redirecting output to a file path alongside the `$env:comspec` environment variable. The primary data source utilized for this detection is the PowerShell Script Block Logging, so it is essential that this feature is enabled on the systems being monitored.
  ### Investigation Steps
  - **Check PowerShell Logs:** Review Windows PowerShell script block logs for instances where the Start-Process command is invoked with the specified file path and argument list manipulation. These logs will provide insight into malicious or suspicious activity involving Alternate Data Streams.
  - **Analyze Associated Processes:** Use an EDR tool to identify any associated processes that have invoked the detected PowerShell commands and determine if they have legitimate or questionable origins.
  - **Inspect Alternate Data Streams:** Utilize a tool or command (like `Get-Item` in PowerShell) to inspect file system objects for any files with assigned Alternate Data Streams to determine if any unusual streams exist that were not previously documented.
  - **Correlate with Other Alerts:** Cross-reference with other logs such as those from network detection or proxy logs to identify any unusual downloads or backend communications that work in conjunction with the detected PowerShell activities.
  ### Prioritization
  This alert is categorized as medium severity due to the potential use of ADS for data exfiltration or evasion by attackers utilizing techniques that are known to obscure malicious payloads or activities.
  ### Blind Spots and Assumptions
  This rule may not trigger if Script Block Logging is not enabled, which is a primary prerequisite for this detection to function. Additionally, attackers can defeat this detection by obfuscating PowerShell commands or using different means to execute their malicious intent without leveraging ADS or Start-Process. Analysts should be aware that legitimate PowerShell scripts may also cause false positives, and thorough context surrounding each alert is vital for accurate investigation.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs. Please communicate any changes to the detection engineering team.
