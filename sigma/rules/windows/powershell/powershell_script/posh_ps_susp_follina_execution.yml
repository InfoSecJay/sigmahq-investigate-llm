title: Troubleshooting Pack Cmdlet Execution
id: 03409c93-a7c7-49ba-9a4c-a00badf2a153
status: test
description: Detects execution of "TroubleshootingPack" cmdlets to leverage CVE-2022-30190
  or action similar to "msdt" lolbin (as described in LOLBAS)
references:
- https://twitter.com/nas_bench/status/1537919885031772161
- https://lolbas-project.github.io/lolbas/Binaries/Msdt/
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-06-21
tags:
- attack.defense-evasion
- attack.t1202
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - 'Invoke-TroubleshootingPack'
    - 'C:\Windows\Diagnostics\System\PCW'
    - '-AnswerFile'
    - '-Unattended'
  condition: selection
falsepositives:
- Legitimate usage of "TroubleshootingPack" cmdlet for troubleshooting purposes
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Troubleshooting Pack Cmdlet Execution" is designed to detect the execution of specific PowerShell cmdlets associated with the Windows "TroubleshootingPack", particularly in relation to CVE-2022-30190. This vulnerability, also known as "msdt", can be exploited by adversaries using legitimate Windows functionalities to perform malicious actions, making it a target for detection. The rule monitors PowerShell script execution where the ScriptBlockText contains specific parameters, such as 'Invoke-TroubleshootingPack', which indicates an attempt to leverage this command for potentially harmful activities. In order for this rule to be effective, Windows Script Block Logging must be enabled to capture the relevant PowerShell activity. This detection aligns with the MITRE ATT&CK tactic of Defense Evasion (ATT&CK ID: T1202), where attackers may use legitimate tools and processes to evade detection.
  ### Investigation Steps
  - **Analyze PowerShell Logs:** Review Windows PowerShell logs for any instances of 'Invoke-TroubleshootingPack'. Assess if the command was executed in a context that is consistent with legitimate use or if it raises suspicion.
  - **Check User Context:** Investigate the user account that executed the cmdlet. Verify whether this account has a legitimate need to run troubleshooting commands, especially in a production environment.
  - **Correlate with Process Creation:** Examine process creation events around the time of the detected execution. Identify any suspicious parent processes that may indicate exploitation of the cmdlet.
  - **Review Network Activity:** Utilize your Network Detection and Response (NDR) tools to analyze any network activity initiated by the process. Look for unusual connections or data exfiltration attempts that may indicate malicious intent.
  ### Prioritization
  The alert is classified as medium severity due to the potential for misuse of built-in Windows functionalities by malicious actors. While legitimate use cases exist, the association with a known CVE highlights a significant risk that warrants prompt investigation.
  ### Blind Spots and Assumptions
  This detection relies on the assumption that Script Block Logging is enabled, which may not always be the case in every environment. If users are not running the cmdlets in a way that generates compatible logs or if they are using other methods to evade logging, the rule may not trigger. Additionally, legitimate administrative actions could generate false positives, thus necessitating further granularity in analysis to distinguish between good and bad activities.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
