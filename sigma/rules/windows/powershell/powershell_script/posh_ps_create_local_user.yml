title: PowerShell Create Local User
id: 243de76f-4725-4f2e-8225-a8a69b15ad61
status: test
description: Detects creation of a local user via PowerShell
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1136.001/T1136.001.md
author: '@ROxPinTeddy'
date: 2020-04-11
modified: 2022-12-25
tags:
- attack.execution
- attack.t1059.001
- attack.persistence
- attack.t1136.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains: 'New-LocalUser'
  condition: selection
falsepositives:
- Legitimate user creation
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the creation of local user accounts through PowerShell commands, specifically by monitoring for the use of the `New-LocalUser` cmdlet. The rule relies on capturing data from PowerShell script block logging, which is a feature in Windows that records the execution of PowerShell scripts and commands. When a user runs a script that includes `New-LocalUser`, this event is logged and can be analyzed to identify potential unauthorized account creations, which may be indicative of malicious activity or compromise. The use of script block logging must be enabled for this rule to function correctly.
  By analyzing the logs generated from PowerShell executions, the SOC team can identify instances where new local users are created, allowing for timely investigation and response to unauthorized changes within the user accounts on a machine. This is particularly relevant in environments where strict user management policies are in place to avoid security risks.
  ### Investigation Steps
  - Review PowerShell logs in the EDR solution to identify the specific instances of `New-LocalUser` execution, including the context in which it was run.
  - Check the user account creation time and compare it against other related activities in cloud platforms like AWS or Azure for any anomalous behavior.
  - Investigate the originating process and parent processes to determine if the PowerShell command was executed by a legitimate user or a potentially compromised account.
  - Examine other security tools such as Antivirus logs and Network Detection Response data to identify any malicious activities preceding or following the account creation.
