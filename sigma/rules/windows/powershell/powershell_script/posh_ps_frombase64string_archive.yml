title: Suspicious FromBase64String Usage On Gzip Archive - Ps Script
id: df69cb1d-b891-4cd9-90c7-d617d90100ce
related:
- id: d75d6b6b-adb9-48f7-824b-ac2e786efe1f
  type: similar
status: test
description: Detects attempts of decoding a base64 Gzip archive in a PowerShell script.
  This technique is often used as a method to load malicious content into memory afterward.
references:
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=43
author: frack113
date: 2022-12-23
tags:
- attack.command-and-control
- attack.t1132.001
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
  selection:
    ScriptBlockText|contains|all:
    - 'FromBase64String'
    - 'MemoryStream'
    - 'H4sI'
  condition: selection
falsepositives:
- Legitimate administrative script
level: medium
notes: |
  n
  ### Technical Context
  This detection rule identifies suspicious usage of the `FromBase64String` method in PowerShell scripts, specifically when decoding Gzip archives. The rule monitors Script Block Logging events generated from PowerShell scripts to look for specific patterns in the script content. The detection focuses on three elements: the invocation of `FromBase64String`, the utilization of `MemoryStream`, and the presence of the Gzip header (`H4sI`). By employing these elements, the rule aims to catch potentially malicious activities that attempt to load encoded payloads directly into memory, a common technique used by attackers to obfuscate their processes and evade traditional detection methods. This technique relates to the MITRE ATT&CK framework under the tactic of Command and Control (T1132.001).
  ### Investigation Steps
  - **Review the Alert Context:** Examine the alert in the SIEM for the specific PowerShell script that triggered the detection. Take note of the script's origin and the user context under which it was executed.
  - **Analyze Script Block Logging:** Access the relevant PowerShell logs to fetch and analyze the complete content of the triggering script. Authenticate the legitimacy of the script by checking if it corresponds to known administrative tasks.
  - **Correlate with Other Logs:** Utilize EDR to trace any additional endpoints associated with the initiating user. Check for suspicious process creation events or abnormal network connections that might indicate further malicious activity.
  - **Network Traffic Analysis:** Examine proxy and network logs for outbound connections made by the PowerShell process. Look for communication with known malicious IPs or domains that could confirm the rule's suspicion of malicious intent.
  ### Prioritization
  The medium severity level is assigned to this alert due to the potential risk associated with executing obfuscated PowerShell scripts that might circumvent security controls, indicating an attempted or ongoing compromise.
  ### Blind Spots and Assumptions
  This rule assumes that Script Block Logging is enabled; otherwise, it may not capture relevant script executions. Another limitation is the potential for false positives from legitimate administrative scripts that also use these PowerShell methods for non-malicious purposes. Additionally, if an adversary uses obfuscation techniques or modifies the script to avoid these keywords, the detection may fail to trigger.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
