title: Potential WinAPI Calls Via PowerShell Scripts
id: 03d83090-8cba-44a0-b02f-0b756a050306
related:
- id: ba3f5c1b-6272-4119-9dbd-0bc8d21c2702
  type: similar
status: test
description: Detects use of WinAPI functions in PowerShell scripts
references:
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse
author: Nasreddine Bencherchali (Nextron Systems), Nikita Nazarov, oscd.community
date: 2020-10-06
modified: 2023-06-20
tags:
- attack.execution
- attack.t1059.001
- attack.t1106
logsource:
  product: windows
  category: ps_script
  definition: 'Requirements: Script Block Logging must be enabled'
detection:
    # Note: Add more suspicious combinations in the form of different selections
  selection_injection:
    ScriptBlockText|contains|all:
    - 'VirtualAlloc'
    - 'OpenProcess'
    - 'WriteProcessMemory'
    - 'CreateRemoteThread'
  selection_token_steal:
    ScriptBlockText|contains|all:
    - 'OpenProcessToken'
    - 'LookupPrivilegeValue'
    - 'AdjustTokenPrivileges'
  selection_duplicate_token:
    ScriptBlockText|contains|all:
    - 'OpenProcessToken'
    - 'DuplicateTokenEx'
    - 'CloseHandle'
  selection_process_write_read:
    ScriptBlockText|contains|all:
    - 'WriteProcessMemory'
    - 'VirtualAlloc'
    - 'ReadProcessMemory'
    - 'VirtualFree'
  condition: 1 of selection_*
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule identifies the use of potentially malicious WinAPI functions within PowerShell scripts by monitoring the Script Block Logging feature in Windows PowerShell. Specifically, it looks for common API calls such as `VirtualAlloc`, `OpenProcess`, `WriteProcessMemory`, and others often associated with process manipulation and memory injection tactics. Utilizing Script Block Logs from the Windows OS, the rule detects patterns indicative of potentially harmful activities, aligned with the MITRE ATT&CK tactic of Execution (Technique T1059.001) and Privilege Escalation (Technique T1106). Alert generation occurs when the specified functions are found within executed script blocks, allowing SOC analysts to investigate potentially unauthorized behavior executed through PowerShell.
  ### Investigation Steps
  - **Review PowerShell Logs**: Use the PowerShell Script Block Logging to inspect the complete content of executed scripts around the time of the alert. Look for any anomalies in the script input or unexpected usage of sensitive APIs.
  - **Cross-reference with EDR**: Check endpoint detection and response (EDR) telemetry for any corresponding process executions or activities that coincide with the alert. This includes process creation events, command-line parameters, and parent-child process relationships.
  - **Analyze Account Activity**: Verify the user accounts associated with the PowerShell executions. Determine if the accounts had the appropriate permissions and if their usage aligns with normal operational patterns.
  - **Examine Network Activity**: Review proxy and network logs for any related outgoing connections that may indicate data exfiltration or command and control (C2) communications initiated by the detected PowerShell scripts.
  ### Prioritization
  This alert is classified as high severity due to the inherent risks associated with script-based execution of WinAPI calls, which can be indicative of advanced threats attempting to evade detection or execute arbitrary code on endpoints.
  ### Blind Spots and Assumptions
  This rule assumes that Script Block Logging is enabled on the monitored endpoints. It may not fire in environments where this logging is disabled or if PowerShell execution policies restrict certain behaviors. Additionally, sophisticated adversaries might obfuscate their scripts, use legitimate APIs for benign purposes, or utilize alternate scripting languages to evade detection, potentially leading to false negatives.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
