title: PowerShell Downgrade Attack - PowerShell
id: 6331d09b-4785-4c13-980f-f96661356249
status: test
description: Detects PowerShell downgrade attack by comparing the host versions with
  the actually used engine version 2.0
references:
- http://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/
author: Florian Roth (Nextron Systems), Lee Holmes (idea), Harish Segar (improvements)
date: 2017-03-22
modified: 2023-10-27
tags:
- attack.defense-evasion
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_classic_start
detection:
  selection:
    Data|contains: 'EngineVersion=2.'
  filter_main:
    Data|contains: 'HostVersion=2.'
  condition: selection and not filter_main
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potential PowerShell downgrade attacks on Windows systems. A downgrade attack occurs when an attacker exploits vulnerabilities in older versions of software—in this case, PowerShell—to evade security measures or execute unauthorized commands. The rule works by analyzing PowerShell log data, specifically focusing on the version of the PowerShell engine that is reported during execution. It compares the engine version used (specifically when it is version 2.0) against the host version of PowerShell. If the host version is higher than 2.0, but the engine version is reported as 2.0, it is indicative of a potential downgrade attack. This detection correlates with the MITRE ATT&CK technique T1059.001, which pertains to PowerShell and highlights defense evasion tactics.
  This rule utilizes Windows Event Logs—particularly those from PowerShell—which are enriched with different fields that include information about command executions and their associated versions. By monitoring these logs, security teams can effectively identify signs of a downgrade attack and take timely remedial action.
  ### Investigation Steps
  - **Review PowerShell Logs:** Examine the relevant PowerShell logs to verify the version information of the PowerShell engine being used. Look for discrepancies where the engine version reported is 2.0 while the host version is higher.
  - **Correlate with Process Execution:** Use EDR tools to trace the processes associated with the PowerShell execution. Check for any indicators of abuse or unexpected behavior linked to the identified PowerShell instances.
  - **Assess the Environment:** Validate the environment's configuration and security policies around PowerShell use. Check if the organization permits PowerShell version downgrades or if there are any exceptions that could lead to legitimate usage of an older version.
  - **Consult Network Activity:** Investigate outbound network connections made during the timeframe of the detected alert. Examine proxy and firewall logs for any unusual traffic that may correlate with the timing of the PowerShell activity, indicating possible data exfiltration or command-and-control communications.
  ### Prioritization
  The severity level of the alert is categorized as medium due to the potential risks associated with running an unsupported version of PowerShell, which could lead to exploitation by malicious actors. Downgrade attacks can effectively bypass security controls, warranting prompt investigation.
  ### Blind Spots and Assumptions
  One potential blind spot is the occurrence of legitimate system maintenance or compatibility operations that may require temporary use of an older PowerShell version, which can lead to false positives. Additionally, if an organization's environment allows for multiple versions of PowerShell to coexist, it may fragment detection capabilities. Assumptions surrounding the accuracy of log data and the presence of comprehensive logging mechanisms must also be considered, as inadequate log retention may prevent detection in the event of a past attack. Other engineers should be aware that adversaries could disable logging or manipulate the environment to hide their activities, so it is essential to maintain visibility across all layers of the infrastructure.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
