title: Zip A Folder With PowerShell For Staging In Temp - PowerShell
id: 71ff406e-b633-4989-96ec-bc49d825a412 # PowerShell Classic
related:
- id: daf7eb81-35fd-410d-9d7a-657837e602bb     # PowerShell Module
  type: similar
- id: b7a3c9a3-09ea-4934-8864-6a32cacd98d9     # PowerShell Script
  type: similar
- id: 85a8e5ba-bd03-4bfb-bbfa-a4409a8f8b98     # Process Creation
  type: similar
status: test
description: |
  Detects PowerShell scripts that make use of the "Compress-Archive" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.
  An adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1074.001/T1074.001.md
- https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a
author: Nasreddine Bencherchali (Nextron Systems), frack113
date: 2021-07-20
modified: 2023-12-18
tags:
- attack.collection
- attack.t1074.001
logsource:
  product: windows
  service: powershell-classic
detection:
  selection:
    Data|contains:
    - 'Compress-Archive -Path*-DestinationPath $env:TEMP'
    - 'Compress-Archive -Path*-DestinationPath*\AppData\Local\Temp\'
    - 'Compress-Archive -Path*-DestinationPath*:\Windows\Temp\'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the use of PowerShell's `Compress-Archive` cmdlet, specifically when it is utilized to compress folders and files into locations often associated with malicious activity, such as the Temp directory. The detection mechanism involves monitoring PowerShell command executions, focusing on the command-line parameters that indicate an attempt to compress content into suspicious directories (e.g., `$env:TEMP`, `C:\AppData\Local\Temp\`, and `C:\Windows\Temp\`). Adversaries may employ this method to gather and compress sensitive data prior to exfiltration, making it more portable and efficient to transfer. The associated MITRE ATT&CK technique for this rule is T1074.001 
  - Data Staged, under the tactic of Collection, which highlights the adversarial intent to collect and prepare data for later exfiltration or exploitation.
  ### Investigation Steps
  - **Check PowerShell Logs**: Review Windows Event Logs related to PowerShell executions, specifically focusing on events that capture command-line arguments to identify the usage of `Compress-Archive` and the paths specified.
  - **Examine Process Tree**: Use endpoint detection and response (EDR) tools to investigate the process tree for the PowerShell process that executed the compression command, ensuring to follow any parent or child processes that might indicate malicious intent.
  - **Correlate with File Activity**: Analyze file activity logs to detect any subsequent file creations or modifications in the locations targeted by the `Compress-Archive` cmdlet, particularly monitoring for larger than usual file sizes indicating potential data staging.
  - **Network Traffic Analysis**: Investigate network logs to identify any unusual outbound traffic that follows the compression event, looking for data exfiltration patterns or connections to known malicious IPs associated with data theft.
  ### Prioritization
  This alert is categorized as medium severity due to the potential risk it poses in an enterprise environment, where an adversary could use the `Compress-Archive` cmdlet to stage sensitive data for exfiltration, thus warranting prompt investigation.
  ### Blind Spots and Assumptions
  The rule may not fire if the PowerShell execution policy is restrictive, if the cmdlet is executed in a manner that does not match the specific patterns defined, or if obfuscation techniques are utilized (e.g., base64 encoding). Additionally, if system logging is disabled or improperly configured, the detection may fail to capture necessary telemetry. It is assumed that PowerShell logging is enabled, and adequate permissions are granted to monitor such activities effectively.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
