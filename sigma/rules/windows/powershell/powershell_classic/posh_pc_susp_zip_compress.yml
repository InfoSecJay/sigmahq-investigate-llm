title: Zip A Folder With PowerShell For Staging In Temp - PowerShell
id: 71ff406e-b633-4989-96ec-bc49d825a412 # PowerShell Classic
related:
- id: daf7eb81-35fd-410d-9d7a-657837e602bb     # PowerShell Module
  type: similar
- id: b7a3c9a3-09ea-4934-8864-6a32cacd98d9     # PowerShell Script
  type: similar
- id: 85a8e5ba-bd03-4bfb-bbfa-a4409a8f8b98     # Process Creation
  type: similar
status: test
description: |
  Detects PowerShell scripts that make use of the "Compress-Archive" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.
  An adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1074.001/T1074.001.md
- https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a
author: Nasreddine Bencherchali (Nextron Systems), frack113
date: 2021-07-20
modified: 2023-12-18
tags:
- attack.collection
- attack.t1074.001
logsource:
  product: windows
  service: powershell-classic
detection:
  selection:
    Data|contains:
    - 'Compress-Archive -Path*-DestinationPath $env:TEMP'
    - 'Compress-Archive -Path*-DestinationPath*\AppData\Local\Temp\'
    - 'Compress-Archive -Path*-DestinationPath*:\Windows\Temp\'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the use of PowerShell's `Compress-Archive` cmdlet to zip files or folders in potentially suspicious locations, typically where threats may stage data for exfiltration. The rule specifically looks for command lines that utilize the `Compress-Archive` cmdlet and store output in the environment variable `$env:TEMP`, the local AppData Temp directory, or the Windows Temp directory. Adversaries often use such techniques to compress sensitive data before exfiltration, making it more manageable to transfer. By monitoring for these specific command patterns, analysts can identify and investigate instances where legitimate administrative tasks may be misused for malicious purposes.
  ### Investigation Steps
  - Query process creation logs in the EDR for any instances of PowerShell executing the `Compress-Archive` command that match the identified patterns.
  - Review logs from the Windows Event Viewer for unusual activity in the directories `$env:TEMP`, `C:\Users\<Username>\AppData\Local\Temp\`, and `C:\Windows\Temp\` to find files created or modified around the same time as the alert.
  - Check network traffic logs for any outbound connections to external IPs that occur shortly after the PowerShell command execution, which may indicate an attempted data exfiltration.
  - Analyze any associated user activity or access logs to determine if there are any anomalous login attempts or privilege escalations leading up to the execution of the detected command.
