title: Renamed Powershell Under Powershell Channel
id: 30a8cb77-8eb3-4cfb-8e79-ad457c5a4592
status: test
description: |
  Detects a renamed Powershell execution, which is a common technique used to circumvent security controls and bypass detection logic that's dependent on process names and process paths.
references:
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse
author: Harish Segar, frack113
date: 2020-06-29
modified: 2025-01-20
tags:
- attack.execution
- attack.t1059.001
- attack.t1036.003
logsource:
  product: windows
  category: ps_classic_start
detection:
  selection:
    Data|contains: 'HostName=ConsoleHost'
    # Note: Powershell Logging Data is localized. Meaning that "HostApplication" field will be translated to a different field on a non english layout. This rule doesn't take this into account due to the sheer amount of possibilities. It's up to the user to add these cases.
  filter_main_ps:
    Data|contains:
    - 'HostApplication=powershell'
    - 'HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell'
    - 'HostApplication=C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell'
            # In some cases powershell was invoked with inverted slashes
    - 'HostApplication=C:/Windows/System32/WindowsPowerShell/v1.0/powershell'
    - 'HostApplication=C:/Windows/SysWOW64/WindowsPowerShell/v1.0/powershell'
    - 'HostApplication=C:\\\\WINDOWS\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'
    - 'HostApplication=C:\\\\WINDOWS\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'
  filter_main_host_application_null:
        # Note: Since we're using the raw data field to match. There is no easy way to filter out cases where the "HostApplication" field is null (i.e doesn't exist). We're practically forced to use a regex.
        # If you're already mapping and extracting the field, then obviously use that directly.
    Data|re: 'HostId=[a-zA-Z0-9-]{36}\s+EngineVersion='
  condition: selection and not 1 of filter_main_*
falsepositives:
- Unknown
level: low
notes: |
  ### Technical Context
  The Sigma rule titled "Renamed Powershell Under Powershell Channel" is designed to detect instances of PowerShell being executed with a renamed or modified process name. This technique is frequently employed by adversaries to evade detection mechanisms that rely on process names and paths, which are common indicators of malicious behavior. The rule looks for specifics within PowerShell logging data, specifically checking the `HostApplication` field to identify instances where PowerShell is invoked using non-standard names. This rule leverages Windows Sysmon logs, particularly focusing on command execution activity as characterized by the MITRE ATT&CK tactic for Execution (T1059.001: PowerShell) and the tactic for Obfuscation (T1036.003: Masquerading).
  By examining the logging details for the usage of PowerShell, the rule filters for renamed executions of PowerShell processes by utilizing specific string matching and regular expressions to catch any deviations from the expected PowerShell paths. This makes it a critical tool for incident responders to flag anomalous behavior that could indicate attempts at bypassing security controls.
  ### Investigation Steps
  - **Check EDR Logs**: Review EDR logs for the execution history of the identified PowerShell session, focusing on parent processes that spawned the renamed PowerShell instance.
  - **Analyze Sysmon Events**: Utilize Sysmon's process creation logs to gain insights into the command-line arguments and the execution context of the observed PowerShell process.
  - **Review Security Logs**: Cross-reference Windows Security logs to investigate any corresponding authentication events that may relate to the suspicious PowerShell activity.
  - **Inspect Network Connections**: Using your network detection tools, analyze any outbound connections made by the process to identify potential data exfiltration or communication with command-and-control servers.
  ### Prioritization
  When this alert is triggered, it is considered low severity in an enterprise environment due to the potential for false positives; however, it warrants thorough investigation as the execution of PowerShell with renamed parameters can indicate attempts by adversaries to mask malicious activity.
  ### Blind Spots and Assumptions
  This rule may not fire in environments where PowerShell logging is not fully enabled or where custom configurations obscure required logging fields. Additionally, the detection relies on filtering for specific paths and might miss localized versions of PowerShell or renamed executables that do not match the current regular expressions. Adversaries may also employ techniques to obfuscate the command invocation that bypasses this rule entirely; thus, ongoing monitoring and refinement of the detection strategy are crucial.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and completeness, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
