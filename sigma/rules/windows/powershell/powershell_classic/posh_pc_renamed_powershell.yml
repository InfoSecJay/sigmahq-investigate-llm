title: Renamed Powershell Under Powershell Channel
id: 30a8cb77-8eb3-4cfb-8e79-ad457c5a4592
status: test
description: |
  Detects a renamed Powershell execution, which is a common technique used to circumvent security controls and bypass detection logic that's dependent on process names and process paths.
references:
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse
author: Harish Segar, frack113
date: 2020-06-29
modified: 2025-01-20
tags:
- attack.execution
- attack.t1059.001
- attack.t1036.003
logsource:
  product: windows
  category: ps_classic_start
detection:
  selection:
    Data|contains: 'HostName=ConsoleHost'
    # Note: Powershell Logging Data is localized. Meaning that "HostApplication" field will be translated to a different field on a non english layout. This rule doesn't take this into account due to the sheer amount of possibilities. It's up to the user to add these cases.
  filter_main_ps:
    Data|contains:
    - 'HostApplication=powershell'
    - 'HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell'
    - 'HostApplication=C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell'
            # In some cases powershell was invoked with inverted slashes
    - 'HostApplication=C:/Windows/System32/WindowsPowerShell/v1.0/powershell'
    - 'HostApplication=C:/Windows/SysWOW64/WindowsPowerShell/v1.0/powershell'
    - 'HostApplication=C:\\\\WINDOWS\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'
    - 'HostApplication=C:\\\\WINDOWS\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'
  filter_main_host_application_null:
        # Note: Since we're using the raw data field to match. There is no easy way to filter out cases where the "HostApplication" field is null (i.e doesn't exist). We're practically forced to use a regex.
        # If you're already mapping and extracting the field, then obviously use that directly.
    Data|re: 'HostId=[a-zA-Z0-9-]{36}\s+EngineVersion='
  condition: selection and not 1 of filter_main_*
falsepositives:
- Unknown
level: low
notes: |
  ### Technical Context
  This Sigma rule is designed to detect renamed executions of PowerShell, which is a common evasion technique used by threat actors to circumvent security mechanisms that rely on predefined process names and paths. The rule focuses on monitoring the PowerShell classic startup events and looks for the presence of specific identifiers in the associated log data. It checks for executions where the `HostName` is set to "ConsoleHost" and ensures that the `HostApplication` field contains the expected paths to legitimate PowerShell binaries. By filtering out these legitimate instances, the rule helps identify potentially malicious attempts to disguise the true nature of the executed commands, thus enabling proactive threat detection.
  ### Investigation Steps
  - Utilize EDR tools to investigate the specific PowerShell process that triggered the alert. Review the parent process and any related command-line arguments for indications of unusual behavior or alerting patterns.
  - Check the logs for any recent changes to PowerShell execution policies. Unusual manipulations here can signal attempts to bypass security controls.
  - Review network activity logs to determine if there were any outbound connections established by the PowerShell process. Look for communication to suspicious or unrecognized external IP addresses.
  - Examine the related event logs and system changes, especially in the context of user activities on affected endpoints, to identify any potentially compromised accounts or lateral movement tactics.
