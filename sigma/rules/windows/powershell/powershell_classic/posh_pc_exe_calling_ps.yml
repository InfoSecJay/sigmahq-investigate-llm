title: PowerShell Called from an Executable Version Mismatch
id: c70e019b-1479-4b65-b0cc-cd0c6093a599
status: test
description: Detects PowerShell called from an executable by the version mismatch
  method
references:
- https://adsecurity.org/?p=2921
author: Sean Metcalf (source), Florian Roth (Nextron Systems)
date: 2017-03-05
modified: 2023-10-27
tags:
- attack.defense-evasion
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_classic_start
detection:
  selection_engine:
    Data|contains:
    - 'EngineVersion=2.'
    - 'EngineVersion=4.'
    - 'EngineVersion=5.'
  selection_host:
    Data|contains: 'HostVersion=3.'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule identifies instances where PowerShell is invoked from an executable that exhibits a version mismatch. Specifically, it looks for cases where PowerShell processes are started with an engine version of 2, 4, or 5, while the host system reports a version of 3. This discrepancy may indicate potential malicious activity, as attackers often leverage this tactic to bypass security mechanisms by exploiting PowerShell's capabilities within a compromised environment. The rule primarily relies on logs from Windows PowerShell, particularly the classic start logs, which capture the version details of both the PowerShell engine and the host system.
  By monitoring the engine and host version pairing, this rule generates alerts for unusual behavior indicative of potential exploitation or misuse of PowerShell. Incident responders should be aware that while the false positive rate is uncertain, this detection has broad implications for identifying advanced threats, where PowerShell is frequently used for execution of scripts to evade detection.
  ### Investigation Steps
  - Verify the source of the PowerShell invocation by analyzing process creation logs to determine the parent process and any associated command-line arguments.
  - Cross-reference the detected versions with known software or application updates to ascertain if the mismatch stems from legitimate changes or potential exploitation.
  - Utilize EDR tools to investigate further into the PowerShell activity, examining the timeline of execution, connecting processes, and any other related system behaviors.
  - Review network traffic logs through your NDR capabilities to identify any suspicious outbound communications initiated by the PowerShell process that could indicate data exfiltration or command/control callbacks.
