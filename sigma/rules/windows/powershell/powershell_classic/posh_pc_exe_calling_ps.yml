title: PowerShell Called from an Executable Version Mismatch
id: c70e019b-1479-4b65-b0cc-cd0c6093a599
status: test
description: Detects PowerShell called from an executable by the version mismatch
  method
references:
- https://adsecurity.org/?p=2921
author: Sean Metcalf (source), Florian Roth (Nextron Systems)
date: 2017-03-05
modified: 2023-10-27
tags:
- attack.defense-evasion
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: ps_classic_start
detection:
  selection_engine:
    Data|contains:
    - 'EngineVersion=2.'
    - 'EngineVersion=4.'
    - 'EngineVersion=5.'
  selection_host:
    Data|contains: 'HostVersion=3.'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule detects suspicious instances where PowerShell is invoked from an executable that has a version mismatch between the PowerShell Engine and the Host. Specifically, it looks for scenarios where the PowerShell Engine version is either 2, 4, or 5, while the Host version is 3. This discrepancy can indicate an evasion technique employed by adversaries aiming to bypass security measures or execute malicious code undetected. The key data sources involved in this detection include Windows PowerShell logs, which capture the execution of PowerShell scripts and commands initiated from executables. 
  The rule aligns with the MITRE ATT&CK framework under the techniques of Execution (T1059.001), particularly focusing on the use of PowerShell to facilitate both legitimate and malicious activities. By monitoring these logs, security teams can identify potentially harmful behaviors that may indicate malicious intent or unauthorized activity.
  ### Investigation Steps
  - **Review PowerShell Logs:** Check the PowerShell execution logs for instances where the EngineVersion and HostVersion values match the rule conditions, noting the timestamp and invoking executable.
    
  - **Analyze the Executable:** Use EDR tools to inspect the executable that called PowerShell, including its reputation, digital signature, and behavior at the time of execution.
    
  - **Correlate with Network Logs:** Cross-reference any network activity associated with the detected PowerShell call using NDR tools, looking for unusual outbound connections or known malicious IP addresses.
    
  - **Check for Additional Artifacts:** Investigate related system events, such as process creation or registry changes, within Windows Event Logs to gather context on the potential impact or scope of the incident.
  ### Prioritization
  Alerts generated by this rule are considered high severity due to the potential implications of a PowerShell call initiated from an executable with a version mismatch, indicating possible malicious behavior that evades typical security configurations.
  ### Blind Spots and Assumptions
  This rule assumes that PowerShell is being utilized in an environment where version mismatches are uncommon. It may not trigger in scenarios where legitimate software updates or application configurations cause legitimate discrepancies. Additionally, it might fail to detect advanced adversaries who might employ methods to camouflage their actions, such as using obfuscation techniques or custom PowerShell binaries that do not exhibit the expected version flags.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and applicability, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
