title: New DLL Added to AppInit_DLLs Registry Key
id: 4f84b697-c9ed-4420-8ab5-e09af5b2345d
status: test
description: DLLs that are specified in the AppInit_DLLs value in the Registry key
  HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows are loaded by user32.dll
  into every process that loads user32.dll
references:
- https://eqllib.readthedocs.io/en/latest/analytics/822dc4c5-b355-4df8-bd37-29c458997b8f.html
author: Ilyas Ochkov, oscd.community, Tim Shelton
date: 2019-10-25
modified: 2022-12-25
tags:
- attack.persistence
- attack.t1546.010
logsource:
  category: registry_event
  product: windows
detection:
  selection:
  - TargetObject|endswith:
    - '\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_Dlls'
    - '\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_Dlls'
        # Key Rename
  - NewName|endswith:
    - '\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_Dlls'
    - '\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_Dlls'
  filter:
    Details: '(Empty)'
  condition: selection and not filter
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The detection rule titled **New DLL Added to AppInit_DLLs Registry Key** monitors changes to the AppInit_DLLs registry keys located in `HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows`. This registry entry is critical in Windows as it specifies Dynamic Link Libraries (DLLs) that are loaded by `user32.dll` into every process that calls it. This functionality can be leveraged by attackers to inject malicious code into a wide range of processes, making it a potential vector for persistence mechanisms. By tracking changes to this registry key, the rule aims to detect the addition of unexpected or unauthorized DLLs that could indicate malicious activity, aligning with the MITRE ATT&CK persistence technique (T1546.010). The primary technical data sources involved in this detection include Windows registry event logs which capture modifications made to registry keys.
  ### Investigation Steps
  - **Inspect Registry Changes**: Utilize your registry monitoring tools to review recent changes to the AppInit_DLLs keys and identify the user or process responsible for the modifications. Compare the newly added DLLs against a list of known safe files.
  - **Analyze Process Memory**: Investigate active processes using EDR tools to check if any loaded `user32.dll` instances are invoking the newly added DLLs. This step helps to confirm if the DLLs are being executed in memory, potentially allowing for deeper analysis.
  - **Review Process Creation Events**: Look for recent process creation events in your SIEM that correlate with the timestamp of the registry change. Analyzing the command-line parameters used by these processes may provide additional context about their behavior.
  - **Cross-Reference with Threat Intelligence**: Search for any reported indicators of compromise (IOCs) associated with the new DLLs in threat intelligence platforms. This can help ascertain if these files have been documented in relation to known malware or adversarial activities.
  ### Prioritization
  The severity level for this alert is set to medium because changes to AppInit_DLLs can indicate persistence mechanisms used by attackers, which may not always be immediately harmful but could lead to further exploitation if unaddressed.
  ### Blind Spots and Assumptions
  This rule may not trigger if the modifications to the AppInit_DLLs registry key are made under legitimate administrative activity or through trusted software updates. Additionally, the rule relies on timely capturing of registry events; any delays or issues in logging could lead to missed detections. Moreover, savvy adversaries may employ techniques to obfuscate their modifications or revert the key to a benign state upon detection, potentially evading the alert.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
