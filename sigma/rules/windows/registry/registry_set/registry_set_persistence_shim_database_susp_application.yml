title: Suspicious Shim Database Patching Activity
id: bf344fea-d947-4ef4-9192-34d008315d3a
status: test
description: Detects installation of new shim databases that try to patch sections
  of known processes for potential process injection or persistence.
references:
- https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/pillowmint-fin7s-monkey-thief/
- https://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-08-01
modified: 2023-12-06
tags:
- attack.persistence
- attack.t1546.011
logsource:
  category: registry_set
  product: windows
detection:
  selection:
    TargetObject|contains: '\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom\'
    TargetObject|endswith:
            # Note: add other application to increase coverage
    - '\csrss.exe'
    - '\dllhost.exe'
    - '\explorer.exe'
    - '\RuntimeBroker.exe'
    - '\services.exe'
    - '\sihost.exe'
    - '\svchost.exe'
    - '\taskhostw.exe'
    - '\winlogon.exe'
    - '\WmiPrvSe.exe'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The detection rule titled "Suspicious Shim Database Patching Activity" is designed to identify potentially malicious behavior related to the installation of shim databases on Windows systems. Shim databases are used to enable application compatibility for legacy applications; however, adversaries can exploit this feature to inject code into critical system processes, thereby enhancing their ability to maintain persistence on a compromised system. This rule specifically monitors registry modifications targeting the shim database path located at `\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom\`. By concentrating on specific executable names such as `csrss.exe`, `explorer.exe`, and several others, the rule aims to detect suspicious installations that could indicate process injection tactics outlined in the MITRE ATT&CK framework, specifically the tactic of Persistence (T1546.011).
  The primary data source for this rule is the Windows Registry Set logs, which are pivotal in tracking changes made to the registry that could hint at nefarious intentions. By analyzing these registry modifications, security teams can identify unauthorized attempts to alter behavior within important Windows processes, serving as an early warning signal for potential breaches.
  ### Investigation Steps
  - **Check Registry Logs:** Investigate the Windows Registry logs for the identified target objects to verify any recent additions of shim databases pointing to the specified executables.
  - **Correlate Process Activity:** Utilize EDR tools to correlate any related process creations or modifications around the time the registry changes were made to see if suspicious processes were spawned as a result.
  - **Review Network Connections:** Analyze network connection logs to identify if there were any outbound or unusual network activities associated with the processes in question, which could suggest data exfiltration or further compromise.
  - **Examine System Event Logs:** Look into the Windows Event Logs for system, security, and application events that coincide with the registry changes to identify any anomalies or unauthorized access attempts.
  ### Prioritization
  This alert is classified as high severity due to the critical implications of unauthorized registry modifications, especially those capable of enabling persistence and code execution in sensitive processes. The presence of such activity can indicate an active threat actor attempting to maintain an extended foothold within the environment.
  ### Blind Spots and Assumptions
  The effectiveness of this detection rule relies on the accurate logging of registry modifications, and it may not fire if logging levels are improperly configured or if the relevant registry paths are modified by legitimate applications without triggering an alert. Additionally, advanced adversaries may attempt to disguise their activity by modifying less common executables or may avoid shim databases altogether, thus evading detection. It is assumed that analysts are consistently monitoring system integrity and have sufficient visibility across other telemetry sources for comprehensive threat detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
