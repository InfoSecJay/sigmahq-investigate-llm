title: Potential PowerShell Execution Policy Tampering
id: fad91067-08c5-4d1a-8d8c-d96a21b37814
related:
- id: cf2e938e-9a3e-4fe8-a347-411642b28a9f     # Registry
  type: similar
- id: 87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180     # ProcCreation Cmdlet
  type: similar
- id: 61d0475c-173f-4844-86f7-f3eebae1c66b     # PowerShell ScriptBlock
  type: similar
status: test
description: Detects changes to the PowerShell execution policy in order to bypass
  signing requirements for script execution
references:
- https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.3
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-11
modified: 2023-12-14
tags:
- attack.defense-evasion
logsource:
  category: registry_set
  product: windows
detection:
  selection:
    TargetObject|endswith:
            # Note for future readers: For PowerShell 7+ the ExecutionPolicy is handled via a setting file due to the fact that PWSH7 is available for mac and linux
            # Attackers can create a per-user setting file (powershell.config.json) and set the execution policy there
            # Learn more here: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_powershell_config?view=powershell-7.3
    - '\ShellIds\Microsoft.PowerShell\ExecutionPolicy'
    - '\Policies\Microsoft\Windows\PowerShell\ExecutionPolicy'
    Details|contains:
    - 'Bypass'
    - 'Unrestricted'
  filter_main_svchost:
        # Note: We filter out "svchost" to avoid FP with changes using "gpedit" for example.
    Image|contains:
    - ':\Windows\System32\'
    - ':\Windows\SysWOW64\'
  condition: selection and not 1 of filter_main_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potential tampering with PowerShell execution policies on Windows systems. The primary focus is on registry changes to specific execution policy settings that might allow an attacker to execute scripts without appropriate verification or signing. It watches for modifications to the registry keys associated with PowerShell execution policies, specifically targeting values that indicate policies such as 'Bypass' and 'Unrestricted'. The use of these settings could suggest an evasion tactic employed by malicious actors, as these policies disable security measures normally enforced on script execution. The rule correlates to the MITRE ATT&CK technique called *Defense Evasion*.
  The detection specifically queries the Windows registry, observing modifications to the following paths: 
  - `\ShellIds\Microsoft.PowerShell\ExecutionPolicy`
  - `\Policies\Microsoft\Windows\PowerShell\ExecutionPolicy`
  By validating the contents of these keys, it looks for indications that the PowerShell execution policy has been altered to lessen security controls, thereby potentially facilitating the execution of malicious scripts.
  ### Investigation Steps
  - **Verify Alert Source:** Review Windows Security Event Logs for events related to registry changes and correlate them with the detected alert to confirm the source of the modification.
  - **Check Execution Policy Changes:** Use PowerShell to query the current execution policy (`Get-ExecutionPolicy -List`) on the affected system to understand the current permissions and context under which scripts can execute.
  - **Review Process Creation Logs:** Examine Windows Sysmon Process Creation logs to identify if any PowerShell scripts or commands were executed around the time the registry change was made, paying attention to any unusual parent processes.
  - **Analyze Network Traffic:** Utilize EDR or NDR tools to investigate any outbound network connections initiated by PowerShell, particularly focusing on connections occurring after the policy change, as they may indicate data exfiltration or command and control activity.
  ### Prioritization
  The alert is classified as medium severity due to its implications for security posture and the potential for script-based attacks. While not immediately critical, it signifies a need for thorough investigation to prevent possible exploitation if left unchecked.
  ### Blind Spots and Assumptions
  One key assumption is that the monitored systems are indeed configured to log registry changes. If these logs are not properly configured, the rule may fail to trigger. Additionally, legitimate administrative use cases may lead to false positives if, for example, an authorized user changes the execution policy for legitimate purposes. Adversaries may also attempt to revert execution policies back to secure settings shortly after making changes, potentially evading detection. Lastly, only specific registry paths are monitored, so if an attacker uses alternative approaches to evade PowerShell restrictions or makes configuration changes outside the defined criteria, those activities may go undetected.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
