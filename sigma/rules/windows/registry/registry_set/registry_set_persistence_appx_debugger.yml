title: Potential Persistence Using DebugPath
id: df4dc653-1029-47ba-8231-3c44238cc0ae
status: test
description: Detects potential persistence using Appx DebugPath
references:
- https://oddvar.moe/2018/09/06/persistence-using-universal-windows-platform-apps-appx/
- https://github.com/rootm0s/WinPwnage
author: frack113
date: 2022-07-27
modified: 2023-08-17
tags:
- attack.persistence
- attack.t1546.015
logsource:
  category: registry_set
  product: windows
detection:
  selection_debug:
    TargetObject|contains: 'Classes\ActivatableClasses\Package\Microsoft.'
    TargetObject|endswith: '\DebugPath'
  selection_default:
    TargetObject|contains: '\Software\Microsoft\Windows\CurrentVersion\PackagedAppXDebug\Microsoft.'
    TargetObject|endswith: '\(Default)'
  condition: 1 of selection_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The Sigma rule "Potential Persistence Using DebugPath" is designed to detect indicators of potential persistence mechanisms employed via the Windows Universal Platform Apps (UWP). It specifically looks for changes in the Windows Registry that involve the `DebugPath` key associated with Microsoft activatable classes. This kind of registry manipulation is often leveraged by threat actors to achieve persistence by ensuring that malicious payloads are executed each time the system interacts with UWP applications. The rule tracks two specific registry locations: entries that contain `Classes\ActivatableClasses\Package\Microsoft.` and those under `Software\Microsoft\Windows\CurrentVersion\PackagedAppXDebug\Microsoft.` The associated MITRE ATT&CK tactic is **Persistence**, and the technique is labeled as **T1546.015**. Detecting these changes can be critical as they may indicate attempts to establish long-term presence on a compromised system.
  ### Investigation Steps
  - **Assess Registry Changes:** Use registry monitoring tools within your EDR to review the relevant registry keys for recent modifications, specifically focusing on the `DebugPath` entries.
  - **Analyze Process Activity:** Correlate the identified registry modifications with process creation logs to determine if known malicious processes have been executed or if any unusual applications were run around the same time.
  - **Review Installed Applications:** Examine the deployment and updates of UWP applications in your environment to see if there are any unauthorized or unexpected applications that may relate to the flagged registry changes.
  - **Cross-reference with Threat Intelligence:** Utilize threat intelligence databases to check if the specific UWP applications associated with the registry key changes have known vulnerabilities or link back to threat actor TTPs.
  ### Prioritization
  The alert generated by this rule has a medium severity level because it indicates a potential persistence technique that could allow adversaries to maintain access to compromised systems. However, further analysis is required to establish the actual risk and context of the detected changes.
  ### Blind Spots and Assumptions
  This rule may not fire if adversaries employ custom implementations of persistence that do not utilize the `DebugPath` registry key or if they clean up their traces after executing malicious activities. Additionally, environments highly customized or using non-standard application deployments might lead to false negatives. It's important to note that if a legitimate application update or installation modifies these registry entries, this could result in the alert being triggered as a false positive, emphasizing the need for context in investigations.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and clarity, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
