title: PowerShell Script Execution Policy Enabled
id: 8218c875-90b9-42e2-b60d-0b0069816d10
related:
- id: fad91067-08c5-4d1a-8d8c-d96a21b37814
  type: derived
status: test
description: Detects the enabling of the PowerShell script execution policy. Once
  enabled, this policy allows scripts to be executed.
references:
- https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.PowerShell::EnableScripts
author: Nasreddine Bencherchali (Nextron Systems), Thurein Oo
date: 2023-10-18
tags:
- attack.execution
logsource:
  category: registry_set
  product: windows
detection:
  selection:
    TargetObject|endswith: '\Policies\Microsoft\Windows\PowerShell\EnableScripts'
    Details: 'DWORD (0x00000001)'
  condition: selection
falsepositives:
- Likely
level: low
notes: |
  ### Technical Context
  The "PowerShell Script Execution Policy Enabled" detection rule is designed to monitor changes in the Windows registry related to PowerShell script execution. Specifically, this rule looks for modifications to the registry key that enables the execution of PowerShell scripts, indicated by the DWORD value set to '1' under the path `\Policies\Microsoft\Windows\PowerShell\EnableScripts`. Allowing script execution can introduce security risks as it enables potentially malicious scripts to run on the system. The rule utilizes registry change logs as its primary data source, making it crucial for detecting unauthorized script execution capabilities.
  This detection rule is particularly significant in environments where PowerShell is frequently used for automation tasks but can also be abused by attackers for executing malicious payloads. By enabling this policy, defenders can ensure that any changes regarding script execution are reviewed immediately to mitigate threats effectively.
  ### Investigation Steps
  1. Review recent registry modifications on the affected endpoint using EDR tools to identify the user or process that made the change.
  2. Check PowerShell logs for any recent script execution events directly following the change to the execution policy, indicating potential malicious activity.
  3. Analyze network traffic through NDR solutions for any unusual connections initiated by PowerShell, especially to known malicious domains.
  4. Correlate findings with security incident reports and logs from AV or NGFW to investigate if any previously known indicators of compromise (IoCs) were observed during the same timeframe.
