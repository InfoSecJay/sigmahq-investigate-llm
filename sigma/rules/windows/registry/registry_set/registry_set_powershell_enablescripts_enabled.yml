title: PowerShell Script Execution Policy Enabled
id: 8218c875-90b9-42e2-b60d-0b0069816d10
related:
- id: fad91067-08c5-4d1a-8d8c-d96a21b37814
  type: derived
status: test
description: Detects the enabling of the PowerShell script execution policy. Once
  enabled, this policy allows scripts to be executed.
references:
- https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.PowerShell::EnableScripts
author: Nasreddine Bencherchali (Nextron Systems), Thurein Oo
date: 2023-10-18
tags:
- attack.execution
logsource:
  category: registry_set
  product: windows
detection:
  selection:
    TargetObject|endswith: '\Policies\Microsoft\Windows\PowerShell\EnableScripts'
    Details: 'DWORD (0x00000001)'
  condition: selection
falsepositives:
- Likely
level: low
notes: |
  ### Technical Context
  This detection rule identifies when the PowerShell script execution policy is enabled on Windows environments by monitoring registry changes. Specifically, it focuses on changes to the registry key `\Policies\Microsoft\Windows\PowerShell\EnableScripts`, which, when set to a value of ‘1’ (DWORD), allows the execution of PowerShell scripts. This can be particularly significant in security investigations as enabling this policy could enable malicious actors to execute harmful scripts without sufficient oversight. The rule utilizes Windows registry change logs to detect this configuration, aligning with the MITRE ATT&CK technique for execution, specifically under the tactic of Execution (T1203). Since this change may increase the risk of unauthorized script execution in the environment, analysts must prioritize investigating any alerts triggered by this rule.
  ### Investigation Steps
  - **Check Registry Change**: Use a tool like Sysinternals or EDR to confirm the registry key change and the timestamp for when the change occurred. This helps establish a timeline for potential malicious activity.
  - **Review PowerShell Command History**: Investigate the PowerShell command history to check for any potentially malicious scripts executed around the same time the policy was enabled. This can provide context regarding whether the policy change is part of a larger attack vector.
  - **Analyze User Behavior**: Look into the user account associated with the registry modification using Windows Security logs. Confirm if the user account has the necessary privileges and check for any other suspicious activities.
  - **Cross-reference with Other Logs**: Cross-reference the findings with network logs, EDR alerts, and proxy logs to identify any script execution behavior or outbound connections that coincide with the enabled policy.
  ### Prioritization
  The severity level assigned to this alert is low; however, it indicates a potential security risk in the enterprise environment as it could facilitate unauthorized PowerShell script execution, warranting further investigation.
  ### Blind Spots and Assumptions
  There are certain recognized blind spots with this rule—specifically, legitimate software that may trigger the same registry change as part of their installation or update processes could lead to false positives. Additionally, the rule may not fire if the configuration change is achieved through other means that do not involve a direct registry modification, such as Group Policy changes. Analysts should be aware that determined adversaries might use alternative methods to run scripts without enabling the execution policy, bypassing this detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
