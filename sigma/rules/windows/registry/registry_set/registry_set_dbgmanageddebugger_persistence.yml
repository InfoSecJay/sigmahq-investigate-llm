title: Potential Registry Persistence Attempt Via DbgManagedDebugger
id: 9827ae57-3802-418f-994b-d5ecf5cd974b
status: test
description: Detects the addition of the "Debugger" value to the "DbgManagedDebugger"
  key in order to achieve persistence. Which will get invoked when an application
  crashes
references:
- https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/
- https://github.com/last-byte/PersistenceSniper
author: frack113
date: 2022-08-07
modified: 2023-08-17
tags:
- attack.persistence
- attack.t1574
logsource:
  category: registry_set
  product: windows
detection:
  selection:
    TargetObject|endswith: '\Microsoft\.NETFramework\DbgManagedDebugger'
  filter:
    Details: '"C:\Windows\system32\vsjitdebugger.exe" PID %d APPDOM %d EXTEXT "%s"
      EVTHDL %d'
  condition: selection and not filter
falsepositives:
- Legitimate use of the key to setup a debugger. Which is often the case on developers
  machines
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Potential Registry Persistence Attempt Via DbgManagedDebugger" is designed to identify potential persistence mechanisms leveraged by attackers in a Windows environment. Specifically, it focuses on the registry key located at `Microsoft\.NETFramework\DbgManagedDebugger` where the addition of a "Debugger" value may indicate an attempt by malicious actors to set up a debugging environment that triggers upon application crashes. This allows the attacker to maintain control depending on how the application behaves post-crash and potentially execute malicious code in a persistent manner. The rule inspects registry modifications, making use of telemetry data from Windows registry change logs to capture this malicious behavior.
  This detection aligns with the MITRE ATT&CK technique for persistence (T1574). By monitoring changes to the specified registry key and identifying suspicious patterns within the debugger configuration, security teams can proactively interrupt potential malware activity enabling resilience against advanced threats.
  ### Investigation Steps
  - **Check Registry Modifications:** Examine the Windows Registry to identify if unauthorized changes have been made to the `DbgManagedDebugger` key, logging the details of both the user making the change and the timestamp.
    
  - **Review Process Activity:** Utilize EDR tools to analyze any processes that may have invoked `vsjitdebugger.exe` following the registry modification; look for any associated suspicious process behaviors or unexpected parent-child process relationships.
  - **Correlate with User Behavior:** Access user activity logs to validate whether the context in which these changes occurred aligns with legitimate developer activities, particularly distinguishing between normal and abnormal usage patterns.
  - **Inspect Application Logs:** Check application and system logs for any entries related to application crashes that coincide with the registry modification timestamp, as this may indicate the triggering execution of malicious code.
  ### Prioritization
  This alert is classified as medium severity due to its potential to indicate a hidden persistence mechanism by an attacker. Prompt investigation is essential as it may involve active compromise and could facilitate further attacks or data breaches.
  ### Blind Spots and Assumptions
  It is important to note that this rule might not fire in environments where legitimate developers frequently modify the DbgManagedDebugger key for debugging purposes, thus potentially generating false positives. Additionally, attackers may utilize techniques to avoid detection, such as altering their methods or using legitimate applications to make similar registry changes stealthily. Organizations must also ensure comprehensive logging of all relevant registry changes to avoid missing potential attacks.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
