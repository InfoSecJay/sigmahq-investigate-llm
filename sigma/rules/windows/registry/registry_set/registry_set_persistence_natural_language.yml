title: Potential Persistence Via DLLPathOverride
id: a1b1fd53-9c4a-444c-bae0-34a330fc7aa8
status: test
description: Detects when an attacker adds a new "DLLPathOverride" value to the "Natural
  Language" key in order to achieve persistence which will get invoked by "SearchIndexer.exe"
  process
references:
- https://persistence-info.github.io/Data/naturallanguage6.html
- https://www.hexacorn.com/blog/2018/12/30/beyond-good-ol-run-key-part-98/
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-07-21
modified: 2023-08-17
tags:
- attack.persistence
logsource:
  category: registry_set
  product: windows
detection:
  selection_root:
        # The path can be for multiple languages
        # Example:  HKLM\System\CurrentControlSet\Control\ContentIndex\Language\English_UK
        #           HKLM\System\CurrentControlSet\Control\ContentIndex\Language\English_US
        #           HKLM\System\CurrentControlSet\Control\ContentIndex\Language\Neutral
    TargetObject|contains: '\SYSTEM\CurrentControlSet\Control\ContentIndex\Language\'
  selection_values:
    TargetObject|contains:
    - '\StemmerDLLPathOverride'
    - '\WBDLLPathOverride'
    - '\StemmerClass'
    - '\WBreakerClass'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule "Potential Persistence Via DLLPathOverride" aims to detect unauthorized alterations to the Windows Registry, specifically targeting the `Natural Language` configuration settings. Attackers often exploit DLL path overrides to achieve persistence, as settings in this part of the registry enable malicious code to be executed every time the `SearchIndexer.exe` process is initiated. This is a stealthy method of ensuring that their payload runs without raising immediate suspicion, effectively using native Windows processes. The rule monitors for specific modifications to registry keys located under `HKLM\SYSTEM\CurrentControlSet\Control\ContentIndex\Language\`, specifically for values like `StemmerDLLPathOverride`, `WBDLLPathOverride`, `StemmerClass`, and `WBreakerClass`. The detection leverages Windows Registry set logs, which provide vital telemetry for identifying configurations that could indicate malicious persistence, falling under the MITRE ATT&CK tactic of Persistence (T1547).
  ### Investigation Steps
  - **Check Registry Modifications:** Review the Windows Security Event Logs for registry modifications at `HKLM\SYSTEM\CurrentControlSet\Control\ContentIndex\Language\` to identify any unauthorized changes.
  - **Analyze Process Activity:** Utilize EDR tools to investigate the execution history of `SearchIndexer.exe`, focusing on processes spawned around the time of registry modification alerts to find any suspicious instances.
  - **Review User Context:** Examine user account information to determine if the modifications were made by a compromised or unauthorized account, checking logs to see if any unusual patterns of account activity exist.
  - **Correlate Network Activity:** Utilize NDR and firewall logs to check for unusual outbound traffic related to processes launched via the `SearchIndexer.exe`, which might suggest further malicious activity.
  ### Prioritization
  The severity level for this alert is categorized as high due to the potential for persistent malware to reside on the system. Any unauthorized changes to the registry that allow for the execution of malware via legitimate processes warrant immediate investigation to mitigate risk.
  ### Blind spots and Assumptions
  It is important to recognize that legitimate applications may also modify registry keys, which could lead to false positives in the alerts. Additionally, if the adversary employs techniques to conceal their actions (e.g., using rootkits or specific user permissions), the detection rule may fail to trigger. The operational environment may also influence the performance of this rule, as different security configurations or software settings could mask or suppress legitimate processes, leading to overlooked alterations.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
