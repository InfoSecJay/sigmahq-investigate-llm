title: Potential Persistence Via Shim Database Modification
id: dfb5b4e8-91d0-4291-b40a-e3b0d3942c45
status: test
description: |
  Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.
  The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.011/T1546.011.md#atomic-test-3---registry-key-creation-andor-modification-events-for-sdb
- https://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html
- https://andreafortuna.org/2018/11/12/process-injection-and-persistence-using-application-shimming/
author: frack113
date: 2021-12-30
modified: 2023-08-17
tags:
- attack.persistence
- attack.t1546.011
logsource:
  category: registry_set
  product: windows
detection:
  selection:
    TargetObject|contains:
    - '\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB\'
    - '\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom\'
  filter_main_empty:
    Details: ''
  condition: selection and not 1 of filter_main_*
falsepositives:
- Legitimate custom SHIM installations will also trigger this rule
level: medium
notes: |
  ### Technical Context
  The detection rule titled "Potential Persistence Via Shim Database Modification" is designed to identify potentially malicious modifications to the Windows Application Compatibility Infrastructure, specifically targeting the registry keys associated with Application Shims. Adversaries can establish persistence and elevate privileges by manipulating these keys, allowing them to run malicious code whenever targeted applications are executed. This detection rule monitors for changes to specific registry paths, particularly those related to installed and custom Application Shims—located in `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB\` and `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom\`. By intercepting registry modifications in these areas, we can identify potential persistence mechanisms that attackers may employ to compromise systems. This rule aligns with the MITRE ATT&CK tactic of "Persistence" and correlates with the technique T1546.011.
  ### Investigation Steps
  - **Review Registry Modifications:** Utilize tools like Windows Registry Editor or PowerShell to review recent changes made to the identified registry paths. Check who or what entity made the changes to understand the potential impact.
    
  - **Correlate with Process Activity:** Use EDR solutions to examine process creation events that occurred around the same time as the registry modification. Investigate any unfamiliar or suspicious executable files that may have executed as part of this activity.
    
  - **Analyze for Associated Network Activity:** Investigate any outbound network connections related to the processes involved in the registry changes using Network Detection and Response (NDR) tools. Look for communication with known malicious domains or IP addresses.
    
  - **Check for Other Indicators of Compromise (IOCs):** Search across various enterprise logs—such as Sysmon, Security, and Application logs—for other signs of compromise or persistence mechanisms employed by the suspect application. This includes checking for accompanying file or registry modifications.
  ### Prioritization
  This alert is classified as medium severity, as modifications to the Application Shim Database can often indicate a sophisticated attack attempt that may lead to further system compromise. However, it is essential to investigate these alerts in the context of other related activities to determine the risk level accurately.
  ### Blind spots and Assumptions
  One potential blind spot for this detection rule is that legitimate custom SHIM installations will also trigger it, leading to false positive alerts. Additionally, the rule relies on accurate logging of registry modifications; if logging is disabled or insufficient, the detection may fail. It's also important to consider that adversaries might attempt to cover their tracks by removing or modifying registry keys immediately after making malicious changes, which could lead to missed detections.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
