title: PowerShell Logging Disabled Via Registry Key Tampering
id: fecfd1a1-cc78-4313-a1ea-2ee2e8ec27a7
status: test
description: Detects changes to the registry for the currently logged-in user. In
  order to disable PowerShell module logging, script block logging or transcription
  and script execution logging
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1112/T1112.md#atomic-test-32---windows-powershell-logging-disabled
author: frack113
date: 2022-04-02
modified: 2023-08-17
tags:
- attack.defense-evasion
- attack.t1564.001
logsource:
  category: registry_set
  product: windows
detection:
  selection:
    TargetObject|contains:
    - '\Microsoft\Windows\PowerShell\'         # PowerShell 5
    - '\Microsoft\PowerShellCore\'         # PowerShell 7
    TargetObject|endswith:
    - '\ModuleLogging\EnableModuleLogging'
    - '\ScriptBlockLogging\EnableScriptBlockLogging'
    - '\ScriptBlockLogging\EnableScriptBlockInvocationLogging'
    - '\Transcription\EnableTranscripting'
    - '\Transcription\EnableInvocationHeader'
    - '\EnableScripts'
    Details: 'DWORD (0x00000000)'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule is designed to monitor changes to specific registry keys associated with Microsoft PowerShell logging capabilities. The primary focus is on entries that, when modified, can disable crucial logging features such as module logging, script block logging, and command invocation tracking. By tracking registry modifications, the rule seeks to identify potential attempts by malicious actors to evade detection mechanisms that rely on PowerShell activity through logging. The relevant data sources include the Windows Registry logs, specifically monitoring for the setting of various logging-related keys to a disabled state (DWORD 0x00000000). This rule aligns with the MITRE ATT&CK tactic of "Defense Evasion" (T1564.001).
  ### Investigation Steps
  - **Check Registry Modifications:** Use registry auditing logs or tools like Sysinternals Procmon to review recent modifications to PowerShell-related registry keys, focusing on the paths specified in the detection rule.
  - **Review EDR Alerts:** Investigate any EDR alerts surrounding the timeframe of the registry change to identify potentially malicious process activity that may correlate with these modifications.
  - **Analyze PowerShell Activity:** Examine PowerShell execution logs for unusual scripts or command executions leading up to the registry modification, which may indicate malicious behavior seeking to suppress logging.
  - **Cross-reference User Activity:** Assess the actions of the logged-in user against the organization's baseline behavior using Security logs to determine if there is any suspicious access or execution patterns.
  ### Prioritization
  The severity of this alert is high because the disabling of logging features represents a serious threat to an organizationâ€™s security posture, allowing malicious activities to go unnoticed and unaccounted for.
  ### Blind Spots and Assumptions
  This detection rule may not fire if the registry modifications are made by an account with elevated privileges that are not adequately monitored. Additionally, it assumes that all registry changes are logged; if there is a misconfiguration in logging settings or if a malicious actor utilizes a method to bypass registry logging, the detection may fail. Furthermore, some legitimate administrative software may modify these settings without malicious intent, leading to potential false positives.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
