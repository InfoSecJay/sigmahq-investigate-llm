title: Add Debugger Entry To AeDebug For Persistence
id: 092af964-4233-4373-b4ba-d86ea2890288
status: test
description: Detects when an attacker adds a new "Debugger" value to the "AeDebug"
  key in order to achieve persistence which will get invoked when an application crashes
references:
- https://persistence-info.github.io/Data/aedebug.html
- https://learn.microsoft.com/en-us/windows/win32/debug/configuring-automatic-debugging
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-07-21
modified: 2023-08-17
tags:
- attack.persistence
logsource:
  category: registry_set
  product: windows
detection:
  selection:
    TargetObject|contains: '\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AeDebug\Debugger'
    Details|endswith: '.dll'
  filter:
    Details: '"C:\WINDOWS\system32\vsjitdebugger.exe" -p %ld -e %ld -j 0x%p'
  condition: selection and not filter
falsepositives:
- Legitimate use of the key to setup a debugger. Which is often the case on developers
  machines
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect changes made to the **AeDebug** registry key, which is a component of the Windows operating system used for automatic debugging. Attackers may manipulate this key to gain persistence on a compromised system, as any application that crashes will invoke the debugger specified within this key. The rule specifically looks for the creation of a **Debugger** value that contains a **.dll** file, indicating that an external library is being set to run during crashes. The detection logic utilizes registry change logs to look for these specific modifications, helping analysts identify potential persistence mechanisms employed by adversaries. This technique falls under the **Persistence** tactic, as outlined by MITRE ATT&CK (TA0003, T1547.001).
  ### Investigation Steps
  - **Check Registry Changes:** Use the Windows Event Logs and Sysmon logs to investigate recent modifications to the AeDebug key. Look for unusual processes that might have made these changes.
    
  - **Examine Process Behavior:** Investigate any entries related to `vsjitdebugger.exe` or other associated DLLs within the EDR, which may provide insight into attacker behavior or actions.
    
  - **Review Crash Dump Settings:** Analyze application crashes that may have invoked the added debugger to determine whether adversarial activity was present during those events. 
  - **Assess Impact on Systems:** Utilize threat intelligence platforms to identify if the added DLL is known for malicious activity or ties to specific threat actors and campaigns.
  ### Prioritization
  The alert generated by this rule is classified as medium severity because while adding a debugger can be a legitimate functionality (such as for debugging applications), it is also a common persistence technique used by adversaries. Hence, alerts warrant investigation to rule out possible malicious activity.
  ### Blind Spots and Assumptions
  This detection rule may not fire in environments where registry changes are routinely made for legitimate developmental purposes, such as on development machinesâ€”leading to potential false positives. Additionally, attackers might employ obfuscation techniques or use legitimate applications to alter the registry in ways that evade detection. It is important for engineers to consider that adversaries can also modify their tactics to use different registry keys or custom implementations, which this rule would not capture.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
