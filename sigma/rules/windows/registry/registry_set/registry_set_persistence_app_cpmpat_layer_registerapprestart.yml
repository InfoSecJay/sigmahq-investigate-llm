title: Potential Persistence Via AppCompat RegisterAppRestart Layer
id: b86852fb-4c77-48f9-8519-eb1b2c308b59
status: test
description: |
  Detects the setting of the REGISTERAPPRESTART compatibility layer on an application.
  This compatibility layer allows an application to register for restart using the "RegisterApplicationRestart" API.
  This can be potentially abused as a persistence mechanism.
references:
- https://github.com/nasbench/Misc-Research/blob/d114d6a5e0a437d3818e492ef9864367152543e7/Other/Persistence-Via-RegisterAppRestart-Shim.md
author: Nasreddine Bencherchali (Nextron Systems)
date: 2024-01-01
tags:
- attack.persistence
- attack.t1546.011
logsource:
  category: registry_set
  product: windows
detection:
  selection:
    TargetObject|contains: '\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers\'
    Details|contains: 'REGISTERAPPRESTART'
  condition: selection
falsepositives:
- Legitimate applications making use of this feature for compatibility reasons
level: medium
notes: |
  n
  ### Technical Context
  The Sigma rule titled "Potential Persistence Via AppCompat RegisterAppRestart Layer" is designed to detect when the compatibility layer `REGISTERAPPRESTART` is set for applications using the Windows Registry. This compatibility feature allows applications to register themselves for restarting through the `RegisterApplicationRestart` API. While this functionality is primarily intended to enhance the user experience by allowing applications to automatically restart after an unplanned shutdown, it can be misused by adversaries as a persistence mechanism. Attackers may employ this technique (under MITRE ATT&CK tactic **Persistence** and technique **T1546.011**) to ensure that malicious software or scripts are consistently re-executed whenever the system or application is started, thereby maintaining their foothold in the environment.
  The detection leverages changes in the Windows Registry, specifically monitoring for modifications under the path `\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers\`. By analyzing logs tied to registry settings, particularly the presence of the string `REGISTERAPPRESTART`, analysts can identify potential malicious attempts to persistently execute applications without user consent.
  ### Investigation Steps
  - **Check EDR for Process Activity:** Investigate the endpoints using EDR tools to trace any related process activity with timestamps close to the registry change events detected by this rule. Look for unusual or suspicious processes that may correlate with the persistence behavior.
  - **Review Registry Changes:** Examine the specific registry keys that were modified and cross-reference them to identify any newly installed applications or changes to existing applications. Look for any entries that appear anomalous or unfamiliar within the compatibility flags.
  - **Analyze Application Behavior:** Utilize the Application and System logs to review the behavior of the application that has registered for automatic restart. Note any unusual behavior or crash reports that coincide with these registry modifications.
  - **Check for Related Network Activity:** Use network monitoring tools to detect any outbound connections initiated by the application linked to the `REGISTERAPPRESTART`. Be cautious of connections to known malicious IPs or domains.
  ### Prioritization
  The alert carries a medium severity level because while the usage of `REGISTERAPPRESTART` can be legitimate, its modification can signify an attempt at establishing persistence, which warrants close investigation to rule out any adversarial activity.
  ### Blind Spots and Assumptions
  The rule may not fire in instances where the `REGISTERAPPRESTART` feature is disabled or unmonitored applications do not set this value in the registry. Additionally, legitimate applications, especially those designed to manage reliability or user experience, might trigger false positives. Furthermore, an adversary can potentially evade detection by using techniques that do not utilize this compatibility setting for persistence or by modifying registry values without triggering logs.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
