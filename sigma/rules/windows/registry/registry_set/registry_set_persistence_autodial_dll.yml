title: Potential Persistence Via AutodialDLL
id: e6fe26ee-d063-4f5b-b007-39e90aaf50e3
status: test
description: Detects change the the "AutodialDLL" key which could be used as a persistence
  method to load custom DLL via the "ws2_32" library
references:
- https://www.hexacorn.com/blog/2015/01/13/beyond-good-ol-run-key-part-24/
- https://persistence-info.github.io/Data/autodialdll.html
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-08-10
modified: 2023-08-17
tags:
- attack.persistence
logsource:
  category: registry_set
  product: windows
detection:
  selection:
    TargetObject|contains: '\Services\WinSock2\Parameters\AutodialDLL'
  condition: selection
falsepositives:
- Unlikely
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "Potential Persistence Via AutodialDLL" focuses on detecting changes to the "AutodialDLL" registry key, which exists under the "Services\WinSock2\Parameters" path in the Windows Registry. The presence of custom DLLs within this key can allow adversaries to establish persistence on compromised systems by leveraging the "ws2_32" library. The typical behavior that this rule observes includes the addition, modification, or deletion of values associated with the "AutodialDLL" key, which could indicate nefarious activity targeting persistence mechanisms. By monitoring these changes, security teams can identify potential indicators of compromise related to persistence tactics as specified by the MITRE ATT&CK framework, particularly under the tactic of persistence (TA0003) and the technique of "DLL Search Order Hijacking" (T1038).
  To effectively detect such changes, the rule utilizes Windows registry events as the primary data source for monitoring alterations to the registry key mentioned above. This enables identification of potentially malicious configurations or the installation of unauthorized DLLs that could be used for further exploitation. 
  ### Investigation Steps
  - **Query Registry Logs:** Utilize Windows Security logs to search for any recent modifications to the "AutodialDLL" registry key, specifically looking for unexpected additions of DLL paths.
  - **Analyze Process Creation Events:** Investigate any processes initiated around the same time as the registry change by examining Sysmon process creation logs for associated command-line parameters that may indicate malicious behavior.
  - **Check for Malicious DLLs:** Cross-reference the loaded DLLs with known bad lists or perform checks using your Endpoint Detection and Response (EDR) solution to flag any suspicious DLLs that may have been loaded as a result of the registry change.
  - **Review Network Activity:** Analyze network connections made by the involved process using network logs to see if there are any unusual outbound connections that might relate to the persistence vector and could indicate further exploitation attempts.
  ### Prioritization
  Given that persistence mechanisms are a core aspect of threat actor playbooks, any alerts fired from this rule signify a high severity. Timely investigation is crucial to mitigating potential ongoing compromises.
  ### Blind Spots and Assumptions
  This rule may not fire if an adversary uses a non-standard registry manipulation technique or if the changes to "AutodialDLL" are reverted before detection occurs. Additionally, legitimate applications or configurations altering this registry key might yield false negatives if they are not extensively monitored or documented. 
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
