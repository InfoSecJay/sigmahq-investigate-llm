title: Credential Dumping Activity By Python Based Tool
id: f8be3e82-46a3-4e4e-ada5-8e538ae8b9c9
related:
- id: 4b9a8556-99c4-470b-a40c-9c8d02c77ed0
  type: obsolete
- id: 7186e989-4ed7-4f4e-a656-4674b9e3e48b
  type: obsolete
status: stable
description: Detects LSASS process access for potential credential dumping by a Python-like
  tool such as LaZagne or Pypykatz.
references:
- https://twitter.com/bh4b3sh/status/1303674603819081728
- https://github.com/skelsec/pypykatz
author: Bhabesh Raj, Jonhnathan Ribeiro
date: 2023-11-27
modified: 2023-11-29
tags:
- attack.credential-access
- attack.t1003.001
- attack.s0349
logsource:
  category: process_access
  product: windows
detection:
  selection:
    TargetImage|endswith: '\lsass.exe'
    CallTrace|contains|all:
    - '_ctypes.pyd+'
    - ':\Windows\System32\KERNELBASE.dll+'
    - ':\Windows\SYSTEM32\ntdll.dll+'
    CallTrace|contains:
    - 'python27.dll+'
    - 'python3*.dll+'
    GrantedAccess: '0x1FFFFF'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potentially malicious activity involving credential dumping from the Local Security Authority Subsystem Service (LSASS) process by tools written in Python, such as LaZagne or Pypykatz. The detection focuses on specific access patterns to the LSASS executable, particularly examining the call trace of processes that involve Python dynamic link libraries (DLLs) such as `python27.dll` or `python3*.dll`. The rule specifically checks for access rights that indicate an attempt to read sensitive information from LSASS, which is a common target for attackers seeking credentials from a compromised system.
  To effectively implement this detection, the rule utilizes process access logs generated by the Windows operating system. Analysts should pay particular attention to any process access events pertaining to LSASS that match the specified conditions, as these could indicate potential unauthorized activities utilizing Python-based tools.
  ### Investigation Steps
  - **Check EDR for Active Processes:** Review your EDR console for any processes that accessed the LSASS memory, focusing on those with the specified call traces or any process running a Python DLL.
  - **Examine Process Creation Logs:** Investigate process creation logs around the time of the alert to identify any suspicious Python scripts or executables that might have initiated the credential dumping activity.
  - **Review Windows Event Logs:** Look into Windows Security Event Logs for unusual logon attempts or access to sensitive accounts that may have coincided with the detected activity.
  - **Analyze Network Traffic:** Use the NDR tool to inspect any outbound network traffic from the affected host during the event window, looking for connections to suspicious external IP addresses or data exfiltration signs.
