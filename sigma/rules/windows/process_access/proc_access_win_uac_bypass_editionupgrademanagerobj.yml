title: Function Call From Undocumented COM Interface EditionUpgradeManager
id: fb3722e4-1a06-46b6-b772-253e2e7db933
status: test
description: Detects function calls from the EditionUpgradeManager COM interface.
  Which is an interface that is not used by standard executables.
references:
- https://www.snip2code.com/Snippet/4397378/UAC-bypass-using-EditionUpgradeManager-C/
- https://gist.github.com/hfiref0x/de9c83966623236f5ebf8d9ae2407611
author: oscd.community, Dmitry Uchakin
date: 2020-10-07
modified: 2023-11-30
tags:
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1548.002
logsource:
  category: process_access
  product: windows
detection:
  selection:
    CallTrace|contains: 'editionupgrademanagerobj.dll'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  n
  ### Technical Context
  The Sigma rule titled "Function Call From Undocumented COM Interface EditionUpgradeManager" is designed to detect potentially malicious activity related to the `EditionUpgradeManager` COM interface. This interface is not commonly used by standard executables, making its invocation notable. The rule focuses on monitoring process creation events, specifically looking for function calls that indicate the use of the `editionupgrademanagerobj.dll`. By capturing such calls, the rule helps identify attempts at privilege escalation or defense evasion, both of which are relevant under the MITRE ATT&CK frameworkâ€”specifically, tactic TA0005 (Defense Evasion) and technique T1548.002 (Abuse Elevation Control Mechanism: Bypass User Account Control). The primary data sources utilized include process access logs from Windows systems.
  ### Investigation Steps
  - **Check Process Access Logs**: Review logs from EDR to identify the specific processes that invoked the `editionupgrademanagerobj.dll`. Pay attention to the process hierarchy to see if any system or known legitimate processes are involved.
  - **Analyze Event Context**: Examine the surrounding context of the detected function call, including timestamps and user accounts associated with the activity, using tools like Windows Event Viewer or SIEM.
  - **Investigate System Changes**: Confirm whether changes to system configurations or new installations occurred around the time of detection. This may involve reviewing Windows System logs or AWS CloudTrail logs if relevant cloud resources are involved.
  - **Review AV and EDR Alerts**: Check the alerts generated by AV or EDR tools to see if there were any proactive defenses or indications of malicious behavior that correlate with the detection.
  ### Prioritization
  This alert is classified as medium severity due to the unusual nature of invoking undocumented COM interfaces, which can indicate attempts to bypass security controls. While not necessarily indicative of a compromise, it warrants further investigation to prevent potential exploitation.
  ### Blind Spots and Assumptions
  This detection rule may not fire if the adversary employs different or legitimate methods to invoke the `EditionUpgradeManager`, or if the malicious actions are obfuscated in such a way that they do not appear in process access logs. Furthermore, there is an assumption that this COM interface usage will not be typical for the environment, which may not hold true in all cases. Additionally, system configurations or security settings that suppress logging could lead to missed detections.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
