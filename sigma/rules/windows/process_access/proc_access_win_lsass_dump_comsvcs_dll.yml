title: Lsass Memory Dump via Comsvcs DLL
id: a49fa4d5-11db-418c-8473-1e014a8dd462
status: test
description: Detects adversaries leveraging the MiniDump export function from comsvcs.dll
  via rundll32 to perform a memory dump from lsass.
references:
- https://twitter.com/shantanukhande/status/1229348874298388484
- https://modexp.wordpress.com/2019/08/30/minidumpwritedump-via-com-services-dll/
author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
date: 2020-10-20
modified: 2023-11-29
tags:
- attack.credential-access
- attack.t1003.001
logsource:
  category: process_access
  product: windows
detection:
  selection:
    TargetImage|endswith: '\lsass.exe'
    SourceImage|endswith: '\rundll32.exe'
    CallTrace|contains: 'comsvcs.dll'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The `Lsass Memory Dump via Comsvcs DLL` Sigma rule aims to identify attempts by adversaries to extract sensitive information from the Local Security Authority Subsystem Service (LSASS) process in Windows. LSASS is responsible for enforcing security policies on the system, making it a critical target for credential harvesting. This detection rule focuses on identifying instances where the `rundll32.exe` process is used to call the `MiniDumpWriteDump` function from the `comsvcs.dll` library, indicating that an adversary may be performing a memory dump of LSASS to extract credential information. The technical data predominantly comes from process access logs, specifically monitoring for the termination of the LSASS process (`lsass.exe`), the invocation of rundll32, and check the call trace to ensure it contains `comsvcs.dll`. Engagement with MITRE ATT&CK is prevalent here, particularly in the tactic of Credential Access (TA0006) and technique T1003.001 (Credential Dumping: LSASS Memory).
  ### Investigation Steps
  - **Inspect the Process Tree:** Utilize EDR to examine the parent-child relationships of the involved processes, specifically checking for instances of `rundll32.exe` and `lsass.exe` to confirm any suspicious activity.
  - **Review Process Access Logs:** Examine the authentication events around the time the detection was triggered, focusing on any unauthorized attempts to access or dump LSASS memory.
  - **Verify Call Traces:** Check the detailed call traces in Sysmon logs to understand the context and execution flow leading to the dump attempt, specifically looking for calls to `comsvcs.dll`.
  - **Cross-Referencing Security Alerts:** Correlate findings with security alerts or anomalies reported by AV or NGFW to ascertain whether complementary incidents have occurred that indicate broader attacks or misconfigurations.
  ### Prioritization
  The severity of this alert is marked as high due to the critical nature of LSASS in managing system security and the potential for significant credential compromise if the memory is successfully dumped by an attacker. Immediate investigation is warranted to prevent further exploitation.
  ### Blind Spots and Assumptions
  This rule may not fire if there are custom modifications to process names or if defenses against process dumping are effectively employed, such as enhanced Windows Security settings. Additionally, this detection relies on the assumption that logging is appropriately configured and functional; any gaps in Sysmon or process access logging may lead to missed detections. Analysts should consider the possibility of legitimate administrative tasks or system processes mistakenly triggering the alert.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
