title: HackTool - HandleKatz Duplicating LSASS Handle
id: b1bd3a59-c1fd-4860-9f40-4dd161a7d1f5
status: test
description: Detects HandleKatz opening LSASS to duplicate its handle to later dump
  the memory without opening any new handles
references:
- https://github.com/codewhitesec/HandleKatz
author: Bhabesh Raj (rule), @thefLinkk
date: 2022-06-27
modified: 2023-11-28
tags:
- attack.execution
- attack.t1106
- attack.defense-evasion
- attack.t1003.001
logsource:
  category: process_access
  product: windows
detection:
  selection:
    TargetImage|endswith: '\lsass.exe'     # Theoretically, can be any benign process holding handle to LSASS
    GrantedAccess: '0x1440'     # Only PROCESS_DUP_HANDLE, PROCESS_QUERY_LIMITED_INFORMATION, PROCESS_QUERY_INFORMATION
        # Example: C:\Windows\SYSTEM32\ntdll.dll+9d234\|UNKNOWN(00000000001C119B)
    CallTrace|startswith: 'C:\Windows\System32\ntdll.dll+'
    CallTrace|contains: '|UNKNOWN('
    CallTrace|endswith: ')'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule "HackTool 
  - HandleKatz Duplicating LSASS Handle" is designed to detect suspicious activity related to the LSASS (Local Security Authority Subsystem Service) process in Windows environments. Specifically, the rule identifies instances where a process attempts to duplicate a handle to lsass.exe without opening any new handles, which is a common technique used by attackers to bypass security measures while capturing sensitive information such as credentials. The detection focuses on identifying key characteristics in the process access logsâ€”specifically targeting lsass.exe, checking for specific granted access rights (PROCESS_DUP_HANDLE, PROCESS_QUERY_LIMITED_INFORMATION, PROCESS_QUERY_INFORMATION), and examining the call trace for anomalies. This aligns with the MITRE ATT&CK framework, particularly the techniques under the `Execution` and `Defense Evasion` tactics, including `T1106` (Native API) and `T1003.001` (Credential Dumping: LSASS Memory).
  ### Investigation Steps
  - **Check EDR Alerts:** Review your EDR console for any alerts related to the involved process (lsass.exe) during the time frame when the alert was triggered. Analyze the details of these alerts, such as the parent process and command-line arguments associated with the events.
    
  - **Examine Process Access Logs:** Look into Windows Security and Sysmon event logs to find records of process access activities linked to lsass.exe. Focus on the specific GrantedAccess values and the CallTrace associated with them to assess the legitimacy of the activity.
  - **Review Network Connections:** Identify any network activity related to the suspect process that may indicate exfiltration attempts. Utilize firewall and proxy logs to trace outbound connections originating from the compromised system.
  - **Correlate with Other Events:** Engage with other logs like Application and System logs, and any relevant telemetry from cloud services. Look for other suspicious events that might correlate with the handle duplication to form a comprehensive picture of potential compromise.
  ### Prioritization
  This alert is deemed high severity due to the critical nature of LSASS, which handles sensitive security tokens and credentials within Windows. Any unauthorized attempts to access or manipulate this process can signify a serious security breach and warrant immediate investigation.
  ### Blind spots and Assumptions
  The rule assumes that the utilized telemetry sources (process access logs) are properly configured and capturing all necessary events. It may not fire if the activity is taking place in a manner that does not leverage duplicate handle techniques or if the attacker employs an alternate method to access lsass.exe. Additionally, if the operating environment is utilizing certain security software that obscures or prevents logging of such activities, the rule may fail to trigger. Understanding these blind spots can help further refine detection strategies.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
