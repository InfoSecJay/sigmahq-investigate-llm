title: Potential PowerShell Execution Policy Tampering - ProcCreation
id: cf2e938e-9a3e-4fe8-a347-411642b28a9f
related:
- id: fad91067-08c5-4d1a-8d8c-d96a21b37814     # ProcCreation Registry
  type: similar
- id: 87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180     # ProcCreation Cmdlet
  type: similar
- id: 61d0475c-173f-4844-86f7-f3eebae1c66b     # PowerShell ScriptBlock
  type: similar
status: test
description: Detects changes to the PowerShell execution policy registry key in order
  to bypass signing requirements for script execution from the CommandLine
references:
- https://learn.microsoft.com/de-de/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.3
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-11
tags:
- attack.defense-evasion
logsource:
  product: windows
  category: process_creation
detection:
  selection_path:
    CommandLine|contains:
    - '\ShellIds\Microsoft.PowerShell\ExecutionPolicy'
    - '\Policies\Microsoft\Windows\PowerShell\ExecutionPolicy'
  selection_values:
    CommandLine|contains:
    - 'Bypass'
    - 'RemoteSigned'
    - 'Unrestricted'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule detects potential tampering with the PowerShell execution policy by monitoring process creation events. Specifically, it looks for command line arguments that indicate changes to the PowerShell execution policy registry key, allowing users to bypass the script signing requirement. The rule examines the command-line parameters associated with processes and identifies keywords such as 'Bypass', 'RemoteSigned', or 'Unrestricted', which suggest an attempt to execute unverified scripts. The data sources involved in this detection include Windows process creation logs captured by Sysmon, which provides insights into command-line execution and registry manipulations. This alert is connected to the MITRE ATT&CK framework under the tactic of Defense Evasion and the technique of 'Valid Accounts' and 'Scheduled Task/Job', as attackers may use modified execution policies to evade detection and execute unauthorized scripts.
  ### Investigation Steps
  - **Check Process Creation Logs**: Investigate the process creation logs in Sysmon or Windows Event Logs to identify the specific process and user account associated with the execution policy change.
  - **Analyze Command-Line Arguments**: Review the command line for any executed PowerShell scripts or commands that utilize the modified execution policy to determine the nature and intent of the executed code.
  - **Cross-reference with Security Tools**: Use EDR solutions to check for any additional security alerts or anomalies related to the user behavior or processes, and scan for the presence of known malicious indicators.
  - **Review Registry Changes**: Conduct an audit of the registry keys associated with PowerShell execution policies to confirm any unauthorized changes and to assess the impact of these modifications on system security.
  ### Prioritization
  Alerts generated by this rule should be considered high severity due to the potential for significant security risks, such as the execution of malicious scripts that can compromise the integrity of the enterprise environment.
  ### Blind Spots and Assumptions
  This rule may not fire in environments where PowerShell is not commonly used or where execution policies are managed through alternative methods (e.g., Group Policy). Additionally, if an attacker employs methods to obscure command line execution (e.g., encoding commands or using alternate shells), the detection may be defeated. It's assumed that all relevant PowerShell logs are captured correctly and remain unaltered.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
