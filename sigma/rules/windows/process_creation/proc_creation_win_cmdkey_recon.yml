title: Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE
id: 07f8bdc2-c9b3-472a-9817-5a670b872f53
status: test
description: Detects usage of cmdkey to look for cached credentials on the system
references:
- https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation
- https://technet.microsoft.com/en-us/library/cc754243(v=ws.11).aspx
- https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey
author: jmallette, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron
  Systems)
date: 2019-01-16
modified: 2024-03-05
tags:
- attack.credential-access
- attack.t1003.005
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\cmdkey.exe'
  - OriginalFileName: 'cmdkey.exe'
  selection_cli:
    CommandLine|contains|windash: ' -l'
  condition: all of selection*
fields:
- CommandLine
- ParentCommandLine
- User
falsepositives:
- Legitimate administrative tasks
level: high
notes: |
  n
  ### Technical Context
  The detection rule "Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE" is designed to identify attempts by malicious users to access cached credentials on a Windows system using the command-line utility `cmdkey.exe`. This tool allows users, including malicious actors, to manage stored usernames and passwords for various applications or networks. The rule focuses on the process creation logs generated when `cmdkey.exe` is executed, specifically looking for instances where it is launched with the command-line parameters that indicate an inquiry into cached credentials (notably those containing the ` -l` flag). It leverages various security logs such as Windows Security and Sysmon's `process_creation` telemetry to monitor and capture these events. This aligns with the MITRE ATT&CK tactic of Credential Access, specifically technique T1003.005, which deals with retrieving cached credentials.
  ### Investigation Steps
  - **Check Process Details:** Review the EDR for the specific instance of `cmdkey.exe` that triggered the alert, focusing on the user and parent process details to understand the context of the execution.
  - **Inspect Command-Line Arguments:** Analyze the command-line arguments through Windows Event Logs to ensure that the invocation of `cmdkey.exe` was intentional and not indicative of malicious intent.
  - **Review User Activity:** Investigate recent user activities within the environment, particularly focusing on legitimate administrative tasks that may involve the authorized use of cached credentials.
  - **Correlate with Other Logs:** Cross-reference findings with other logs, such as proxy and VPN logs, to determine if there are patterns of suspicious behavior associated with the user or device in question.
  ### Prioritization
  The alert is classified as high severity due to the potential for an adversary to gain unauthorized access to sensitive credentials, which may lead to further privilege escalation within the environment.
  ### Blind Spots and Assumptions
  This rule may not fire in environments where `cmdkey.exe` usage is commonplace and tightly controlled, potentially leading to a high volume of false positives from legitimate administrative tasks. Additionally, if an attacker utilizes other tools or methods to dump credentials, this specific detection would not capture those activities. The effectiveness of this rule also assumes that the appropriate logging level is enabled and that there are no limitations in Windows Event Log collection for process creation events.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
