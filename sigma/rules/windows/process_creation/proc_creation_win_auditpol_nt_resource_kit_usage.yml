title: Audit Policy Tampering Via NT Resource Kit Auditpol
id: c6c56ada-612b-42d1-9a29-adad3c5c2c1e
related:
- id: 0a13e132-651d-11eb-ae93-0242ac130002     # New auditpol version
  type: similar
status: test
description: |
  Threat actors can use an older version of the auditpol binary available inside the NT resource kit to change audit policy configuration to impair detection capability.
  This can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.
references:
- https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Windows%202000%20Resource%20Kit%20Tools/AuditPol
author: Nasreddine Bencherchali (Nextron Systems)
date: 2021-12-18
modified: 2023-02-21
tags:
- attack.defense-evasion
- attack.t1562.002
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains:
    - '/logon:none'
    - '/system:none'
    - '/sam:none'
    - '/privilege:none'
    - '/object:none'
    - '/process:none'
    - '/policy:none'
  condition: selection
falsepositives:
- The old auditpol utility isn't available by default on recent versions of Windows
  as it was replaced by a newer version. The FP rate should be very low except for
  tools that use a similar flag structure
level: high
notes: |
  ### Technical Context
  The Sigma rule identified as **Audit Policy Tampering Via NT Resource Kit Auditpol** is designed to detect malicious attempts by threat actors to alter audit policies on Windows systems using an outdated version of the `auditpol` utility from the NT Resource Kit. These modifications can impede detection capabilities by disabling or removing specific audit policies that are typically essential for monitoring and logging security-sensitive actions on a system. In particular, the rule looks for command-line arguments associated with the execution of `auditpol` that include disabling logon, system, SAM, privilege, object, process, or policy auditing.
  The relevant technical data sources for this rule are process creation logs that capture detailed information about what processes are executed on the machine, including command-line parameters used during their launch. This is critical for identifying potentially harmful activities associated with external or internal threat actors trying to manipulate security settings. The detection mechanism is aligned with the MITRE ATT&CK framework, specifically under the **Defense Evasion** tactic (T1562.002), which highlights methods adversaries use to disguise their actions by altering system configurations.
  ### Investigation Steps
  - **Check Process Creation Logs:** Review Windows Event Logs for any suspicious instances of the `auditpol` command being executed, especially looking for command-line arguments resembling those specified in the detection rule.
  - **Correlate with EDR Data:** Utilize your EDR solution to correlate the identified `auditpol` execution with user activity, system changes, and initial access vectors to determine the context of the tampering.
  - **Review Audit Policy Changes:** Consult the Windows Security event logs for any changes made to the audit policies and identify any discrepancies or unauthorized modifications during the timeframe of suspicious activity.
  - **Assess for Other Indicators:** Investigate for any additional indicators of compromise, such as unusual user behavior or other processes that may have been involved in the attack, focusing on processes that are typically associated with audit policy manipulation actions.
  ### Prioritization
  Given the high severity level assigned to this alert, it is crucial for analysts to act swiftly upon detection as manipulation of audit policies poses a significant risk to the organization's security posture, enabling threat actors to operate undetected.
  ### Blind Spots and Assumptions
  One potential blind spot related to this rule is the assumption that the older version of `auditpol` is present on the system. As modern versions of Windows no longer include this older utility by default, there may be a reduced risk of detecting legitimate instances of it being executed. Additionally, other tools may mimic the command-line argument structure, which could lead to false positives. Furthermore, savvy attackers may tailor their actions to avoid using the known flags or adopt newer tools, thereby evading detection altogether.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
