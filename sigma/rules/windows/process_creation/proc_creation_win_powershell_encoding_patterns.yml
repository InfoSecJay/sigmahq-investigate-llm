title: Potential Encoded PowerShell Patterns In CommandLine
id: cdf05894-89e7-4ead-b2b0-0a5f97a90f2f
related:
- id: 5b572dcf-254b-425c-a8c5-d9af6bea35a6
  type: similar
status: test
description: Detects specific combinations of encoding methods in PowerShell via the
  commandline
references:
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65
author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton
date: 2020-10-11
modified: 2023-01-26
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
  selection_to_1:
    CommandLine|contains:
    - 'ToInt'
    - 'ToDecimal'
    - 'ToByte'
    - 'ToUint'
    - 'ToSingle'
    - 'ToSByte'
  selection_to_2:
    CommandLine|contains:
    - 'ToChar'
    - 'ToString'
    - 'String'
  selection_gen_1:
    CommandLine|contains|all:
    - 'char'
    - 'join'
  selection_gen_2:
    CommandLine|contains|all:
    - 'split'
    - 'join'
  condition: selection_img and (all of selection_to_* or 1 of selection_gen_*)
falsepositives:
- Unknown
level: low
notes: |
  n
  ### Technical Context
  This Sigma rule is designed to detect potentially malicious PowerShell activity by identifying specific patterns in command-line arguments used with PowerShell (powershell.exe or pwsh.exe). The rule focuses on the presence of encoded command signatures that could indicate an attempt to obfuscate malicious code execution or evade detection. It looks for command strings containing common PowerShell encoding methods (e.g., ToInt, ToDecimal) or patterns indicating data manipulation (e.g., char, split, join). The primary data sources involved are process creation logs, particularly those capturing the command-line parameters that illustrate how PowerShell is invoked. This detection aligns with the MITRE ATT&CK tactics of Defense Evasion (T1027) and Execution (T1059.001).
  ### Investigation Steps
  - **Check EDR for Process Details:** Examine the process creation logs in your EDR solution to identify the full command-line input of the reported PowerShell instance. Look for additional context related to parent processes that may indicate how the PowerShell command was initiated.
    
  - **Analyze Command-Line Arguments:** Focus on the specific arguments highlighted in the alert. Assess whether these arguments match common PowerShell encoding or obfuscation techniques that could indicate malicious intent or misuse.
    
  - **Review Related System Logs:** Investigate Windows Event Logs, especially Security logs, to determine if other suspicious activities correlated with the time of the PowerShell execution. This could include unusual logins or access permissions.
    
  - **Utilize Threat Intelligence:** Cross-reference the involved processes and command-line patterns against known threat intelligence databases to identify whether the behavior is linked to known malicious actors or campaigns.
  ### Prioritization
  The alert is categorized as low severity due to the potential for legitimate use of PowerShell encoding methods in administrative scripts. However, it warrants investigation as it may serve as an initial indicator of a more significant security incident.
  ### Blind Spots and Assumptions
  This rule may not fire if the malicious PowerShell commands do not utilize the specified encoding methods or if alternative obfuscation techniques are employed that do not match the defined patterns. Additionally, this initial detection assumes that PowerShell is being executed in the expected context, and it may be bypassed if an adversary uses legitimate scheduled tasks, alternative scripting languages, or direct API calls to execute malicious code without invoking PowerShell.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
