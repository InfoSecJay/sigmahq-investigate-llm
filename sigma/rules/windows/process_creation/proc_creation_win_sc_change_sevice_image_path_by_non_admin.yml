title: Possible Privilege Escalation via Weak Service Permissions
id: d937b75f-a665-4480-88a5-2f20e9f9b22a
status: test
description: Detection of sc.exe utility spawning by user with Medium integrity level
  to change service ImagePath or FailureCommand
references:
- https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment
- https://pentestlab.blog/2017/03/30/weak-service-permissions/
author: Teymur Kheirkhabarov
date: 2019-10-26
modified: 2024-12-01
tags:
- attack.persistence
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1574.011
logsource:
  category: process_creation
  product: windows
detection:
  scbynonadmin:
    Image|endswith: '\sc.exe'
    IntegrityLevel:
    - 'Medium'
    - 'S-1-16-8192'
  selection_binpath:
    CommandLine|contains|all:
    - 'config'
    - 'binPath'
  selection_failure:
    CommandLine|contains|all:
    - 'failure'
    - 'command'
  condition: scbynonadmin and 1 of selection_*
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This Sigma rule detects potential privilege escalation attempts on Windows systems through the misuse of the service control (sc.exe) utility. Specifically, it identifies processes initiated by users with Medium integrity levels trying to modify service configurations such as the ImagePath or FailureCommand parameters. The rule monitors for the command-line arguments associated with `sc.exe`, filtering for the presence of keywords like "config", "binPath", and "failure". Data sources relevant for this detection include process creation logs, which capture the command-line parameters and integrity levels of processes, enabling the identification of unauthorized service modifications. This technique aligns with the MITRE ATT&CK framework under the Persistence tactic (T1574.011), where attackers leverage misconfigured services to maintain access to compromised systems.
  ### Investigation Steps
  - **Check EDR Alerts:** Review EDR logs for related alerts that might indicate other suspicious activities associated with the user or processes involved in the detected sc.exe execution.
  - **Examine Process Creation Logs:** Utilize Windows Event Logs to investigate process creations linked to the identified alert, focusing on associated command-line arguments and the originating user account.
  - **Assess Service Configurations:** Query the current service configurations on the system to verify if any unauthorized changes have been made to service parameters, specifically for the affected service.
  - **Investigate User Permissions:** Review user and group permissions for the affected services to determine if the initiating user has inappropriate elevated permissions that could facilitate privilege escalation.
  ### Prioritization
  This alert is classified with high severity due to the critical nature of potential privilege escalation, as unauthorized modifications to service configurations can lead to persistent access for attackers, increasing the risk of further exploitation within the environment.
  ### Blind Spots and Assumptions
  The detection rule may not fire in scenarios where the user is operating with elevated privileges or if the command for `sc.exe` is executed in a non-standard way (e.g., using PowerShell to indirectly invoke it). Additionally, the rule may not capture all instances of privilege escalation if command-line filtering is bypassed or logged data is modified. It assumes that proper logging takes place and that integrity levels are accurately maintained in the context of process creation.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
