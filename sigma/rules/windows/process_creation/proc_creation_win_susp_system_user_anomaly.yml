title: Suspicious SYSTEM User Process Creation
id: 2617e7ed-adb7-40ba-b0f3-8f9945fe6c09
status: test
description: Detects a suspicious process creation as SYSTEM user (suspicious program
  or command line parameter)
references:
- Internal Research
- https://tools.thehacker.recipes/mimikatz/modules
author: Florian Roth (Nextron Systems), David ANDRE (additional keywords)
date: 2021-12-20
modified: 2024-12-01
tags:
- attack.credential-access
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1134
- attack.t1003
- attack.t1027
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    IntegrityLevel:
    - 'System'
    - 'S-1-16-16384'
    User|contains:     # covers many language settings
    - 'AUTHORI'
    - 'AUTORI'
  selection_special:
  - Image|endswith:
    - '\calc.exe'
    - '\cscript.exe'
    - '\forfiles.exe'
    - '\hh.exe'
    - '\mshta.exe'
    - '\ping.exe'
    - '\wscript.exe'
  - CommandLine|contains:
              # - 'sc stop ' # stops a system service # causes FPs
    - ' -NoP '            # Often used in malicious PowerShell commands
    - ' -W Hidden '            # Often used in malicious PowerShell commands
    - ' -decode '            # Used with certutil
    - ' /decode '            # Used with certutil
    - ' /urlcache '            # Used with certutil
    - ' -urlcache '            # Used with certutil
    - ' -e* JAB'            # PowerShell encoded commands
    - ' -e* SUVYI'            # PowerShell encoded commands
    - ' -e* SQBFAFgA'            # PowerShell encoded commands
    - ' -e* aWV4I'            # PowerShell encoded commands
    - ' -e* IAB'            # PowerShell encoded commands
    - ' -e* PAA'            # PowerShell encoded commands
    - ' -e* aQBlAHgA'            # PowerShell encoded commands
    - 'vssadmin delete shadows'            # Ransomware
    - 'reg SAVE HKLM'            # save registry SAM - syskey extraction
    - ' -ma '            # ProcDump
    - 'Microsoft\Windows\CurrentVersion\Run'            # Run key in command line - often in combination with REG ADD
    - '.downloadstring('            # PowerShell download command
    - '.downloadfile('            # PowerShell download command
    - ' /ticket:'            # Rubeus
    - 'dpapi::'               # Mimikatz
    - 'event::clear'                  # Mimikatz
    - 'event::drop'               # Mimikatz
    - 'id::modify'                # Mimikatz
    - 'kerberos::'                 # Mimikatz
    - 'lsadump::'                # Mimikatz
    - 'misc::'               # Mimikatz
    - 'privilege::'                 # Mimikatz
    - 'rpc::'                # Mimikatz
    - 'sekurlsa::'                 # Mimikatz
    - 'sid::'                  # Mimikatz
    - 'token::'                # Mimikatz
    - 'vault::cred'               # Mimikatz
    - 'vault::list'               # Mimikatz
    - ' p::d '            # Mimikatz
    - ';iex('            # PowerShell IEX
    - 'MiniDump'            # Process dumping method apart from procdump
    - 'net user '
  filter_main_ping:
    CommandLine|contains|all:
    - 'ping'
    - '127.0.0.1'
    - ' -n '
  filter_vs:
    Image|endswith: '\PING.EXE'
    ParentCommandLine|contains: '\DismFoDInstall.cmd'
  filter_config_mgr:
    ParentImage|contains: ':\Packages\Plugins\Microsoft.GuestConfiguration.ConfigurationforWindows\'
  filter_java:
    ParentImage|contains:
    - ':\Program Files (x86)\Java\'
    - ':\Program Files\Java\'
    ParentImage|endswith: '\bin\javaws.exe'
    Image|contains:
    - ':\Program Files (x86)\Java\'
    - ':\Program Files\Java\'
    Image|endswith: '\bin\jp2launcher.exe'
    CommandLine|contains: ' -ma '
  condition: all of selection* and not 1 of filter_*
falsepositives:
- Administrative activity
- Scripts and administrative tools used in the monitored environment
- Monitoring activity
level: high
notes: |
  n
  ### Technical Context
  This Sigma rule is designed to detect suspicious process creation originating from the SYSTEM user account on Windows systems. The rule specifically looks for processes running with a SYSTEM integrity level, which can indicate potential privilege escalation or credential access attempts by malicious actors. Key indicators include specific executables (e.g., `calc.exe`, `mshta.exe`, `ping.exe`) and suspicious command-line arguments frequently associated with payload delivery or exploitation tactics, such as PowerShell escape sequences and Mimikatz commands. These command-line patterns are indicative of attempts to exploit weaknesses or gain unauthorized access to system resources (MITRE ATT&CK techniques T1003 for Credential Dumping and T1134 for Access Token Manipulation). The rule is primarily based on the analysis of Windows process creation event logs.
  ### Investigation Steps
  - **Review EDR Alerts:** Check your endpoint detection and response (EDR) system for any alerts or additional context surrounding the identified process creation event. Pay attention to the parent process and related network connections.
    
  - **Analyze Command-Line Arguments:** Examine the command-line parameters associated with the detected process creation. Look for known malicious flags, encoded commands, or unusual activities related to privilege escalation.
  - **Check for Additional Indicators:** Investigate other log sources, such as Windows Security or Sysmon logs, for additional clues around user activity, authentication events, or potential lateral movement.
  - **Cross-reference with Threat Intelligence:** Use threat intelligence feeds to correlate the identified processes and command-line arguments against known threats or adversarial behavior patterns to assess the potential risk.
  ### Prioritization
  The alert is considered high severity due to the elevated privileges associated with the SYSTEM user account, which can allow attackers to execute arbitrary commands or access sensitive data effectively. A detection with this nature indicates an immediate need for investigation to prevent potential data breaches or service disruptions.
  ### Blind spots and Assumptions
  This rule may not fire if the process creation is legitimate administrative activity, such as system maintenance tasks initiated through approved scripts or tools. Additionally, if malicious processes are initiated through methods that avoid typical logging (e.g., directly manipulating memory), it may bypass detection. Analysts should be cautious of potential false positives stemming from commonly used administrative scripts or legitimate tools employed within the environment.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
