title: PowerShell Base64 Encoded Invoke Keyword
id: 6385697e-9f1b-40bd-8817-f4a91f40508e
related:
- id: fd6e2919-3936-40c9-99db-0aa922c356f7
  type: obsolete
status: test
description: Detects UTF-8 and UTF-16 Base64 encoded powershell 'Invoke-' calls
references:
- https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/
author: pH-T (Nextron Systems), Harjot Singh, @cyb3rjy0t
date: 2022-05-20
modified: 2023-04-06
tags:
- attack.execution
- attack.t1059.001
- attack.defense-evasion
- attack.t1027
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
  selection_cli_enc:
    CommandLine|contains: ' -e'
  selection_cli_invoke:
    CommandLine|contains:
            # Invoke-
            # UTF-16LE
    - 'SQBuAHYAbwBrAGUALQ'
    - 'kAbgB2AG8AawBlAC0A'
    - 'JAG4AdgBvAGsAZQAtA'
            # UTF-8
    - 'SW52b2tlL'
    - 'ludm9rZS'
    - 'JbnZva2Ut'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "PowerShell Base64 Encoded Invoke Keyword" is designed to detect suspicious PowerShell commands that utilize Base64 encoding, specifically focusing on `Invoke-` calls. Attackers often use PowerShell to execute malicious code, leveraging Base64 encoding to obfuscate command strings and evade detection. This rule works by examining process creation logs for PowerShell or pwsh (the new PowerShell core) execution where the command line includes encoded parameters. The rule captures command lines with the parameter `-e`, which indicates Base64 encoded content, and checks for specific commands associated with the PowerShell `Invoke-` keyword. This pattern is indicative of potential malicious behavior and falls under the MITRE ATT&CK tactics for execution (T1059.001) and defense evasion (T1027). It leverages telemetry from Windows' Sysmon process creation logs.
  ### Investigation Steps
  - **Check Process Creation Logs:** Review the process creation logs in Sysmon for instances of `powershell.exe` or `pwsh.exe` that contain `-e` in the command line, indicating Base64 encoded commands.
  - **Correlate with EDR Data:** Utilize your EDR tool to identify any associated processes or behaviors around the time of the PowerShell execution to determine if additional malicious activity occurred.
  - **Examine Command Line Arguments:** Investigate the decoded command line arguments to identify the exact PowerShell commands executed. This can provide insights into the attackerâ€™s intentions and methods.
  - **Monitor Network Activity:** Analyze network connections and proxy logs to see if any suspicious outbound traffic occurred during or after the PowerShell execution, as this can indicate data exfiltration or command and control (C2) communications.
  ### Prioritization
  The alert is categorized as high severity due to the potential for significant damage or data compromise when attackers execute obfuscated PowerShell commands, which are commonly associated with various cyber threats.
  ### Blind Spots and Assumptions
  This rule may not fire in environments where PowerShell execution policies are set to restrict usage or where PowerShell is entirely disabled. Additionally, legitimate scripts that utilize Base64 encoding without malicious intent may generate false positives, especially if there are custom scripts in use. An attacker might also obfuscate their commands further or use alternative methods to invoke PowerShell, bypassing this rule. 
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
