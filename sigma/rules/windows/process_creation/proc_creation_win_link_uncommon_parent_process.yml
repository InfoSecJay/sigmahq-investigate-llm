title: Uncommon Link.EXE Parent Process
id: 6e968eb1-5f05-4dac-94e9-fd0c5cb49fd6
status: test
description: |
  Detects an uncommon parent process of "LINK.EXE".
  Link.EXE in Microsoft incremental linker. Its a utility usually bundled with Visual Studio installation.
  Multiple utilities often found in the same folder (editbin.exe, dumpbin.exe, lib.exe, etc) have a hardcode call to the "LINK.EXE" binary without checking its validity.
  This would allow an attacker to sideload any binary with the name "link.exe" if one of the aforementioned tools get executed from a different location.
  By filtering the known locations of such utilities we can spot uncommon parent process of LINK.EXE that might be suspicious or malicious.
references:
- https://twitter.com/0gtweet/status/1560732860935729152
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-08-22
modified: 2024-06-27
tags:
- attack.defense-evasion
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith: '\link.exe'
    CommandLine|contains: 'LINK /'     # Hardcoded command line when we call tools like dumpbin.exe, editbin.exe, lib.exe...etc
    # Add other filters for other legitimate locations
  filter_main_visual_studio:
    ParentImage|startswith:
    - 'C:\Program Files\Microsoft Visual Studio\'
    - 'C:\Program Files (x86)\Microsoft Visual Studio\'
    ParentImage|contains:
    - '\VC\bin\'
    - '\VC\Tools\'
  condition: selection and not 1 of filter_main_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the execution of `LINK.EXE`, a utility typically associated with Microsoft's Visual Studio, when it is launched from an uncommon parent process. The rule identifies instances where the command line includes the hardcoded `LINK /` parameter, which is commonly present when ancillary tools like `dumpbin.exe`, `editbin.exe`, or `lib.exe` are executed. By focusing on parent processes that do not originate from legitimate Visual Studio installation paths (like `C:\Program Files\Microsoft Visual Studio\`), the rule can highlight potentially malicious activity. Attackers may exploit this behavior by side-loading their own `LINK.EXE` binary, leading to unauthorized functions being executed under the guise of legitimate tooling.
  The primary data sources involved in this detection include process creation logs, where the image and command line of executed processes are captured, along with parent process information. This information allows the SOC to identify anomalous behavior in environments where Visual Studio tools are typically utilized.
  ### Investigation Steps
  - Use the EDR tool to review the process tree related to the detected instance of `LINK.EXE`, focusing on the parent process to determine its legitimacy.
  - Check the command line arguments associated with the `LINK.EXE` execution in the EDR logs to identify any potentially suspicious commands that could indicate misuse.
  - Query the SIEM for historical data on previous executions of `LINK.EXE` from the same parent process to assess if this behavior is recurrent or abnormal.
  - Analyze any associated network connections through the NDR or Proxy logs to identify communication with external systems that may suggest data exfiltration or further incursions.
