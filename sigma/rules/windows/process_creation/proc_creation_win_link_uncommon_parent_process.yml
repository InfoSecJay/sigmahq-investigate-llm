title: Uncommon Link.EXE Parent Process
id: 6e968eb1-5f05-4dac-94e9-fd0c5cb49fd6
status: test
description: |
  Detects an uncommon parent process of "LINK.EXE".
  Link.EXE in Microsoft incremental linker. Its a utility usually bundled with Visual Studio installation.
  Multiple utilities often found in the same folder (editbin.exe, dumpbin.exe, lib.exe, etc) have a hardcode call to the "LINK.EXE" binary without checking its validity.
  This would allow an attacker to sideload any binary with the name "link.exe" if one of the aforementioned tools get executed from a different location.
  By filtering the known locations of such utilities we can spot uncommon parent process of LINK.EXE that might be suspicious or malicious.
references:
- https://twitter.com/0gtweet/status/1560732860935729152
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-08-22
modified: 2024-06-27
tags:
- attack.defense-evasion
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith: '\link.exe'
    CommandLine|contains: 'LINK /'     # Hardcoded command line when we call tools like dumpbin.exe, editbin.exe, lib.exe...etc
    # Add other filters for other legitimate locations
  filter_main_visual_studio:
    ParentImage|startswith:
    - 'C:\Program Files\Microsoft Visual Studio\'
    - 'C:\Program Files (x86)\Microsoft Visual Studio\'
    ParentImage|contains:
    - '\VC\bin\'
    - '\VC\Tools\'
  condition: selection and not 1 of filter_main_*
falsepositives:
- Unknown
level: medium
notes: |
  n
  ### Technical Context
  This Sigma rule is designed to detect instances of `LINK.EXE` being executed with an uncommon parent process. `LINK.EXE` is a utility from the Microsoft incremental linker, typically associated with legitimate tools from Visual Studio, such as `editbin.exe`, `dumpbin.exe`, and `lib.exe`. In this context, the rule looks for the execution of `LINK.EXE` under unusual circumstances, specifically when the process is spawned by a parent process that is not from a recognized Visual Studio installation directory. By monitoring process creation logs and command-line arguments, the rule identifies potential misuse or malicious activity by filtering out typical Visual Studio paths and validating the legitimacy of the parent process.
  This detection aligns with the MITRE ATT&CK tactic of **Defense Evasion** and the technique **T1218: Signed Binary Proxy Execution**, as attackers could exploit legitimate binaries to sideload malicious versions of `LINK.EXE` if executed under untrusted conditions. Responders should focus on alerts that indicate unusual execution paths to maintain robust security against potential threats.
  ### Investigation Steps
  - **Review the alert details:** Examine the details of the alert in the SIEM to identify the parent process of the detected `LINK.EXE` execution. Assess if the parent process corresponds to a known Visual Studio utility or if it originates from an unexpected source.
    
  - **Correlate with EDR logs:** Utilize the EDR tool to investigate the activity around the time of the alert. Look for other related processes or activities that occurred before or after the execution of `LINK.EXE` to establish a comprehensive timeline of events.
  - **Analyze command-line arguments:** Inspect the command-line parameters associated with the execution of `LINK.EXE`. Unusual arguments, or commands that do not align with standard usage, may indicate malicious intent.
  - **Verify binary integrity:** Check the integrity of the `LINK.EXE` binary using antivirus or endpoint security tools. Verify if the hash of the file matches known safe versions or if it has been tampered with, which could suggest a compromised state.
  ### Prioritization
  This alert is classified as medium severity because atypical executions of `LINK.EXE` may signify attempts to bypass security mechanisms using legitimate tools. Effective response actions are necessary to ensure that such detections are thoroughly investigated to prevent potential malicious activity.
  ### Blind Spots and Assumptions
  There are several scenarios where this rule may not fire as intended. The rule assumes that all legitimate executions of `LINK.EXE` will originate from specific Visual Studio directories; however, if legitimate tools are installed in non-standard paths or if the attacker utilizes stealth techniques (e.g., renaming processes or binary files), the detection may fail. Additionally, attackers could exploit known overrides or environment path alterations to sidestep the rule. Keep in mind that not all parent processes may be recognized, thus generating false negatives in the detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
