title: Potentially Suspicious ASP.NET Compilation Via AspNetCompiler
id: 9f50fe98-fe5c-4a2d-86c7-fad7f63ed622 # Susp Paths
related:
- id: 9ccba514-7cb6-4c5c-b377-700758f2f120     # SuspChild
  type: similar
- id: 4c7f49ee-2638-43bb-b85b-ce676c30b260     # TMP File
  type: similar
- id: a01b8329-5953-4f73-ae2d-aa01e1f35f00     # Exec
  type: similar
status: test
description: Detects execution of "aspnet_compiler.exe" with potentially suspicious
  paths for compilation.
references:
- https://lolbas-project.github.io/lolbas/Binaries/Aspnet_Compiler/
- https://ijustwannared.team/2020/08/01/the-curious-case-of-aspnet_compiler-exe/
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-08-14
tags:
- attack.defense-evasion
- attack.t1127
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|contains:
    - 'C:\Windows\Microsoft.NET\Framework\'
    - 'C:\Windows\Microsoft.NET\Framework64\'
    Image|endswith: '\aspnet_compiler.exe'
    CommandLine|contains:
            # Note: add other potential suspicious paths
    - '\Users\Public\'
    - '\AppData\Local\Temp\'
    - '\AppData\Local\Roaming\'
    - ':\Temp\'
    - ':\Windows\Temp\'
    - ':\Windows\System32\Tasks\'
    - ':\Windows\Tasks\'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect suspicious usage of the ASP.NET compiler tool, `aspnet_compiler.exe`, typically found within Windows environments. The rule targets the execution of this tool when it is invoked from potentially malicious paths, such as temporary directories and user directories that are commonly used for malware storage and execution. By monitoring process creation logs, specifically focusing on the command line arguments and the image paths, the tool can identify instances where `aspnet_compiler.exe` may be used in an atypical or harmful manner. The use of `aspnet_compiler.exe` in such contexts could signify attempts to obfuscate malicious activities under the guise of legitimate ASP.NET compilation due to its legitimate role in creating and pre-compiling web applications.
  The rule corresponds to the MITRE ATT&CK technique **T1127: Trusted Developer Utilities** in the defense evasion tactic. This technique highlights how adversaries might abuse trusted tools to evade detection mechanisms, indicating potential malicious intent behind seemingly normal operations within the development frameworks.
  ### Investigation Steps
  - **Verify Process Creation:** Check the EDR for details on the process creation event. Confirm the parent process, user context, and whether the process was spawned from a legitimate and expected source.
  - **Review Command Line Arguments:** Examine the command line parameters passed to `aspnet_compiler.exe` in the logs. Look for unusual paths and parameters that may suggest the process is being used for malicious behavior.
  - **Inspect File System Changes:** Utilize file monitoring tools to identify any changes made in the directories specified by the suspicious paths, such as `C:\Users\Public\` or `C:\Windows\Temp\`. Determine if any known malicious files were created or modified during the period of execution.
  - **Cross-reference with Network Activity:** Analyze network traffic logs to see if any outbound connections were initiated by this process. Malicious ASP.NET compilation could correlate with communication to known bad IP addresses or domains.
  ### Prioritization
  The alert is prioritized as **high severity** due to the nature of the ASP.NET compiler, which could be exploited by adversaries to create malicious web applications or execute significant changes to the environment. The use of such a tool in conjunction with suspicious paths heightens the risk of undetected infiltration or lateral movement within the network.
  ### Blind Spots and Assumptions
  One notable blind spot in this detection rule is the assumption that `aspnet_compiler.exe` is always executed in observable contexts. If adversaries run obfuscated or alternative versions of the tool, or leverage other means of evading logging via process injection, this rule may not trigger. Additionally, there may be legitimate use cases where this tool is invoked from the suspicious paths identified, leading to potential false positives. Analysts must evaluate the context of the execution closely and consider the operational environment where legitimate development workflows occur.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
