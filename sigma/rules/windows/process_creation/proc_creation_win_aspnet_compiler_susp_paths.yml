title: Potentially Suspicious ASP.NET Compilation Via AspNetCompiler
id: 9f50fe98-fe5c-4a2d-86c7-fad7f63ed622 # Susp Paths
related:
- id: 9ccba514-7cb6-4c5c-b377-700758f2f120     # SuspChild
  type: similar
- id: 4c7f49ee-2638-43bb-b85b-ce676c30b260     # TMP File
  type: similar
- id: a01b8329-5953-4f73-ae2d-aa01e1f35f00     # Exec
  type: similar
status: test
description: Detects execution of "aspnet_compiler.exe" with potentially suspicious
  paths for compilation.
references:
- https://lolbas-project.github.io/lolbas/Binaries/Aspnet_Compiler/
- https://ijustwannared.team/2020/08/01/the-curious-case-of-aspnet_compiler-exe/
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-08-14
tags:
- attack.defense-evasion
- attack.t1127
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|contains:
    - 'C:\Windows\Microsoft.NET\Framework\'
    - 'C:\Windows\Microsoft.NET\Framework64\'
    Image|endswith: '\aspnet_compiler.exe'
    CommandLine|contains:
            # Note: add other potential suspicious paths
    - '\Users\Public\'
    - '\AppData\Local\Temp\'
    - '\AppData\Local\Roaming\'
    - ':\Temp\'
    - ':\Windows\Temp\'
    - ':\Windows\System32\Tasks\'
    - ':\Windows\Tasks\'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule "Potentially Suspicious ASP.NET Compilation Via AspNetCompiler" aims to detect the execution of the `aspnet_compiler.exe` utility, which is commonly used for ASP.NET application compilation. This rule is particularly focused on identifying instances where this executable is run with command-line parameters that include potentially suspicious paths. The detection mechanism relies on process creation logs that detail the execution of the `aspnet_compiler.exe` image and the command-line arguments used during its invocation. Key focus paths include directories like `C:\Users\Public\`, `C:\AppData\Local\Temp\`, and `C:\Windows\Tasks\`, which could indicate attempts to exploit known compilation behaviors for malicious purposes. Identifying such activity is critical for mitigating threats that leverage ASP.NET compilation functions for reconnaissance, evasion, or deployment of unauthorized web applications.
  ### Investigation Steps
  - Use EDR tools to review the process tree and contextual details around any detected invocation of `aspnet_compiler.exe`, specifically examining parent processes and user accounts associated with the execution.
  - Analyze command-line parameters associated with the alert to identify any unusual or unexpected paths that may indicate malicious intent. 
  - Inspect web server logs or application logs for any abnormal behavior that correlates with the execution time of `aspnet_compiler.exe` to determine if unauthorized application changes were made.
  - Conduct a search in the SIEM for similar activities or indicators related to ASP.NET compilers to identify potential common threats or patterns that may assist in a broader investigation.
