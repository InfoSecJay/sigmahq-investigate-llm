title: Explorer Process Tree Break
id: 949f1ffb-6e85-4f00-ae1e-c3c5b190d605
status: test
description: |
  Detects a command line process that uses explorer.exe to launch arbitrary commands or binaries,
  which is similar to cmd.exe /c, only it breaks the process tree and makes its parent a new instance of explorer spawning from "svchost"
references:
- https://twitter.com/CyberRaiju/status/1273597319322058752
- https://twitter.com/bohops/status/1276357235954909188?s=12
- https://twitter.com/nas_bench/status/1535322450858233858
- https://securityboulevard.com/2019/09/deobfuscating-ostap-trickbots-34000-line-javascript-downloader/
author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems),
  @gott_cyber
date: 2019-06-29
modified: 2024-06-04
tags:
- attack.defense-evasion
- attack.t1036
logsource:
  category: process_creation
  product: windows
detection:
  selection:
        # See CLSID_SeparateMultipleProcessExplorerHost in the registry for reference
  - CommandLine|contains: '/factory,{75dff2b7-6936-4c06-a8bb-676a7b00b24b}'       # This will catch, the new explorer spawning which indicates a process/tree break. But you won't be able to catch the executing process. For that you need historical data
        # There exists almost infinite possibilities to spawn from explorer. The "/root" flag is just an example
        # It's better to have the ability to look at the process tree and look for explorer processes with "weird" flags to be able to catch this technique.
  - CommandLine|contains|all|windash:
    - 'explorer.exe'
    - ' /root,'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The "Explorer Process Tree Break" detection rule identifies suspicious command line activities initiated by the Windows `explorer.exe` process, particularly those employing the `/factory,{75dff2b7-6936-4c06-a8bb-676a7b00b24b}` flag. This technique allows attackers to circumvent typical process hierarchies by spawning new processes in a way that obscures their origins. Instead of maintaining the standard parent-child relationship in process execution, a malicious command can use `explorer.exe` to execute arbitrary commands or binaries while reestablishing the parent process to a new instance of `explorer.exe` originating from `svchost`. This behavior is associated with the MITRE ATT&CK technique T1036, specifically under the tactic of Defense Evasion. Data sources used to identify this activity include process creation logs, specifically looking at command line parameters to flag unexpected or unusual usage of the `explorer.exe` process.
  ### Investigation Steps
  - **Review Process Creation Logs**: Examine process creation logs for entries connected to `explorer.exe` that contain the `/factory` or `/root` flags, as these are indicative of potential evasion techniques.
  - **Analyze Command-Line Parameters**: Inspect the command line parameters of any suspicious `explorer.exe` instances to determine if they were used to launch unexpected binaries or commands.
  - **Correlate with Historical Data**: Utilize EDR or SIEM solutions to correlate current process activities with historical data, helping identify the parent processes and their execution lineage.
  - **Evaluate Network Activity**: Check network logs to find any unusual outbound connections initiated by processes launched via `explorer.exe`, as these may indicate data exfiltration or command-and-control behaviors.
  ### Prioritization
  Due to the nature of this behavior, which can be indicative of an attempt to bypass security controls and execute potentially malicious commands, this alert is assigned a medium severity level. Swift response is recommended to establish whether further investigation is warranted and to mitigate potential threats.
  ### Blind Spots and Assumptions
  This rule may not fire in environments where defenses against such evasion techniques have been implemented or where `explorer.exe` is regularly used in non-standard ways, leading to potential false negatives. Additionally, adversaries may utilize alternate processes or obfuscation methods that do not match the specified command line criteria. Therefore, incident responders should consider the limitations inherent in relying solely on command line detection and should supplement this rule with behavior-based analytics and anomaly detection where applicable.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
