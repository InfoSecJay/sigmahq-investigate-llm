title: Suspicious Userinit Child Process
id: b655a06a-31c0-477a-95c2-3726b83d649d
status: test
description: Detects a suspicious child process of userinit
references:
- https://twitter.com/SBousseaden/status/1139811587760562176
author: Florian Roth (Nextron Systems), Samir Bousseaden (idea)
date: 2019-06-17
modified: 2022-12-09
tags:
- attack.defense-evasion
- attack.t1055
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\userinit.exe'
  filter1:
    CommandLine|contains: '\netlogon\'
  filter2:
  - Image|endswith: '\explorer.exe'
  - OriginalFileName: 'explorer.exe'
  condition: selection and not 1 of filter*
fields:
- CommandLine
- ParentCommandLine
falsepositives:
- Administrative scripts
level: medium
notes: |
  ### Technical Context
  The "Suspicious Userinit Child Process" detection rule is designed to identify potentially malicious processes spawned from the legitimate `userinit.exe` executable, a critical Windows process responsible for initializing user sessions. This rule specifically looks for child processes that are created with command line arguments referencing paths typical of Netlogon operations (i.e., `\netlogon\`). The focus is particularly on instances where the parent process is `userinit.exe`, combined with filtering for the child process being `explorer.exe`, as attackers may utilize this technique to disguise malicious behavior under the guise of legitimate processes.
  The detection leverages Windows process creation logs, which capture essential details such as the `CommandLine` used to start a process and the `ParentImage` from which it was spawned. By identifying anomalies in process relationships, this rule aligns with the MITRE ATT&CK framework tactic of Defensiveness (T1064: Scripting) and attempts to uncover potential process manipulation or evasion strategies employed by threat actors.
  ### Investigation Steps
  - **Examine Process Creation Logs:** Review the process creation logs in your EDR solution to identify instances where `userinit.exe` has spawned other processes. Pay attention to the `CommandLine` and `ParentCommandLine` to confirm the legitimacy of the actions taking place.
  - **Analyze Child Process Details:** For each suspicious child process detected as a result of this rule, check the full details of the `explorer.exe` invocation in question, including timestamps and any user accounts associated with its execution.
  - **Correlate with Additional Logs:** Cross-reference findings with Windows Security Event Logs to see if there are any related authentication events, especially those involving `Netlogon`, to understand the context of the user session.
  - **Review Network Connections:** Use logs from your firewall or network detection tools to check for any outbound connections made by the suspicious child process. Look for unusual traffic patterns or connections to known malicious domains.
  ### Prioritization
  This alert has a medium severity level because while the presence of a suspicious child process can indicate an attempt to bypass security controls or perform malicious actions, it may also stem from legitimate administrative activity. Therefore, investigation efforts should be prioritized but considered alongside other contextual factors.
  ### Blind spots and Assumptions
  The rule may not fire if malicious actors utilize processes that do not have `userinit.exe` as their parent or if they employ alternative methods of process execution that bypass the normal creation pathways (e.g., direct injection into existing processes). Additionally, legitimate administrative scripts that interface with `userinit.exe` could trigger false positives. Understanding that not all environment configurations use `userinit.exe` as expected, and that user behavior can vary widely, is crucial for effective detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and relevance, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
