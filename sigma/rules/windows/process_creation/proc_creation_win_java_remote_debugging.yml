title: Java Running with Remote Debugging
id: 8f88e3f6-2a49-48f5-a5c4-2f7eedf78710
status: test
description: Detects a JAVA process running with remote debugging allowing more than
  just localhost to connect
references:
- https://dzone.com/articles/remote-debugging-java-applications-with-jdwp
author: Florian Roth (Nextron Systems)
date: 2019-01-16
modified: 2023-02-01
tags:
- attack.t1203
- attack.execution
logsource:
  category: process_creation
  product: windows
detection:
  selection_jdwp_transport:
    CommandLine|contains: 'transport=dt_socket,address='
  selection_old_jvm_version:
    CommandLine|contains:
    - 'jre1.'
    - 'jdk1.'
  exclusion:
    CommandLine|contains:
    - 'address=127.0.0.1'
    - 'address=localhost'
  condition: all of selection_* and not exclusion
fields:
- CommandLine
- ParentCommandLine
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This detection rule identifies instances of a Java process that is running with remote debugging enabled, exposing it to connections beyond localhost. Specifically, it searches for Java applications executed with certain command-line parameters indicating that the Java Debug Wire Protocol (JDWP) is active and listening on an external address. The primary technical data sources involved in this detection include process creation logs that capture command-line arguments used during the execution of Java applications. The rule further narrows down potential threats by excluding commonly accepted and safe configurations where the address is limited to 127.0.0.1 or localhost, indicating that the debugging session is not accessible from outside the local machine.
  ### Investigation Steps
  - Review the process creation logs in the EDR platform for any Java processes that match the command-line criteria specified in the rule.
  - Analyze related parent-child process relationships in the EDR to determine how the Java process was initiated and by which application.
  - Check network traffic logs in the NDR to identify any inbound or outbound connections to the Java application's debugging port, focusing on IP addresses outside of localhost.
  - Consult cloud logging platforms such as AWS, GCP, or Azure to assess if similar processes or configurations exist across any deployed instances within your cloud environment.
