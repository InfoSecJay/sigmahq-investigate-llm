title: Java Running with Remote Debugging
id: 8f88e3f6-2a49-48f5-a5c4-2f7eedf78710
status: test
description: Detects a JAVA process running with remote debugging allowing more than
  just localhost to connect
references:
- https://dzone.com/articles/remote-debugging-java-applications-with-jdwp
author: Florian Roth (Nextron Systems)
date: 2019-01-16
modified: 2023-02-01
tags:
- attack.t1203
- attack.execution
logsource:
  category: process_creation
  product: windows
detection:
  selection_jdwp_transport:
    CommandLine|contains: 'transport=dt_socket,address='
  selection_old_jvm_version:
    CommandLine|contains:
    - 'jre1.'
    - 'jdk1.'
  exclusion:
    CommandLine|contains:
    - 'address=127.0.0.1'
    - 'address=localhost'
  condition: all of selection_* and not exclusion
fields:
- CommandLine
- ParentCommandLine
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The "Java Running with Remote Debugging" detection rule is designed to identify Java processes that are initiated with remote debugging capabilities, specifically allowing connections beyond the local host interface (i.e., connections from IP addresses other than 127.0.0.1 or localhost). Such configurations can expose applications to security risks, as unauthorized users may exploit the remote debugging feature to access sensitive data or launch attacks. The rule looks for specific command-line parameters associated with Java processes, particularly the presence of the JDWP (Java Debug Wire Protocol) transport settings, which dictate how remote debugging connections are established. It leverages data sourced from process creation logs to capture details about the command-line arguments used to launch Java processes.
  This rule is categorized under the MITRE ATT&CK tactic "Execution," specifically linked to the technique T1203 (Exploitation for Client Execution). Given that remote debugging can be a legitimate operation in development environments, the identification of such instances outside of controlled settings indicates a potential security issue that requires immediate investigation.
  ### Investigation Steps
  - **Review Process Creation Logs:** Utilize EDR tools to search for recent process creation events tied to Java processes, focusing on command-line parameters that include 'transport=dt_socket,address='.
    
  - **Analyze Network Connections:** Check network connection logs for any traffic to the Java process that may indicate unauthorized access attempts, especially from IPs other than localhost.
  - **Examine the Parent Command Line:** Investigate the ParentCommandLine field to determine the context in which the Java process was launched, looking for unusual parent processes that may indicate misconfigurations or attacks.
  - **Cross-reference with Security Logs:** Utilize SIEM tools to correlate these findings with other security events (e.g., authentication failures or unusual access patterns) in the environment.
  ### Prioritization
  This alert is assigned a medium severity due to the significant risk posed by remote debugging configurations, which, if compromised, can allow attackers to execute arbitrary code or extract sensitive information from the application being debugged.
  ### Blind Spots and Assumptions
  This rule may not fire in environments where remote debugging is consistently configured correctly and monitored effectively. Additionally, it assumes that all relevant Java processes are being captured by the monitoring systems. Adversaries could also potentially evade detection by employing techniques to mask their command-line arguments or by launching Java processes with different configurations that do not trigger the specific detection criteria outlined in the rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
