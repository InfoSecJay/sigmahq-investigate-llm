title: Scripting/CommandLine Process Spawned Regsvr32
id: ab37a6ec-6068-432b-a64e-2c7bf95b1d22
related:
- id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d
  type: obsolete
status: test
description: Detects various command line and scripting engines/processes such as
  "PowerShell", "Wscript", "Cmd", etc. spawning a "regsvr32" instance.
references:
- https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html
- https://app.any.run/tasks/34221348-072d-4b70-93f3-aa71f6ebecad/
author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
date: 2023-05-26
tags:
- attack.defense-evasion
- attack.t1218.010
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith:
    - '\cmd.exe'
    - '\cscript.exe'
    - '\mshta.exe'
    - '\powershell_ise.exe'
    - '\powershell.exe'
    - '\pwsh.exe'
    - '\wscript.exe'
    Image|endswith: '\regsvr32.exe'
  filter_main_rpcproxy:
    ParentImage: C:\Windows\System32\cmd.exe
    CommandLine|endswith: ' /s C:\Windows\System32\RpcProxy\RpcProxy.dll'
  condition: selection and not 1 of filter_main_*
falsepositives:
- Legitimate ".bat", ".hta", ".ps1" or ".vbs" scripts leverage legitimately often.
  Apply additional filter and exclusions as necessary
- Some legitimate Windows services
level: medium # Can be reduced to low if you experience a ton of FP
notes: |
  ### Technical Context
  The detection rule for "Scripting/CommandLine Process Spawned Regsvr32" identifies anomalous behaviors where common scripting or command-line interpreters, such as PowerShell, cmd.exe, or Wscript, invoke the legitimate Windows utility `regsvr32.exe`. This rule is built to detect instances where the command-line parameters indicate potential misuse of `regsvr32.exe`, particularly in scenarios involving the loading of possibly malicious DLLs, such as `RpcProxy.dll`. The primary data sources this rule leverages are process creation logs that capture the execution context, including the parent processâ€”helping analysts discern if a potentially malicious execution chain was initiated.
  By analyzing the command line associated with process creation, the rule effectively filters out routine uses of `regsvr32.exe`, focusing on those associated with scripting engines to detect potential evasion techniques employed by attackers, often associated with living-off-the-land tactics. 
  ### Investigation Steps
  - Utilize your EDR solution to track the execution history of the `regsvr32.exe` process, observing parent-child relationships to identify the initiating scripts or commands.
  - Examine the command-line arguments associated with the detected `regsvr32.exe` instance, specifically looking for flags commonly associated with malicious activity, such as `/s` followed by unexpected DLL paths.
  - Correlate findings with network activity logs, particularly from your NGFW or NDR tools, to assess if outbound connections were made post-execution, which could indicate data exfiltration.
  - Review any associated logs from the used scripting engines (e.g., PowerShell, Cmd) to identify any patterns or previous occurrences that could provide context regarding the intentions behind the script execution.
