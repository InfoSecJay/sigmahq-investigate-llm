title: Suspicious PowerShell IEX Execution Patterns
id: 09576804-7a05-458e-a817-eb718ca91f54
status: test
description: Detects suspicious ways to run Invoke-Execution using IEX alias
references:
- https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-expression?view=powershell-7.2
- https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708
author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
date: 2022-03-24
modified: 2022-11-28
tags:
- attack.execution
- attack.t1059.001
logsource:
  product: windows
  category: process_creation
detection:
  selection_combined_1:
    Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    CommandLine|contains:
    - ' | iex;'
    - ' | iex '
    - ' | iex}'
    - ' | IEX ;'
    - ' | IEX -Error'
    - ' | IEX (new'
    - ');IEX '
  selection_combined_2:
    CommandLine|contains:
    - '::FromBase64String'
    - '.GetString([System.Convert]::'
  selection_standalone:
    CommandLine|contains:
    - ')|iex;$'
    - ');iex($'
    - ');iex $'
    - ' | IEX | '
    - ' | iex\"'
  condition: all of selection_combined_* or selection_standalone
falsepositives:
- Legitimate scripts that use IEX
level: high
notes: |
  ### Technical Context
  This detection rule focuses on identifying suspicious execution patterns of PowerShell's `Invoke-Expression` (IEX) command, which is often utilized in malicious activities to execute arbitrary commands or code. Specifically, the rule inspects process creation logs for instances where the PowerShell executable (`powershell.exe` or `pwsh.exe`) is invoked with command line parameters commonly associated with obfuscation, such as piping with `| iex`, decoding Base64 strings, or using specific characters that hint at malicious intent. By monitoring these signatures in command-line arguments, we can catch various attack methodologies that leverage PowerShell for post-exploitation activities, aligning with the MITRE ATT&CK technique T1059.001 (Command and Scripting Interpreter: PowerShell).
  The rule primarily analyzes telemetry gathered from Windows process creation events, leveraging indicators from command-line parameters to detect potential misuse of the IEX command. Detecting such patterns helps reveal instances where adversaries might be executing downloaded or copied scripts to escalate their access or maintain persistence in compromised systems. By identifying these irregularities, security teams can swiftly initiate investigations into potentially harmful PowerShell activities.
  ### Investigation Steps
  - **Verify the Process Context**: Investigate the context of the detected PowerShell process in your EDR solution to determine if the process is associated with known malicious software or user accounts with unusual activity.
  - **Analyze Command Line Arguments**: Check the complete command line used in the invocation for any suspicious parameters or patterns that align with known attack signatures and correlate them with known good uses of PowerShell IEX.
  - **Inspect Event Logs**: Review relevant Windows Event Logs, particularly Security and Sysmon logs, for related events that may indicate a broader attack, such as unusual logon attempts or high-value targets being accessed.
  - **Search for Artifact Residue**: Look for any associated artifacts left on the system, such as temporary files, script downloads, or scheduled tasks that may have been created in conjunction with the execution of the suspicious command.
  ### Prioritization
  This alert is considered high severity due to the potential implications of executed commands through IEX in PowerShell, which can indicate an attempt to execute malicious payloads or scripts that pose significant risks to the organization.
  ### Blind Spots and Assumptions
  - **Legitimate Use**: The rule may generate false positives due to legitimate administrative scripts that rightfully use `Invoke-Expression`, leading to unnecessary investigations of benign activities.
  - **Command-Line Obfuscation**: The detection might not capture all forms of obfuscation or indirection that adversaries use to execute malicious PowerShell commands, especially if they employ different encoding methods or PowerShell features.
  - **Environment Variability**: In environments with strict PowerShell usage policies, certain benign applications might also trigger this alert, so contextual understanding of the operational environment is crucial for accurate response.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
