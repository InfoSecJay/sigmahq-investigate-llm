title: Potentially Suspicious Child Process of KeyScrambler.exe
id: ca5583e9-8f80-46ac-ab91-7f314d13b984
related:
- id: d2451be2-b582-4e15-8701-4196ac180260
  type: similar
status: experimental
description: Detects potentially suspicious child processes of KeyScrambler.exe
references:
- https://twitter.com/DTCERT/status/1712785421845790799
author: Swachchhanda Shrawan Poudel
date: 2024-05-13
tags:
- attack.execution
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1203
- attack.t1574.002
logsource:
  category: process_creation
  product: windows
detection:
  selection_parent:
    ParentImage|endswith: '\KeyScrambler.exe'
  selection_binaries:
        # Note: add additional binaries that the attacker might use
  - Image|endswith:
    - '\cmd.exe'
    - '\cscript.exe'
    - '\mshta.exe'
    - '\powershell.exe'
    - '\pwsh.exe'
    - '\regsvr32.exe'
    - '\rundll32.exe'
    - '\wscript.exe'
  - OriginalFileName:
    - 'Cmd.Exe'
    - 'cscript.exe'
    - 'mshta.exe'
    - 'PowerShell.EXE'
    - 'pwsh.dll'
    - 'regsvr32.exe'
    - 'RUNDLL32.EXE'
    - 'wscript.exe'
  condition: all of selection_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potentially suspicious child processes spawned by `KeyScrambler.exe`, a legitimate tool often used to enhance security by encrypting keystrokes. Attackers may abuse this tool as a means to launch other processes while evading detection, utilizing it as a parent for malicious actions. The rule specifically looks for process creation events where `KeyScrambler.exe` is the parent and monitors for known binaries that are commonly exploited by attackers, including command-line interpreters and scripting engines like `cmd.exe`, `powershell.exe`, and `mshta.exe`. 
  The relevant technical data sources for this rule include process creation logs which can be captured through Sysmon, Windows Security logs, and other endpoint detection and response (EDR) solutions. These logs provide visibility into the creation of processes and their relationships, which is crucial for spotting suspicious behavior linked to tactics such as execution (MITRE ATT&CK Tactic) and privilege escalation (T1203, T1574.002).
  ### Investigation Steps
  - **Check Process Relationships:** Investigate the process tree in your EDR to understand the context in which `KeyScrambler.exe` was executed. Determine if the child processes are legitimate or indicative of malicious activity.
  - **Examine Command-Line Parameters:** Review the command-line parameters for any spawned child processes to identify potentially harmful intentions or code execution attempts. Look for unexpected flags or unusual commands.
  - **Analyze File Behavior:** Utilize threat intelligence tools to correlate any hashes of the child processes with known malicious indicators. If any binaries are flagged, prioritize them for deeper analysis.
  - **Review Network Connections:** Inspect network logs for any connections initiated by suspicious child processes. This can help uncover potential communications with command-and-control servers or data exfiltration attempts.
  ### Prioritization
  When this alert fires, it should be treated as a medium severity incident due to the possibility that legitimate tools are being misused in a way that could indicate a compromise or an ongoing attack. Prompt investigation is essential to mitigate potential impacts on the organization.
  ### Blind spots and Assumptions
  This rule assumes that `KeyScrambler.exe` is present and utilized in the environment, which may not always be the case. Additionally, if an attacker uses custom or rare processes as a parent, they might evade detection due to their absence from the monitored binaries. It also relies on proper Sysmon configuration; if Sysmon is improperly deployed or logging is not comprehensive, the rule may fail to fire. Other strategies, such as process name obfuscation or the use of non-standard binaries, may also evade detection, highlighting the necessity for continuous updates and review of the detection logic.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
