title: Shell Process Spawned by Java.EXE
id: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0
related:
- id: 0d34ed8b-1c12-4ff2-828c-16fc860b766d
  type: similar
status: test
description: Detects shell spawned from Java host process, which could be a sign of
  exploitation (e.g. log4j exploitation)
references:
- https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/
author: Andreas Hunkeler (@Karneades), Nasreddine Bencherchali
date: 2021-12-17
modified: 2024-01-18
tags:
- attack.initial-access
- attack.persistence
- attack.privilege-escalation
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\java.exe'
    Image|endswith:
    - '\bash.exe'
    - '\cmd.exe'
    - '\powershell.exe'
    - '\pwsh.exe'
  filter_main_build:
    ParentImage|contains: 'build'      # excluding CI build agents
    CommandLine|contains: 'build'      # excluding CI build agents
  condition: selection and not 1 of filter_main_*
falsepositives:
- Legitimate calls to system binaries
- Company specific internal usage
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Shell Process Spawned by Java.EXE" aims to detect potentially malicious instances where shell processes (such as `bash.exe`, `cmd.exe`, `powershell.exe`, or `pwsh.exe`) are spawned by `java.exe`. This behavior can signify exploitation or misuse of Java applications, potentially related to vulnerabilities such as the infamous Log4j exploit. The detection mechanism primarily relies on process creation logs, analyzing both the parent and child processes involved in the execution chain. 
  By focusing on processes initiated by `java.exe`, this rule targets suspicious activity that could indicate either initial access or persistence mechanisms used by attackers. The condition that excludes processes related to CI builds, which are common in development environments, helps reduce false positives and fine-tunes detection. This rule aligns with specific MITRE ATT&CK techniques under the tactics of initial access, persistence, and privilege escalation.
  ### Investigation Steps
  - **Verify the Process Chain:** Inspect the EDR logs for the process creation hierarchy to confirm that the suspicious shell processes are directly spawned by `java.exe`.
  - **Analyze Command Line Args:** Review the command-line arguments associated with the shell processes to identify any unusual or potentially harmful commands that may indicate exploitation.
  - **Examine Parent Process Context:** Analyze the originating context of `java.exe`, including its file path and any relevant logs, to ensure that it's not part of a legitimate application or workflow.
  - **Review Network Activity:** Check for any unusual network connections initiated by the spawned shell processes using the NDR or firewall logs, as this may suggest outbound communications tied to potential exploitation.
  ### Prioritization
  This rule is marked as medium severity due to the potential for exploitation; however, it can also yield legitimate processes depending on the organization's internal usage of Java applications. It requires thorough investigation to differentiate between benign and malicious activities.
  ### Blind Spots and Assumptions
  This rule may not trigger if `java.exe` is legitimately invoked in a secure, controlled manner, where no unauthorized shell commands are spawned. It assumes that the environment adheres to standard operational procedures; deviations could lead to missed detections. Additionally, attackers could potentially disguise their operations in legitimate CI/CD workflows, making it crucial to consider the overall context when evaluating alerts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and comprehensiveness, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
