title: Shell Process Spawned by Java.EXE
id: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0
related:
- id: 0d34ed8b-1c12-4ff2-828c-16fc860b766d
  type: similar
status: test
description: Detects shell spawned from Java host process, which could be a sign of
  exploitation (e.g. log4j exploitation)
references:
- https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/
author: Andreas Hunkeler (@Karneades), Nasreddine Bencherchali
date: 2021-12-17
modified: 2024-01-18
tags:
- attack.initial-access
- attack.persistence
- attack.privilege-escalation
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\java.exe'
    Image|endswith:
    - '\bash.exe'
    - '\cmd.exe'
    - '\powershell.exe'
    - '\pwsh.exe'
  filter_main_build:
    ParentImage|contains: 'build'      # excluding CI build agents
    CommandLine|contains: 'build'      # excluding CI build agents
  condition: selection and not 1 of filter_main_*
falsepositives:
- Legitimate calls to system binaries
- Company specific internal usage
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect instances where a shell process, such as PowerShell or CMD, is spawned by a Java process (specifically `java.exe`). This behavior can indicate potential exploitation attempts, especially in the context of vulnerabilities like Log4j, allowing attackers to execute arbitrary commands through Java applications. The detection mechanism focuses on process creation logs to identify the parent-child relationships between processes. It looks for specific cases where `java.exe` is the parent of shell processes, while also applying filters to exclude legitimate CI/CD build activities that might involve the same command-line calls.
  The primary data sources involved in this detection include Windows process creation logs, which record detailed information about processes and their parent processes, including command-line arguments. By analyzing this data, security analysts can identify unexpected or malicious behaviors that deviate from normal operational patterns.
  ### Investigation Steps
  - Review the process creation logs in your EDR solution to confirm the spawning relationship between `java.exe` and the identified shell processes (e.g., `cmd.exe`, `powershell.exe`).
  - Examine the command-line parameters of the alerting shell process to assess whether they suggest malicious intent or unusual activity related to the Java application.
  - Utilize network logs from the NGFW or proxy to investigate any associated outbound connections initiated by the suspicious shell process, which could reveal command and control activity.
  - Cross-reference the affected Java application with any known vulnerabilities or exploits, such as those listed in the provided references, to determine if it has been subject to prior exploitation attempts.
