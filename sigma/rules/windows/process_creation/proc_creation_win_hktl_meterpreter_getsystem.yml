title: Potential Meterpreter/CobaltStrike Activity
id: 15619216-e993-4721-b590-4c520615a67d
status: test
description: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting
  a specific service starting
references:
- https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment
- https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/
author: Teymur Kheirkhabarov, Ecco, Florian Roth
date: 2019-10-26
modified: 2023-02-05
tags:
- attack.privilege-escalation
- attack.t1134.001
- attack.t1134.002
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
    ParentImage|endswith: '\services.exe'
  selection_technique_1:
        # Examples:
        #   Meterpreter  getsystem technique 1: cmd.exe /c echo 559891bb017 > \\.\pipe\5e120a
        #   CobaltStrike getsystem technique 1b (expanded env var): %COMSPEC% /c echo 559891bb017 > \\.\pipe\5e120a
        #   CobaltStrike getsystem technique 1: %COMSPEC% /c echo 559891bb017 > \\.\pipe\5e120a
    CommandLine|contains|all:
    - '/c'
    - 'echo'
    - '\pipe\'
    CommandLine|contains:
    - 'cmd'
    - '%COMSPEC%'
  selection_technique_2:
        # meterpreter getsystem technique 2: rundll32.exe C:\Users\test\AppData\Local\Temp\tmexsn.dll,a /p:tmexsn
    CommandLine|contains|all:
    - 'rundll32'
    - '.dll,a'
    - '/p:'
  filter_defender:
    CommandLine|contains: 'MpCmdRun'
  condition: selection_img and 1 of selection_technique_* and not 1 of filter_*
fields:
- ComputerName
- User
- CommandLine
falsepositives:
- Commandlines containing components like cmd accidentally
- Jobs and services started with cmd
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potential privilege escalation activities associated with the Meterpreter and Cobalt Strike frameworks by monitoring for specific command-line patterns executed by Windows services. The rule focuses on identifying processes where the parent image is `services.exe`, indicating that a service is invoking a command. It specifically looks for command-line arguments that include known commands (e.g., `cmd.exe`, `%COMSPEC%`) used in the execution of Meterpreter `getsystem` commands, which are commonly used by attackers to elevate privileges on compromised systems. 
  The detection mechanism leverages Windows process creation logs, particularly examining the command-line parameters for specific keywords such as `/c`, `echo`, and references to named pipes, as these are indicative of the technique employed by the attackers. This rule aligns with the MITRE ATT&CK techniques T1134.001 and T1134.002, which detail privilege escalation methods, thus emphasizing the critical need for vigilant monitoring in enterprise environments.
  ### Investigation Steps
  - **Review Process Creation Logs:** Use EDR tools to investigate the specific process creation logs for the Windows services that triggered the alert. Pay attention to the `CommandLine` and `ParentImage` fields for suspicious entries.
  - **Check User Context:** Validate the user context under which the suspicious commands were executed. Use Windows Security logs to identify whether the user has legitimate permissions that could justify the activity.
  - **Examine Named Pipes Usage:** Investigate connections to named pipes referenced in the command-line parameters. Use Sysmon logs to track any unusual activity associated with these pipes during the timeframe of the alert.
  - **Cross-Reference with Other Security Tools:** Analyze results in conjunction with other security tools like AV, NDR, or Proxy logs to identify any correlated alerts or suspicious behaviors stemming from the same host or user.
  ### Prioritization
  Given the high-level severity assigned to this alert, any detection of potential Meterpreter or Cobalt Strike activity warrants immediate attention and investigation as it may indicate an active compromise and attempts at privilege escalation within the enterprise environment.
  ### Blind Spots and Assumptions
  This rule may fail to trigger in cases where the attacker uses obfuscation techniques or modifies command strings to bypass detection, such as using alternate encoding or leveraging different command execution methods. Additionally, processes that are legitimately called through services may result in false positives, particularly when using typical scripting languages or commands involving `cmd.exe`. Natural behavior in Windows processes, such as system updates or application installations that utilize similar commands, might also inadvertently evade detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
