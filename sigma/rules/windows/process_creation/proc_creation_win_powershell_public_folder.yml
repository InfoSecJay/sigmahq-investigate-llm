title: Execution of Powershell Script in Public Folder
id: fb9d3ff7-7348-46ab-af8c-b55f5fbf39b4
status: test
description: This rule detects execution of PowerShell scripts located in the "C:\Users\Public"
  folder
references:
- https://www.mandiant.com/resources/evolution-of-fin7
author: Max Altgelt (Nextron Systems)
date: 2022-04-06
modified: 2022-07-14
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    CommandLine|contains:
    - '-f C:\Users\Public'
    - '-f "C:\Users\Public'
    - '-f %Public%'
    - '-fi C:\Users\Public'
    - '-fi "C:\Users\Public'
    - '-fi %Public%'
    - '-fil C:\Users\Public'
    - '-fil "C:\Users\Public'
    - '-fil %Public%'
    - '-file C:\Users\Public'
    - '-file "C:\Users\Public'
    - '-file %Public%'
  condition: selection
fields:
- CommandLine
falsepositives:
- Unlikely
level: high
notes: |
  n
  ### Technical Context
  This detection rule identifies potential malicious activity by monitoring the execution of PowerShell scripts located in the "C:\Users\Public" folder, which is a common location for attackers to deploy scripts that may be shared across users. The rule inspects process creation events specifically for PowerShell (both `powershell.exe` and `pwsh.exe`). By analyzing command line parameters, the rule looks for indicators that scripts are being executed from this public directory using various flags, such as `-f` and `-file`. This behavior falls under the MITRE ATT&CK tactic of Execution (T1059.001), which pertains to command and scripting interpreters. The utilization of public directories for execution can signify malicious intent, as it may bypass certain security controls by exploiting shared user spaces.
  ### Investigation Steps
  - **Review Process Creation Logs:** Use EDR tools to filter and examine logs for any instances of PowerShell execution that reference the "C:\Users\Public" directory. Pay attention to the command line arguments associated with each instance.
  - **Analyze Associated Files:** Verify the files located in "C:\Users\Public" that were accessed or executed in the detected events. Use file analysis tools to inspect the content and behavior of the scripts executed.
  - **Check Network Connections:** Investigate network traffic generated during the execution timeframe. Look for any unusual external connections or data exfiltration events correlated with the PowerShell activity.
  - **Audit User Accounts:** Assess the user accounts that executed the detected commands. Cross-reference the activity with user behavior analytics to identify any anomalous account activity or permissions.
  ### Prioritization
  The alert generated by this rule is classified as high severity due to the potential execution of malicious scripts from a public directory, which may indicate a compromise or an ongoing attack attempting to execute further payloads.
  ### Blind Spots and Assumptions
  This rule may not fire if the PowerShell execution command is obfuscated or if attackers use an alternative method to execute scripts, such as via C# or other scripting languages. Additionally, legitimate administrative tasks may trigger similar command patterns, hence the need for contextual analysis to reduce false positives. Furthermore, misconfigured log sources or lack of monitoring on the public folder may lead to incomplete visibility into these events.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
