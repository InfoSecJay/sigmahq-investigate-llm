title: MSHTA Suspicious Execution 01
id: cc7abbd0-762b-41e3-8a26-57ad50d2eea3
status: test
description: Detection for mshta.exe suspicious execution patterns sometimes involving
  file polyglotism
references:
- http://blog.sevagas.com/?Hacking-around-HTA-files
- https://0x00sec.org/t/clientside-exploitation-in-2018-how-pentesting-has-changed/7356
- https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/xml/xslt/xslt-stylesheet-scripting-using-msxsl-script
- https://medium.com/tsscyber/pentesting-and-hta-bypassing-powershell-constrained-language-mode-53a42856c997
- https://twitter.com/mattifestation/status/1326228491302563846
author: Diego Perez (@darkquassar), Markus Neis, Swisscom (Improve Rule)
date: 2019-02-22
modified: 2022-11-07
tags:
- attack.defense-evasion
- attack.t1140
- attack.t1218.005
- attack.execution
- attack.t1059.007
- cve.2020-1599
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith: '\mshta.exe'
    CommandLine|contains:
    - 'vbscript'
    - '.jpg'
    - '.png'
    - '.lnk'
            # - '.chm'  # could be prone to false positives
    - '.xls'
    - '.doc'
    - '.zip'
    - '.dll'
            # - '.exe'
  condition: selection
falsepositives:
- False positives depend on scripts and administrative tools used in the monitored
  environment
level: high
notes: |
  ### Technical Context
  The "MSHTA Suspicious Execution 01" detection rule is designed to identify potentially malicious behavior associated with the execution of `mshta.exe`, a legitimate Windows utility used for executing HTML Applications (HTAs). Attackers often exploit `mshta.exe` to run malicious scripts under the guise of legitimate HTA files, employing techniques such as file polyglotism, where multiple file types are combined to bypass security measures. This rule specifically looks for instances where `mshta.exe` is launched with suspicious command-line parameters, including common file extensions that could indicate the use of embedded scripts or malicious payloads (e.g., `.vbscript`, `.jpg`, `.xls`, `.zip`). The key telemetry data sources for this rule primarily include Windows process creation logs, which capture details about the execution of processes on the system and allow detection of abnormal command-line usage.
  This rule relates to several MITRE ATT&CK tactics and techniques, principally focusing on "Execution" (T1059.007: Scripting) and "Defense Evasion" (T1140: Deobfuscate/Decode Files or Information), highlighting the need for analysts to be vigilant about potentially malfeasant behavior masquerading as benign activity.
  ### Investigation Steps
  - **Verify the process:** Check the timestamp and parent process of the `mshta.exe` execution in the EDR to determine if it was spawned from a legitimate process or a suspicious one.
  - **Analyze command-line arguments:** Use the command line parameters captured in the process creation logs to assess whether they align with known benign use cases of `mshta.exe`, especially the unusual file extensions noted in the rule.
  - **Review network activity:** Analyze any associated network connections in the NDR logs that occurred around the same time as the suspicious `mshta.exe` execution to identify any exfiltration or command and control (C2) communications.
  - **Cross-check with threat intelligence:** Consult threat intelligence feeds or internal logs to identify any known indicators of compromise (IoCs) related to `mshta.exe` usage patterns, which may further clarify whether the alert is tied to an ongoing attack.
  ### Prioritization
  Given the escalated privileges and potential for persistence associated with `mshta.exe`, alerts triggered by this rule should be treated with high severity, as they could indicate an attempted or successful compromise of organizational systems.
  ### Blind spots and Assumptions
  The rule may not fire in environments where `mshta.exe` is legitimately used for administrative or operational purposes, leading to potential false positives. Additionally, certain scripting or administrative tools may also generate legitimate `mshta.exe` executions using the identified command-line patterns, which would need further contextual validation. Other limitations include users employing various evasion tactics to disguise `mshta.exe` activity, potentially modifying command lines or executing it in unexpected ways that could evade detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
