title: Suspicious Processes Spawned by Java.EXE
id: 0d34ed8b-1c12-4ff2-828c-16fc860b766d
related:
- id: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0
  type: similar
status: test
description: Detects suspicious processes spawned from a Java host process which could
  indicate a sign of exploitation (e.g. log4j)
references:
- https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/
author: Andreas Hunkeler (@Karneades), Florian Roth
date: 2021-12-17
modified: 2024-01-18
tags:
- attack.initial-access
- attack.persistence
- attack.privilege-escalation
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\java.exe'
    Image|endswith:
    - '\AppVLP.exe'
    - '\bitsadmin.exe'
    - '\certutil.exe'
    - '\cscript.exe'
    - '\curl.exe'
    - '\forfiles.exe'
    - '\hh.exe'
    - '\mftrace.exe'
    - '\mshta.exe'
    - '\net.exe'
    - '\net1.exe'
    - '\query.exe'
    - '\reg.exe'
    - '\regsvr32.exe'
    - '\rundll32.exe'
    - '\schtasks.exe'
    - '\scrcons.exe'
    - '\scriptrunner.exe'
    - '\sh.exe'
    - '\systeminfo.exe'
    - '\whoami.exe'
    - '\wmic.exe'                # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/
    - '\wscript.exe'
  condition: selection
falsepositives:
- Legitimate calls to system binaries
- Company specific internal usage
level: high
notes: |
  n
  ### Technical Context
  The "Suspicious Processes Spawned by Java.EXE" Sigma rule is designed to detect potentially malicious behavior stemming from Java applications running on Windows systems. This rule focuses on identifying instances where processes with suspicious characteristics are spawned from the 'java.exe' parent process. The rule specifically looks for various Windows executable files commonly associated with abuse, such as 'bitsadmin.exe', 'certutil.exe', and 'mshta.exe', among others. By monitoring the process creation logs, particularly the relationship between parent and child processes, the rule aims to capture signs of exploitation, such as those seen with vulnerabilities like log4j. This detection maps to the MITRE ATT&CK framework under tactics related to initial access, persistence, and privilege escalation.
  ### Investigation Steps
  - **Review Process Logs**: Utilize your SIEM to extract the process creation logs that correspond to 'java.exe' invoking other processes. Look for any anomalies in execution context or timing that stand out as unusual.
  - **Examine Parent-Child Relationships**: Leverage your EDR to investigate the parent-child relationships of processes spawned from 'java.exe'. Validate the legitimacy of the spawned processes and review their command-line parameters for any signs of malicious intent.
  - **Check for Known Indicators**: Utilize threat intelligence feeds within your network detection and response (NDR) systems to cross-reference detected processes against known malicious indicators related to the logged Java exploits.
  - **Assess Network Behavior**: Analyze outbound network connections initiated by these processes using your NGFW or proxy logs. Look for any suspicious communications, such as unusual DNS queries or connections to known bad IP addresses.
  ### Prioritization
  When this alert is triggered, its high severity indicates a significant potential risk for exploitation, as the spawning of suspicious processes from a Java host could suggest an active attempt to compromise additional system resources or data.
  ### Blind Spots and Assumptions
  This rule may not trigger in environments where Java processes are heavily utilized for legitimate operations. It also assumes that the processes being spawned are executed with sufficient privilege for detection, which may not always be the case. Additionally, legitimate internal applications might mimic the behavior of some flagged executables, creating false positives. Adversaries may use benign-looking processes or obfuscate their actions to evade detection, making it crucial to continually refine automated detections based on emerging threat patterns.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
