title: Potential Recon Activity Using DriverQuery.EXE
id: 9fc3072c-dc8f-4bf7-b231-18950000fadd
related:
- id: a20def93-0709-4eae-9bd2-31206e21e6b2
  type: similar
status: test
description: Detect usage of the "driverquery" utility to perform reconnaissance on
  installed drivers
references:
- https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/
- https://www.vmray.com/cyber-security-blog/analyzing-ursnif-behavior-malware-sandbox/
- https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-19
modified: 2023-09-29
tags:
- attack.discovery
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: 'driverquery.exe'
  - OriginalFileName: 'drvqry.exe'
  selection_parent:
  - ParentImage|endswith:
    - '\cscript.exe'
    - '\mshta.exe'
    - '\regsvr32.exe'
    - '\rundll32.exe'
    - '\wscript.exe'
  - ParentImage|contains:
    - '\AppData\Local\'
    - '\Users\Public\'
    - '\Windows\Temp\'
  condition: all of selection_*
falsepositives:
- Legitimate usage by some scripts might trigger this as well
level: high
notes: |
  ### Technical Context
  The detection rule titled **Potential Recon Activity Using DriverQuery.EXE** is designed to identify the use of the `driverquery` utility as a means of gathering information about installed drivers on a Windows system. This type of activity is often associated with reconnaissance, wherein an attacker may seek to understand the system's configuration for potential vulnerabilities. The rule focuses on process creation events specifically looking for instances of `driverquery.exe` or `drvqry.exe`, as well as abnormal parent processes such as `cscript.exe`, `mshta.exe`, `regsvr32.exe`, `rundll32.exe`, or `wscript.exe`, along with additional criteria based on file paths typically used by malicious actors, such as those in temporary or user-specific directories.
  The corresponding MITRE ATT&CK tactic for this detection is **Discovery**, specifically the technique **T1082: System Information Discovery**. By leveraging this rule, analysts can effectively surface instances where the `driverquery` utility is being employed in suspicious contexts, thereby aiding in identifying potential reconnaissance efforts that may precede more severe attacks.
  ### Investigation Steps
  - **Review Process Creation Logs**: Check for the process creation logs in your Windows Security Event Logs for instances of `driverquery.exe` or `drvqry.exe`, noting the parent processes associated with these commands.
  - **Analyze Parent Processes**: Investigate the identified parent processes like `cscript.exe`, `mshta.exe`, or `regsvr32.exe`. Understanding the context of these parent processes will help determine if the `driverquery` invocation is legitimate or part of a suspicious activity.
  - **Cross-reference with EDR**: Use your Endpoint Detection and Response (EDR) tools to correlate further activity around the identified process instances, checking for any anomalous network connections or file operations that might indicate malicious intent.
  - **Consult Additional Data Sources**: Look into your SIEM and cloud logs (if applicable) to search for additional indicators of compromise around the same time frame the rule triggered, such as unusual logins or configuration changes that align with reconnaissance activity.
  ### Prioritization
  Given the high severity level of this alert, it's essential to prioritize further investigation as reconnaissance activities are often precursors to more substantial threats such as data exfiltration or system compromise.
  ### Blind Spots and Assumptions
  This detection rule may not fire in cases where an attacker uses alternative or obfuscated methods to execute the `driverquery.exe` utility, such as renaming the executable or using non-standard paths. Additionally, legitimate scripts that utilize `driverquery` might trigger false positives, highlighting a need to focus on the context of the execution rather than just the command itself. It's crucial for detection engineers to recognize these limitations to avoid alert fatigue and ensure meaningful incident response activities.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
