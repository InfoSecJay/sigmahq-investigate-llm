title: Potential Persistence Attempt Via Existing Service Tampering
id: 38879043-7e1e-47a9-8d46-6bec88e201df
status: test
description: Detects the modification of an existing service in order to execute an
  arbitrary payload when the service is started or killed as a potential method for
  persistence.
references:
- https://pentestlab.blog/2020/01/22/persistence-modify-existing-service/
author: Sreeman
date: 2020-09-29
modified: 2023-02-04
tags:
- attack.persistence
- attack.t1543.003
- attack.t1574.011
logsource:
  category: process_creation
  product: windows
detection:
  selection_sc:
  - CommandLine|contains|all:
    - 'sc '
    - 'config '
    - 'binpath='
  - CommandLine|contains|all:
    - 'sc '
    - 'failure'
    - 'command='
  selection_reg_img:
  - CommandLine|contains|all:
    - 'reg '
    - 'add '
    - 'FailureCommand'
  - CommandLine|contains|all:
    - 'reg '
    - 'add '
    - 'ImagePath'
  selection_reg_ext:
    CommandLine|contains:
    - '.sh'
    - '.exe'
    - '.dll'
    - '.bin$'
    - '.bat'
    - '.cmd'
    - '.js'
    - '.msh$'
    - '.reg$'
    - '.scr'
    - '.ps'
    - '.vb'
    - '.jar'
    - '.pl'
  condition: selection_sc or all of selection_reg_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule detects attempts to tamper with existing Windows services, which can be a sign of potential persistence mechanisms employed by threat actors. The detection works by monitoring command lines submitted via process creation events, specifically looking for specific keywords related to the service controller (`sc`) and registry commands (`reg`) that indicate modifications to service configurations. For instance, an attacker may use the `sc config` command to change the path to an executable that should be executed upon service start or failure, thereby maintaining persistence on the target system. This behavior aligns with the MITRE ATT&CK tactics of **Persistence** and techniques such as **T1543.003: Create or Modify System Service** and **T1574.011: Compromise Existing Service**.
  The relevant technical data sources for this detection are process creation logs detailing command-line parameters, focusing on those containing keywords like `binpath=`, `failure`, `FailureCommand`, and various known script or executable extensions indicating a potential malicious payload. Monitoring these activities helps reveal unauthorized alterations that could facilitate persistent threat presence in the environment.
  ### Investigation Steps
  - **Check Process Creation Logs:** Examine the process creation logs to identify the command lines involving `sc config` and registry modifications, paying close attention to the associated parent processes to determine the legitimacy of the commands.
    
  - **Cross-Reference Service State:** Validate the state of the affected services using Windows Service Control Manager or PowerShell commands to understand their current configuration and whether they point to potentially malicious file paths.
  - **Analyze Registry Changes:** Utilize the registry logs to identify any recent changes under services keys, particularly those related to `ImagePath` and `FailureCommand`, to assess if any potentially harmful commands have been configured.
  - **Review Associated Event Logs:** Investigate any related events from Windows Event Logs, including Security, System, and Application logs that could provide context to the service alterations and any related anomalous behavior.
  ### Prioritization
  The alert is classified as medium severity because while not all service modifications indicate malicious intent, unauthorized changes can pose significant risks to system integrity and may enable persistent threats if exploited effectively. Prompt investigation is essential to mitigate potential security incidents.
  ### Blind Spots and Assumptions
  The rule may not trigger under conditions where a threat actor uses non-standard commands or obfuscation techniques that bypass typical command syntax. Additionally, legitimate administrative activities may lead to false positives if they coincide with service modifications. It's assumed that monitoring configurations are maintained and up-to-date, as lack of visibility into service changes due to insufficient logging configurations could hinder detection effectiveness. Finally, the environmental context matters; multi-user environments may have legitimate users modifying services for valid business reasons.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
