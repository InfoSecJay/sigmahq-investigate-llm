title: Windows Shell/Scripting Processes Spawning Suspicious Programs
id: 3a6586ad-127a-4d3b-a677-1e6eacdf8fde
status: test
description: Detects suspicious child processes of a Windows shell and scripting processes
  such as wscript, rundll32, powershell, mshta...etc.
references:
- https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html
author: Florian Roth (Nextron Systems), Tim Shelton
date: 2018-04-06
modified: 2023-05-23
tags:
- attack.execution
- attack.defense-evasion
- attack.t1059.005
- attack.t1059.001
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith:
    - '\mshta.exe'
    - '\powershell.exe'
    - '\pwsh.exe'
            # - '\cmd.exe'  # too many false positives
    - '\rundll32.exe'
    - '\cscript.exe'
    - '\wscript.exe'
    - '\wmiprvse.exe'
    - '\regsvr32.exe'
    Image|endswith:
    - '\schtasks.exe'
    - '\nslookup.exe'
    - '\certutil.exe'
    - '\bitsadmin.exe'
    - '\mshta.exe'
  filter_ccmcache:
    CurrentDirectory|contains: '\ccmcache\'
  filter_amazon:
    ParentCommandLine|contains:
            # FP - Amazon Workspaces
    - '\Program Files\Amazon\WorkSpacesConfig\Scripts\setup-scheduledtask.ps1'
    - '\Program Files\Amazon\WorkSpacesConfig\Scripts\set-selfhealing.ps1'
    - '\Program Files\Amazon\WorkSpacesConfig\Scripts\check-workspacehealth.ps1'
    - '\nessus_'         # Tenable/Nessus VA Scanner
  filter_nessus:
    CommandLine|contains: '\nessus_'     # Tenable/Nessus VA Scanner
  filter_sccm_install:
    ParentImage|endswith: '\mshta.exe'
    Image|endswith: '\mshta.exe'
    ParentCommandLine|contains|all:
    - 'C:\MEM_Configmgr_'
    - '\splash.hta'
    - '{1E460BD7-F1C3-4B2E-88BF-4E770A288AF5}'
    CommandLine|contains|all:
    - 'C:\MEM_Configmgr_'
    - '\SMSSETUP\BIN\'
    - '\autorun.hta'
    - '{1E460BD7-F1C3-4B2E-88BF-4E770A288AF5}'
  condition: selection and not 1 of filter_*
fields:
- CommandLine
- ParentCommandLine
- CurrentDirectory
- Image
- ParentImage
falsepositives:
- Administrative scripts
- Microsoft SCCM
level: high
notes: |
  n
  ### Technical Context
  This detection rule identifies suspicious child processes spawned by Windows shell and scripting utilities such as `wscript`, `powershell`, and `mshta`. By monitoring process creation events, the rule looks for specific parent-child process relationships where potentially malicious executables (e.g., `schtasks.exe`, `certutil.exe`, `bitsadmin.exe`) are executed. The rule employs several filters to minimize false positives associated with legitimate administrative tasks or installations, such as those performed by Microsoft System Center Configuration Manager (SCCM) and Amazon WorkSpaces setup scripts. Alert generation occurs when the rule detects child processes initiated from these scripting engines that are not listed in the exclusions, signaling potential enumeration or execution of unauthorized commands, which aligns with MITRE ATT&CK techniques T1059.001 (Command and Scripting Interpreter: Windows Command Shell) and T1059.005 (Command and Scripting Interpreter: Windows PowerShell).
  ### Investigation Steps
  - **Review Process Creation Logs:** Leverage your EDR solution to investigate the process creation logs for instances of suspicious parent-child relationships involving `mshta.exe`, `powershell.exe`, and their associated command lines.
  - **Analyze Command-Line Arguments:** Examine the command-line parameters associated with the spawned processes, focusing on any encoded or obfuscated scripts that may indicate malicious activity.
  - **Check Current Directory and Context:** Use the Windows Event Logs to check the current directory of suspicious processes. Pay particular attention to any paths containing `ccmcache`, which may suggest that the process was legitimate.
  - **Cross-Reference with Threat Intelligence:** Utilize the SIEM to cross-reference detected processes with known malware signatures or threat intelligence reporting to determine if any match known malicious indicators.
  ### Prioritization
  The alert carries a high severity level in an enterprise environment due to the significant risks associated with commands executed via scripting processes, which are often exploited by attackers to execute arbitrary or harmful code.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where the malicious activity uses processes not covered by the parent image selection criteria, such as other scripting engines. Additionally, it assumes that administrative scripts commonly executed in the environment are being properly whitelisted. It may fail to detect complex attack techniques that manipulate legitimate processes in ways that are difficult to discern as malicious behavior, especially if the command line does not exhibit unusual characteristics.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
