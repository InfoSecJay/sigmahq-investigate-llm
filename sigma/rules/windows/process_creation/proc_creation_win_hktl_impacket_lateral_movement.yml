title: HackTool - Potential Impacket Lateral Movement Activity
id: 10c14723-61c7-4c75-92ca-9af245723ad2
related:
- id: e31f89f7-36fb-4697-8ab6-48823708353b
  type: obsolete
status: stable
description: Detects wmiexec/dcomexec/atexec/smbexec from Impacket framework
references:
- https://github.com/SecureAuthCorp/impacket/blob/8b1a99f7c715702eafe3f24851817bb64721b156/examples/wmiexec.py
- https://github.com/SecureAuthCorp/impacket/blob/8b1a99f7c715702eafe3f24851817bb64721b156/examples/atexec.py
- https://github.com/SecureAuthCorp/impacket/blob/8b1a99f7c715702eafe3f24851817bb64721b156/examples/smbexec.py
- https://github.com/SecureAuthCorp/impacket/blob/8b1a99f7c715702eafe3f24851817bb64721b156/examples/dcomexec.py
- https://www.elastic.co/guide/en/security/current/suspicious-cmd-execution-via-wmi.html
author: Ecco, oscd.community, Jonhnathan Ribeiro, Tim Rauch
date: 2019-09-03
modified: 2023-02-21
tags:
- attack.execution
- attack.t1047
- attack.lateral-movement
- attack.t1021.003
logsource:
  category: process_creation
  product: windows
detection:
  selection_other:
        # *** wmiexec.py
        #    parent is wmiprvse.exe
        #    examples:
        #       cmd.exe /Q /c whoami 1> \\127.0.0.1\ADMIN$\__1567439113.54 2>&1
        #       cmd.exe /Q /c cd  1> \\127.0.0.1\ADMIN$\__1567439113.54 2>&1
        # *** dcomexec.py -object MMC20
        #   parent is mmc.exe
        #   example:
        #       "C:\Windows\System32\cmd.exe" /Q /c cd  1> \\127.0.0.1\ADMIN$\__1567442499.05 2>&1
        # *** dcomexec.py -object ShellBrowserWindow
        #  runs %SystemRoot%\System32\rundll32.exe shell32.dll,SHCreateLocalServerRunDll {c08afd90-f2a1-11d1-8455-00a0c91f3880} but parent command is explorer.exe
        #  example:
        #   "C:\Windows\System32\cmd.exe" /Q /c cd \ 1> \\127.0.0.1\ADMIN$\__1567520103.71 2>&1
        # *** smbexec.py
        #   parent is services.exe
        #   example:
        #       C:\Windows\system32\cmd.exe /Q /c echo tasklist ^> \\127.0.0.1\C$\__output 2^>^&1 > C:\Windows\TEMP\execute.bat & C:\Windows\system32\cmd.exe /Q /c C:\Windows\TEMP\execute.bat & del C:\Windows\TEMP\execute.bat
    ParentImage|endswith:
    - '\wmiprvse.exe'                # wmiexec
    - '\mmc.exe'                # dcomexec MMC
    - '\explorer.exe'                # dcomexec ShellBrowserWindow
    - '\services.exe'                # smbexec
    CommandLine|contains|all:
    - 'cmd.exe'
    - '/Q'
    - '/c'
    - '\\\\127.0.0.1\\'
    - '&1'
  selection_atexec:
    ParentCommandLine|contains:
    - 'svchost.exe -k netsvcs'               # atexec on win10 (parent is "C:\Windows\system32\svchost.exe -k netsvcs")
    - 'taskeng.exe'               # atexec on win7 (parent is "taskeng.exe {AFA79333-694C-4BEE-910E-E57D9A3518F6} S-1-5-18:NT AUTHORITY\System:Service:")
            # cmd.exe /C tasklist /m > C:\Windows\Temp\bAJrYQtL.tmp 2>&1
    CommandLine|contains|all:
    - 'cmd.exe'
    - '/C'
    - 'Windows\Temp\'
    - '&1'
  condition: 1 of selection_*
fields:
- CommandLine
- ParentCommandLine
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule is designed to identify potential lateral movement activities using the Impacket framework, specifically focusing on commands associated with remote execution methods such as `wmiexec`, `dcomexec`, `smbexec`, and `atexec`. These methods enable attackers to run commands on remote Windows systems, allowing them to bypass standard authentication measures and execute malicious scripts or commands directly on a target machine. The rule analyzes Windows process creation logs, particularly looking for processes initiated by `cmd.exe` that are executed under specific parent processes like `wmiprvse.exe`, `mmc.exe`, `explorer.exe`, and `services.exe`. By examining the command-line parameters for evidence of remote file interactions (such as output redirection to a UNC path), the rule aims to catch abuse of legitimate administration tools in a potentially malicious context.
  This rule is linked to the MITRE ATT&CK framework under the tactics of **Execution** (TA0002) and specifically targets techniques such as *Remote Services: SMB/Windows Admin Shares* (T1021.003) and *Command and Scripting Interpreter* (T1059). Detecting these activities is crucial for early intervention in cases of unauthorized lateral movement within enterprise environments.
  ### Investigation Steps
  - **Review Process Creation Logs**: Use EDR tools to investigate the process creation logs around the time the alert was triggered, focusing on `cmd.exe` invocations and their parent processes such as `wmiprvse.exe` or `services.exe`.
  - **Analyze Network Connections**: Check network logs (from NDR or firewall tools) for unusual connections or SMB traffic to and from the alerted system to determine if lateral movement occurred.
  - **Inspect File Shares**: Examine the file share activity on the target machine to identify any unauthorized or suspicious file transfers to UNC paths, particularly those involving administrative shares.
  - **Conduct Endpoint Analysis**: Utilize EDR to execute a thorough endpoint analysis on the impacted machines, looking for evidence of subsequent malicious payloads or indicators of compromised environments.
  ### Prioritization
  The severity of this alert is classified as **high**, reflecting the potential risk associated with lateral movement activities which could compromise critical systems and affect overall network security.
  ### Blind Spots and Assumptions
  While this rule aims to capture malicious usage of the Impacket framework, there are inherent blind spots. If an adversary uses alternative command-line tools or methods that do not match the specified patterns, those activities may evade detection. Additionally, this rule assumes that Sysmon is properly configured to capture detailed process creation events, which may not be the case in all environments. Furthermore, legitimate administrative actions may occasionally generate similar alerts, contributing to false positives. Understanding these limitations is essential for enhancing detection capabilities and refining response strategies.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
