title: Forfiles Command Execution
id: 9aa5106d-bce3-4b13-86df-3a20f1d5cf0b
related:
- id: a85cf4e3-56ee-4e79-adeb-789f8fb209a8
  type: obsolete
- id: fa47597e-90e9-41cd-ab72-c3b74cfb0d02
  type: obsolete
status: test
description: |
  Detects the execution of "forfiles" with the "/c" flag.
  While this is an expected behavior of the tool, it can be abused in order to proxy execution through it with any binary.
  Can be used to bypass application whitelisting.
references:
- https://lolbas-project.github.io/lolbas/Binaries/Forfiles/
- https://pentestlab.blog/2020/07/06/indirect-command-execution/
author: Tim Rauch, Elastic, E.M. Anhaus (originally from Atomic Blue Detections, Endgame),
  oscd.community
date: 2022-06-14
modified: 2024-03-05
tags:
- attack.execution
- attack.t1059
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\forfiles.exe'
  - OriginalFileName: 'forfiles.exe'
  selection_cli:
    CommandLine|contains|windash: ' -c '
  condition: all of selection_*
falsepositives:
- Legitimate use via a batch script or by an administrator.
level: medium
notes: |
  n
  ### Technical Context
  The "Forfiles Command Execution" detection rule is designed to identify the use of the Forfiles command-line utility in Windows, particularly when it is executed with the `/c` flag. Forfiles is typically used to run commands on a set of files and can be leveraged for legitimate administrative tasks. However, attackers may misuse this utility to execute arbitrary commands indirectly, allowing them to bypass traditional application whitelisting mechanisms. In this context, the detection relies on Windows Process Creation logs, checking for the presence of `forfiles.exe` in combination with specific command-line parameters indicating executable commands. This rule aligns with the MITRE ATT&CK technique T1059 (Command and Scripting Interpreter), highlighting its relevance to execution-based attacks where adversaries attempt to execute malicious scripts or commands without raising immediate suspicion.
  ### Investigation Steps
  - **Review Process Creation Logs:** Examine the details surrounding the process creation event for `forfiles.exe`, focusing on the command-line arguments to determine the nature of the execution.
  - **Correlate with EDR Events:** Utilize your endpoint detection and response (EDR) solution to analyze any suspicious activity or behavior related to the detected command execution, such as subsequent processes spawned.
  - **Check for Whitelisted Applications:** Investigate if the execution of Forfiles was legitimate, such as being initiated by an administrator through a batch script, to rule out false positives.
  - **Audit Related Network Activity:** Evaluate network connections made by the host executing Forfiles to determine if there is any outbound communication to potentially malicious servers.
  ### Prioritization
  This alert is prioritized as medium severity due to the potential misuse of the Forfiles command, which could indicate an attempt by an adversary to execute unauthorized commands while evading detection mechanisms.
  ### Blind Spots and Assumptions
  The rule may not fire in situations where Forfiles is legitimately executed by authorized personnel in a controlled manner, such as in administrative scripts. Additionally, if an attacker renames the executable or uses alternative command execution methods not captured by this rule, detection could be bypassed. It's essential to consider variations in command-line syntax that could evade detection, as well as any custom security configurations that might not log necessary events.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
