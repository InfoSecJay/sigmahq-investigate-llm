title: Python Spawning Pretty TTY on Windows
id: 480e7e51-e797-47e3-8d72-ebfce65b6d8d
related:
- id: 899133d5-4d7c-4a7f-94ee-27355c879d90
  type: derived
status: test
description: Detects python spawning a pretty tty
references:
- https://www.volexity.com/blog/2022/06/02/zero-day-exploitation-of-atlassian-confluence/
author: Nextron Systems
date: 2022-06-03
tags:
- attack.execution
- attack.t1059
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
    Image|endswith:
    - 'python.exe'         # no \ bc of e.g. ipython.exe
    - 'python3.exe'
    - 'python2.exe'
  selection_cli_1:
    CommandLine|contains|all:
    - 'import pty'
    - '.spawn('
  selection_cli_2:
    CommandLine|contains: 'from pty import spawn'
  condition: selection_img and 1 of selection_cli_*
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The Sigma rule "Python Spawning Pretty TTY on Windows" is designed to detect instances where a Python interpreter is invoked to create a pseudo-terminal (TTY) in a Windows environment. Specifically, it looks for two primary sets of events within the process creation logs: the execution of Python executables (python.exe, python3.exe, python2.exe), and specific command-line arguments that signal the use of the `pty` module for spawning a TTY session. The presence of command-line strings like `import pty` and `.spawn(` indicates that the process is attempting to establish a controlled command environment, which could be indicative of an attack scenario (e.g., post-exploitation
  - or lateral movement-related activity). This rule aligns with the MITRE ATT&CK framework, specifically addressing the `Execution` tactic (T1059) related to scripting languages.
  ### Investigation Steps
  - **Check EDR Process Logs:** Review the EDR logs for the specific instances of `python.exe` or related Python executables being launched. Pay attention to the context of their execution within the environment.
  - **Examine Command Line Arguments:** Investigate the command-line parameters associated with the identified processes. Look for evidence of the `pty` module and any unusual or unexpected parameters that could indicate malicious intent.
  - **Correlate with Network Activity:** Use network detection tools (NDR) to check for outgoing connections from the identified Python processes. Analyze if there are any suspicious connections that coincide with the execution of the Python scripts.
  - **Review User Context and Access:** Determine the user account under which the Python process was executed. Assess whether this account had the required privileges to execute such commands and if unusual behavior can be attributed to it.
  ### Prioritization
  This alert is prioritized as high severity due to the potential for malicious exploitation of Python scripts to create a secure channel for command and control, thereby allowing adversaries to maintain persistence and execute further attacks on the environment.
  ### Blind Spots and Assumptions
  There are several blind spots regarding this rule. First, if an organization mainly uses non-standard Python executions or commands that do not utilize the pty module, this rule may fail to trigger. Secondly, the rule assumes that the relevant Python scripts will be executed in environments where logging is thorough; in lean logging practices, important context about command execution may be missed. Lastly, skilled adversaries may obfuscate or encrypt command-line arguments, preventing the detection of such activities through this rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
