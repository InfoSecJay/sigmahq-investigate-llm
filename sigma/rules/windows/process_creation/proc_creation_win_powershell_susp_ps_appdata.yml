title: PowerShell Script Run in AppData
id: ac175779-025a-4f12-98b0-acdaeb77ea85
status: test
description: Detects a suspicious command line execution that invokes PowerShell with
  reference to an AppData folder
references:
- https://twitter.com/JohnLaTwC/status/1082851155481288706
- https://app.any.run/tasks/f87f1c4e-47e2-4c46-9cf4-31454c06ce03
author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community
date: 2019-01-09
modified: 2022-07-14
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection1:
    CommandLine|contains:
    - 'powershell.exe'
    - '\powershell'
    - '\pwsh'
    - 'pwsh.exe'
  selection2:
    CommandLine|contains|all:
    - '/c '
    - '\AppData\'
    CommandLine|contains:
    - 'Local\'
    - 'Roaming\'
  condition: all of selection*
falsepositives:
- Administrative scripts
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potentially malicious activity executed via PowerShell, specifically focusing on command-line executions that leverage the AppData folder. Attackers often utilize PowerShell for malicious activities due to its powerful scripting capabilities and integration with Windows operating systems. The rule looks for command-line arguments that include 'powershell.exe' or its variants, along with the presence of specific path strings that indicate execution within the AppData folder (i.e., `Local` and `Roaming`). The detection relies primarily on application logs generated by Windows Process Creation events, enabling the identification of any instances where PowerShell is invoked from potentially suspicious directories. This behavior can be associated with the MITRE ATT&CK framework under the tactics of Execution, specifically technique T1059.001 (Command and Scripting Interpreter: PowerShell).
  ### Investigation Steps
  - **Identify the Process:** Use EDR tools to locate the process associated with the alert, paying particular attention to its parent processes and the user context under which it executed.
  - **Examine Command-Line Parameters:** Review the command-line arguments in the process creation logs to verify the specific PowerShell scripts executed and any flags used that might indicate malicious intent.
  - **Check for Malicious Indicators:** Search for known malicious scripts or payloads referenced in the command line or their URLs within any associated logs (e.g., web proxy logs or DNS queries).
  - **Review Related Events:** Investigate the Environmental Impact by examining other Sysmon events, such as network connections or file creation events, to understand the broader context of the detected behavior.
  ### Prioritization
  The alert carries a medium severity level due to the potential of PowerShell being exploited for malicious purposes, especially in conjunction with the AppData folder, which is often used to hide the scripts from users and simple security checks.
  ### Blind Spots and Assumptions
  This rule may not trigger if PowerShell is executed from a different directory or if administrative scripts are valid and used legitimately within the enterprise. Additionally, it makes the assumption that the environment is effectively logging such command-line activities through the Windows Process Creation logs. Variations in PowerShell usage or custom configurations that avoid the common indicators can also lead to missed detections.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
