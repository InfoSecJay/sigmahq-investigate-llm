title: Potential Binary Proxy Execution Via Cdb.EXE
id: b5c7395f-e501-4a08-94d4-57fe7a9da9d2
status: test
description: Detects usage of "cdb.exe" to launch arbitrary processes or commands
  from a debugger script file
references:
- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/
- https://web.archive.org/web/20170715043507/http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html
- https://twitter.com/nas_bench/status/1534957360032120833
author: Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)
date: 2019-10-26
modified: 2024-04-22
tags:
- attack.execution
- attack.t1106
- attack.defense-evasion
- attack.t1218
- attack.t1127
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\cdb.exe'
  - OriginalFileName: 'CDB.Exe'
  selection_cli:
    CommandLine|contains:
    - ' -c '         # Using a debugger script
    - ' -cf '
  condition: all of selection*
falsepositives:
- Legitimate use of debugging tools
level: medium
notes: |
  ### Technical Context
  The detection rule titled "Potential Binary Proxy Execution Via Cdb.EXE" is designed to identify suspicious instances of `cdb.exe`, a debugger utility included in Windows, being used to execute arbitrary commands or processes from a debugger script file. This behavior is often indicative of an attacker attempting to leverage debugging tools to evade standard security mechanisms and execute malicious code covertly. The rule specifically monitors process creation logs for any instances where `cdb.exe` is invoked, particularly focusing on command-line arguments that include script execution flags such as `-c` or `-cf`. This approach allows for the detection of potentially dangerous actions hiding behind legitimate debugging operations, utilizing data from sources like process creation events and command-line parameters.
  ### Investigation Steps
  1. Review the process creation logs for instances of `cdb.exe` to confirm its execution and capture associated command-line parameters for further analysis.
  2. Utilize EDR tools to examine the execution context of `cdb.exe`, checking for any parent processes that may indicate a legitimate debugging session or a suspicious invocation.
  3. Query network logs to see if `cdb.exe` initiated any outbound connections, which could suggest that the malicious payload was attempting to communicate with a command and control server. 
  4. Investigate related user activity and timings around the execution of `cdb.exe` to correlate with other potentially malicious behaviors or anomalies in the environment.
