title: HackTool - Hashcat Password Cracker Execution
id: 39b31e81-5f5f-4898-9c0e-2160cfc0f9bf
status: test
description: Execute Hashcat.exe with provided SAM file from registry of Windows and
  Password list to crack against
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1110.002/T1110.002.md#atomic-test-1---password-cracking-with-hashcat
- https://hashcat.net/wiki/doku.php?id=hashcat
author: frack113
date: 2021-12-27
modified: 2023-02-04
tags:
- attack.credential-access
- attack.t1110.002
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
    Image|endswith: '\hashcat.exe'
  selection_cli:
    CommandLine|contains|all:
    - '-a '
    - '-m 1000 '
    - '-r '
  condition: 1 of selection_*
falsepositives:
- Tools that use similar command line flags and values
level: high
notes: |
  ### Technical Context
  The "HackTool 
  - Hashcat Password Cracker Execution" Sigma rule is designed to detect the execution of Hashcat, a well-known password cracking tool. This rule monitors Windows process creation events to identify instances where Hashcat is invoked with specific command-line parameters indicative of password cracking activities. The rule specifically looks for the presence of the executable `hashcat.exe` in process creation logs and searches for command-line arguments that suggest the usage of a password list and the target SAM file. By focusing on common parameters like `-a`, `-m 1000`, and `-r`, the rule can effectively highlight malicious intent to access encrypted passwords, a technique associated with the MITRE ATT&CK tactic: Credential Access (T1110.002).
  To ensure accurate detection, the rule employs data from Windows Security Event Logs specifically related to process creation. This is essential because unauthorized use of Hashcat could indicate a potential breach, with attackers attempting to crack user passwords for later exploitation. Understanding this technical context helps responders swiftly identify the nature of the threat and the potential impact on the organization's security posture.
  ### Investigation Steps
  - **Review Process Creation Logs:** Use the EDR tool to review the process creation logs for instances of `hashcat.exe`. Pay attention to the associated user account and any anomalies in execution context.
  - **Examine Command-Line Arguments:** Check the command-line arguments used when Hashcat was executed. Look for suspicious parameters such as password lists or SAM files that may indicate malicious intent.
  - **Query Additional Logs:** Investigate Windows Security and Sysmon logs for related events, such as registry accesses that may indicate how the SAM file was obtained and any network connections made during execution.
  - **Assess User Accounts:** Identify user accounts that executed Hashcat and assess their permissions and potential for compromised access. This will help gauge the scope of possible unauthorized actions.
  ### Prioritization
  This alert is categorized as high severity due to the potential implications of credential theft and unauthorized access, which could lead to further compromise within the organization's systems.
  ### Blind Spots and Assumptions
  It's important to recognize that this rule may not fire if the adversary obfuscates the command line or uses a different execution method for Hashcat. Additionally, legitimate software with similar command-line flags could produce false positives. There is also an assumption that logging for process creation is adequately enabled and sufficient for detection; environments with logging misconfigurations may not capture these events.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and relevancy, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
