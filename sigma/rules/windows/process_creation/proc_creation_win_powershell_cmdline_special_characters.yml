title: Potential PowerShell Command Line Obfuscation
id: d7bcd677-645d-4691-a8d4-7a5602b780d1
status: test
description: Detects the PowerShell command lines with special characters
references:
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=64
author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton
  (fp)
date: 2020-10-15
modified: 2024-04-15
tags:
- attack.execution
- attack.defense-evasion
- attack.t1027
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
  selection_re:
        # TODO: Optimize for PySIGMA
  - CommandLine|re: '\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+'
  - CommandLine|re: '\{.*\{.*\{.*\{.*\{.*\{.*\{.*\{.*\{.*\{'
  - CommandLine|re: '\^.*\^.*\^.*\^.*\^'
  - CommandLine|re: '`.*`.*`.*`.*`'
  filter_optional_amazonSSM:
    ParentImage: C:\Program Files\Amazon\SSM\ssm-document-worker.exe
  filter_optional_defender_atp:
    CommandLine|contains:
    - 'new EventSource("Microsoft.Windows.Sense.Client.Management"'
    - 'public static extern bool InstallELAMCertificateInfo(SafeFileHandle handle);'
  condition: all of selection_* and not 1 of filter_optional_*
falsepositives:
- Amazon SSM Document Worker
- Windows Defender ATP
level: high
notes: |
  ### Technical Context
  The Sigma rule titled **Potential PowerShell Command Line Obfuscation** is designed to detect potentially malicious usage of PowerShell and its command-line parameters that employ obfuscation techniques. When adversaries attempt to execute PowerShell commands with special characters or patterns, they often do so to evade detection systems and create confusion in analysis. This rule monitors for instances where PowerShell commands, invoked either through `powershell.exe` or `pwsh.exe`, include multiple special characters such as plus signs (`+`), curly braces (`{}`), caret symbols (`^`), and backticks (`` ` ``). 
  The detection leverages **process creation** logs and focuses on command-line arguments of newly created processes which are running PowerShell. By analyzing the `CommandLine` property for signs of obfuscation, the rule aligns with the MITRE ATT&CK techniques for **Execution** (T1059.001: PowerShell) and **Defense Evasion** (T1027). The rule takes into account specific patterns indicative of obfuscation while excluding legitimate cases, such as those from Amazon SSM Document Worker and Windows Defender ATP.
  ### Investigation Steps
  - **Verify Alert Context:** Review the alert context in your SIEM for details about the command-line execution, including the user account and timestamp associated with the PowerShell invocation.
  - **Correlate with EDR Data:** Use EDR tools to trace the process lineage starting from the detected PowerShell instance, examining parent processes and any associated network activity that may indicate malicious behavior.
  - **Examine Related Logs:** Look into the Windows Event Logs, especially the Security and Sysmon logs, to gather more information on the activity prior to and after the alert, focusing on unusual logins or file access patterns.
  - **Analyze Command-Line Arguments:** Analyze the exact command line that triggered the alert using the data collected to assess the potential impact and intention behind the executed PowerShell commands.
  ### Prioritization
  This alert is categorized as **high severity** due to the potential for obfuscated PowerShell commands to indicate deliberate attempts at evading detection and executing malicious tasks within the enterprise environment.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where obfuscation techniques do not utilize the specific characters being monitored or if PowerShell is invoked in a more subtle manner without high-frequency patterns of these characters. Additionally, legitimate administrative tasks performed by trusted applications, like Amazon SSM, may trigger false positives. It is assumed that the presence of these characters directly correlates with malicious intent, which may not always be the case.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
