title: Uncommon Child Process Of Appvlp.EXE
id: 9c7e131a-0f2c-4ae0-9d43-b04f4e266d43
status: test
description: |
  Detects uncommon child processes of Appvlp.EXE
  Appvlp or the Application Virtualization Utility is included with Microsoft Office. Attackers are able to abuse "AppVLP" to execute shell commands.
  Normally, this binary is used for Application Virtualization, but it can also be abused to circumvent the ASR file path rule folder
  or to mark a file as a system file.
references:
- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Appvlp/
author: Sreeman
date: 2020-03-13
modified: 2023-11-09
tags:
- attack.t1218
- attack.defense-evasion
- attack.execution
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\appvlp.exe'
    # Note: Filters based on data from EchoTrail: https://www.echotrail.io/insights/search/appvlp.exe/
  filter_main_generic:
    Image|endswith:
    - ':\Windows\SysWOW64\rundll32.exe'
    - ':\Windows\System32\rundll32.exe'
  filter_optional_office_msoasb:
    Image|contains: ':\Program Files\Microsoft Office'
    Image|endswith: '\msoasb.exe'
  filter_optional_office_skype:
    Image|contains|all:
    - ':\Program Files\Microsoft Office'
    - '\SkypeSrv\'
    Image|endswith: '\SKYPESERVER.EXE'
  filter_optional_office_msouc:
    Image|contains: ':\Program Files\Microsoft Office'
    Image|endswith: '\MSOUC.EXE'
  condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Uncommon Child Process Of Appvlp.EXE" is designed to detect suspicious child processes that are spawned by the `Appvlp.EXE` executable, an essential component of Microsoft Office that is involved in Application Virtualization. While normally used to facilitate the operation of Office applications, malicious actors can exploit this process to execute unauthorized commands, often leveraging it to bypass security controls like Application Control or to establish persistence. The rule specifically monitors for child processes created under `Appvlp.EXE` that are not among the common expected child processes, like `rundll32.exe`, `msoasb.exe`, `SKYPESERVER.EXE`, or `MSOUC.EXE`. The key telemetry source for this detection is the Windows Process Creation logs, which record details such as the parent and child processes and their corresponding images. This detection maps to the MITRE ATT&CK tactics of *Execution* (T1218) and *Defense Evasion*.
  ### Investigation Steps
  - **Check EDR Alerts:** Review EDR alerts for any instances of `Appvlp.EXE` spawning unexpected child processes. Pay particular attention to processes that invoke system binaries or associate with unusual activities.
  - **Analyze Process Behavior:** Investigate the properties of the detected child processes using tools like Sysinternals Process Explorer or the built-in Task Manager to evaluate their legitimacy and behavior.
  - **Review Event Logs:** Examine Windows Event Logs for any related logs associated with `Appvlp.EXE`, particularly focusing on process creation events and any anomalous command-line arguments.
  - **Investigate Network Activity:** Check network logs in the EDR and firewall (NGFW) for unusual outbound connections originating from the detected child processes, which may indicate additional malicious behavior.
  ### Prioritization
  The severity level for this alert is categorized as medium due to the potential for malicious credential exposure and lateral movement within the environment, which can arise from the misuse of legitimate processes like `Appvlp.EXE`. While not all detections are indicative of compromise, they warrant prompt investigation to rule out threats.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where attackers utilize heavily obfuscated or custom child processes not covered by the filtering criteria. Additionally, if the environment has legitimate applications that deviate from the expected child process behaviors, false negatives may occur. It is also assumed that `Appvlp.EXE` is running in contexts where it can spawn child processes, so any changes to its execution context (e.g., service restrictions or group policies) might prevent detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
