title: Invoke-Obfuscation Via Use MSHTA
id: ac20ae82-8758-4f38-958e-b44a3140ca88
status: test
description: Detects Obfuscated Powershell via use MSHTA in Scripts
references:
- https://github.com/SigmaHQ/sigma/issues/1009       # (Task31)
author: Nikita Nazarov, oscd.community
date: 2020-10-08
modified: 2022-03-08
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains|all:
    - 'set'
    - '&&'
    - 'mshta'
    - 'vbscript:createobject'
    - '.run'
    - '(window.close)'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect obfuscated PowerShell scripts that use the Microsoft HTML Application Host (MSHTA) to execute commands. Specifically, the rule looks for command lines that contain combinations of specific keywords indicative of obfuscation techniques, such as "set", "mshta", and "vbscript:createobject". When executed, MSHTA can run scripts written in either VBScript or JScript from HTML files, often making it a target for malicious actors seeking to bypass standard security measures. The primary data source for this detection is process creation logs, which provide visibility into command-line activities associated with process execution. This detection aligns with the MITRE ATT&CK techniques T1027 (Obfuscated Files or Information) and T1059.001 (PowerShell).
  ### Investigation Steps
  - **Check Process Creation Logs:** Review the process creation logs in EDR for the identified command line patterns related to MSHTA and PowerShell to confirm execution. Pay close attention to the parent-child relationships of processes.
  - **Analyze Network Connections:** Use network traffic analysis tools to investigate any suspicious external connections made by the MSHTA process, identifying potential command and control (C2) communications.
  - **Review Security Logs:** Look at Windows Security logs to find any unusual account usage or privilege escalation that may coincide with the execution of the suspicious PowerShell command.
  - **Examine Historical Data:** Cross-reference other telemetry, such as Sysmon logs for process execution or file creation related to the detected activity, to build a timeline and context for the event.
  ### Prioritization
  Given the high severity level of this alert, it indicates that the detection of obfuscated PowerShell invocations via MSHTA poses a significant risk; such techniques are frequently employed by adversaries to execute malicious payloads while evading defensive mechanisms. Prompt investigation is crucial to understanding the scope and potential impact.
  ### Blind Spots and Assumptions
  The rule may not fire if PowerShell scripts are executed without the targeted keywords or if obfuscation techniques differ significantly. Additionally, legitimate use cases for MSHTA in enterprise environments can lead to false positives. It is assumed that all process creation logs are being accurately monitored, but there could be gaps if logging is not configured properly. Adversaries might also alter command-line arguments or use alternative methods to execute similar scripts to evade detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and relevance, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
