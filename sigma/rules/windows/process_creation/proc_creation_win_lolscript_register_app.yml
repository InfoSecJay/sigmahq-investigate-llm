title: Potential Register_App.Vbs LOLScript Abuse
id: 28c8f68b-098d-45af-8d43-8089f3e35403
status: test
description: Detects potential abuse of the "register_app.vbs" script that is part
  of the Windows SDK. The script offers the capability to register new VSS/VDS Provider
  as a COM+ application. Attackers can use this to install malicious DLLs for persistence
  and execution.
references:
- https://twitter.com/sblmsrsn/status/1456613494783160325?s=20
- https://github.com/microsoft/Windows-classic-samples/blob/7cbd99ac1d2b4a0beffbaba29ea63d024ceff700/Samples/Win7Samples/winbase/vss/vsssampleprovider/register_app.vbs
author: Austin Songer @austinsonger
date: 2021-11-05
modified: 2022-07-07
tags:
- attack.defense-evasion
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith:
    - '\cscript.exe'
    - '\wscript.exe'
  - OriginalFileName:
    - 'cscript.exe'
    - 'wscript.exe'
  selection_cli:
    CommandLine|contains: '.vbs -register '     # register_app.vbs
  condition: all of selection*
falsepositives:
- Other VB scripts that leverage the same starting command line flags
level: medium
notes: |
  ### Technical Context
  This detection rule aims to identify potential abuse of the `register_app.vbs` script that is included in the Windows Software Development Kit (SDK). The `register_app.vbs` script can be misused by adversaries to register malicious components as COM+ applications, thereby enabling persistence through the installation of malicious DLLs. The rule monitors the creation of processes specifically using `cscript.exe` or `wscript.exe`, which are two interpreters utilized to execute VBScript files. It looks for command-line arguments that indicate the registration of the `register_app.vbs` script. This detection correlates specifically to the **MITRE ATT&CK** framework under the tactic of **Defense Evasion** and technique **T1218 (Signed Binary Proxy Execution)**, where adversaries may leverage trusted Windows scripts for their malicious actions.
  The primary data sources involved in this detection are **Windows process creation logs**, which capture details about the execution of processes like `cscript.exe` and `wscript.exe`. It evaluates the original file names of the executables and searches for specific command-line parameters indicating potential exploitation of the script for malicious purposes.
  ### Investigation Steps
  - **Verify Process Origin**: Use the EDR tool to trace the execution path of the detected scripts and confirm whether they were executed from standard or unexpected locations. 
  - **Analyze Command-Line Arguments**: Inspect the full command-line output in relation to the triggered alert, focusing on any suspicious parameters that signal misuse of the `register_app.vbs` script.
  - **Check for Persistence Mechanisms**: Review the system for any newly registered COM+ applications or related DLLs that correspond to the execution of the `register_app.vbs` script.
  - **Cross-Reference with Logs**: Utilize Windows Event Logs (Security, System) to correlate timestamps and actions that align with user activity and the alerts generated, assessing if legitimate usage or a malicious intent was present.
  ### Prioritization
  The severity level of this alert is classified as medium because the use of trusted administrative scripts for potentially malicious purposes poses a moderate risk to enterprise environments. While this may not indicate immediate compromise, it warrants thorough investigation to prevent persistence and potential exploitation.
  ### Blind Spots and Assumptions
  There are several assumptions and blind spots related to this detection rule. The rule may not trigger if the `register_app.vbs` script is executed in a way that does not involve `cscript.exe` or `wscript.exe` (e.g., executed via a different method). Additionally, legitimate usage of VB scripts that utilize similar command-line structures could lead to false positives, as they execute commands with the same flags without malicious intent. Attackers may also employ obfuscation techniques to mask their usage, thus posing a challenge for detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
