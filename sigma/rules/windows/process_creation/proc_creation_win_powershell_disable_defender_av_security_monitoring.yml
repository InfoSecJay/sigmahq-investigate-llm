title: Disable Windows Defender AV Security Monitoring
id: a7ee1722-c3c5-aeff-3212-c777e4733217
status: test
description: Detects attackers attempting to disable Windows Defender using Powershell
references:
- https://research.nccgroup.com/2020/06/23/wastedlocker-a-new-ransomware-variant-developed-by-the-evil-corp-group/
- https://rvsec0n.wordpress.com/2020/01/24/malwares-that-bypass-windows-defender/
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md
author: 'ok @securonix invrep-de, oscd.community, frack113'
date: 2020-10-12
modified: 2022-11-18
tags:
- attack.defense-evasion
- attack.t1562.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_pwsh_binary:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
  selection_pwsh_cli:
    CommandLine|contains:
    - '-DisableBehaviorMonitoring $true'
    - '-DisableRuntimeMonitoring $true'
  selection_sc_binary:
  - Image|endswith: '\sc.exe'
  - OriginalFileName: 'sc.exe'
  selection_sc_tamper_cmd_stop:
    CommandLine|contains|all:
    - 'stop'
    - 'WinDefend'
  selection_sc_tamper_cmd_delete:
    CommandLine|contains|all:
    - 'delete'
    - 'WinDefend'
  selection_sc_tamper_cmd_disabled:
    CommandLine|contains|all:
    - 'config'
    - 'WinDefend'
    - 'start=disabled'
  condition: all of selection_pwsh_* or (selection_sc_binary and 1 of selection_sc_tamper_*)
falsepositives:
- 'Minimal, for some older versions of dev tools, such as pycharm, developers were
  known to sometimes disable Windows Defender to improve performance, but this generally
  is not considered a good security practice.'
level: high
notes: |
  ### Technical Context
  This detection rule is designed to identify attempts by adversaries to disable Windows Defender Antivirus (AV) using PowerShell or the Service Control (sc) command. The rule specifically looks for indicators that suggest malicious behavior, such as command-line arguments that disable behavior and runtime monitoring in PowerShell (`-DisableBehaviorMonitoring $true` and `-DisableRuntimeMonitoring $true`). The rule also targets the Service Control command (`sc.exe`) for commands aimed at stopping, deleting, or disabling Windows Defender service (`WinDefend`). 
  By monitoring process creation events that log these command-line activities, the rule effectively flags potential defense-evasion tactics as outlined in the MITRE ATT&CK framework under the tactics of **Defense Evasion** and the technique **T1562.001: Disable or Modify Security Tools**. This aligns with the intent of many malware strains that seek to disable security mechanisms to avoid detection while executing malicious activities.
  ### Investigation Steps
  - **Check PowerShell Activity:** Use EDR tools to review PowerShell command execution logs for recent activity, particularly focusing on command lines that include parameters to disable Windows Defender.
  - **Examine Service Control Logs:** Investigate event logs related to `sc.exe` to verify if there have been any recent attempts to stop or disable the Windows Defender service, paying close attention to the precise command-line arguments.
  - **Review Process Creation Logs:** Audit Windows event logs for process creation events that correlate with the identified PowerShell and service control commands. Look for any unusual patterns or timing that coincide with other potential malicious activities.
  - **Assess Endpoint Defender Status:** Use the AV management console or endpoint detection tools to ensure that Windows Defender is running as expected and has not been altered or disabled on endpoints triggering this alert.
  ### Prioritization
  The alert is categorized as high severity because disabling antivirus solutions significantly increases the risk of successful malware infections or data breaches within the enterprise environment.
  ### Blind Spots and Assumptions
  This rule may not fire under several circumstances: 
  - If an adversary uses obfuscation techniques or legitimate applications that do not trigger the rule's conditions.
  - If security monitoring or logging is not enabled for PowerShell or service control events on endpoints, which could lead to missed detection of disabling attempts.
  - It assumes that the standard paths for `powershell.exe` and `sc.exe` remain unchanged; any deviations could lead to the rule's ineffective function. 
  ### Disclaimer
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
