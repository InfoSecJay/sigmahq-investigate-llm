title: Assembly Loading Via CL_LoadAssembly.ps1
id: c57872c7-614f-4d7f-a40d-b78c8df2d30d
status: test
description: Detects calls to "LoadAssemblyFromPath" or "LoadAssemblyFromNS" that
  are part of the "CL_LoadAssembly.ps1" script. This can be abused to load different
  assemblies and bypass App locker controls.
references:
- https://bohops.com/2018/01/07/executing-commands-and-bypassing-applocker-with-powershell-diagnostic-scripts/
- https://lolbas-project.github.io/lolbas/Scripts/CL_LoadAssembly/
author: frack113, Nasreddine Bencherchali (Nextron Systems)
date: 2022-05-21
modified: 2023-08-17
tags:
- attack.defense-evasion
- attack.t1216
logsource:
  category: process_creation
  product: windows
detection:
  selection:
        # Note: As this function is usually called from within powershell, classical process creation even would not catch it. This will only catch inline calls via "-Command" or "-ScriptBlock" flags for example.
    CommandLine|contains:
    - 'LoadAssemblyFromPath '
    - 'LoadAssemblyFromNS '
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The rule "Assembly Loading Via CL_LoadAssembly.ps1" is designed to detect potential misuse of PowerShell scripts that involve loading assemblies, specifically the `LoadAssemblyFromPath` and `LoadAssemblyFromNS` methods in the `CL_LoadAssembly.ps1` script. This script can be leveraged by attackers to load arbitrary .NET assemblies and circumvent Application Control mechanisms such as AppLocker. The detection focuses on PowerShell command lines that specifically contain calls to these methods, which may indicate that an adversary is attempting to execute unauthorized code or perform actions that could compromise system integrity or confidentiality.
  This detection rule primarily utilizes Windows process creation logs, specifically monitoring the command line arguments passed to PowerShell. Since this rule targets commands executed via PowerShell's `-Command` or `-ScriptBlock` flags, traditional methods of detecting PowerShell processes may not suffice. Events logged by Sysmon on process creation that includes the flagged command line patterns are crucial data sources in this context. The rule aligns with the MITRE ATT&CK technique T1216 (Script Proxy), where adversaries may utilize scripts to manipulate local execution policies or programmatically bypass security controls.
  ### Investigation Steps
  - **Review PowerShell Logs:** Check PowerShell event logs for script execution events closely associated with the flagged command arguments. Pay particular attention to the context and origins of the PowerShell execution.
  - **Analyze Process Tree:** Use EDR tools to investigate the parent-child relationships of the detected PowerShell process, identifying if any suspicious or unexpected processes spawned the use of the `LoadAssemblyFromPath` or `LoadAssemblyFromNS`.
  - **Correlate Network Activity:** Cross-reference any associated network connections from the time of the alert to determine if there were remote calls or downloads of additional malicious payloads.
  - **Validate with AppLocker Logs:** If AppLocker was configured, check its logs to see if any AppLocker events occurred that relate to the execution context of the flagged script actions and whether any bypass attempts were recorded.
  ### Prioritization
  Given the medium alert level in an enterprise environment, this detection should be treated with significant gravity. The use of assembly loading techniques to bypass security mechanisms may indicate an advanced threat or targeted attack, requiring further investigation to prevent potential exploitation.
  ### Blind Spots and Assumptions
  This detection rule operates under the assumption that PowerShell logging is enabled and properly configured, allowing command line arguments to be captured effectively. If PowerShell recordings are disabled or misconfigured, the rule may fail to trigger. Additionally, adversaries might obfuscate their command lines or utilize alternate methods to load assemblies, meaning that non-standard calls or bypass mechanisms may evade detection. Similarly, PowerShell's execution policy settings and the presence of anti-malware solutions may affect the execution of scripts, which could influence the effectiveness of this detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
