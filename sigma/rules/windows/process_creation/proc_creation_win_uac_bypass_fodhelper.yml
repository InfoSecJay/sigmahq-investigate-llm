title: Bypass UAC via Fodhelper.exe
id: 7f741dcf-fc22-4759-87b4-9ae8376676a2
status: test
description: Identifies use of Fodhelper.exe to bypass User Account Control. Adversaries
  use this technique to execute privileged processes.
references:
- https://eqllib.readthedocs.io/en/latest/analytics/e491ce22-792f-11e9-8f5c-d46d6d62a49e.html
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1548.002/T1548.002.md
author: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community
date: 2019-10-24
modified: 2021-11-27
tags:
- attack.privilege-escalation
- attack.t1548.002
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\fodhelper.exe'
  condition: selection
fields:
- ComputerName
- User
- CommandLine
falsepositives:
- Legitimate use of fodhelper.exe utility by legitimate user
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect attempts by adversaries to bypass User Account Control (UAC) using `Fodhelper.exe`, which is a Windows utility typically responsible for managing updates to the system. By monitoring process creation events where the parent image ends with `fodhelper.exe`, the rule identifies potentially malicious activity, as attackers can exploit this legitimate process to escalate their privileges and execute unauthorized commands. The key data source involved in this detection is the process creation logs, where information regarding the command-line arguments, user context, and parent-child relationships of executed processes can be captured. The detection aligns with the MITRE ATT&CK technique T1548.002, which focuses on methods of elevation of privileges, particularly through exploitation of built-in Windows features and processes.
  ### Investigation Steps
  - **Review Process Creation Logs:** Investigate the process creation logs within the EDR system to trace the invocation of `Fodhelper.exe` and identify the user context running this process, noting any unusual parent-child relationships.
    
  - **Analyze Command-Line Arguments:** Examine the command-line parameters passed to `Fodhelper.exe`. Malicious use may include arguments that are not typical for legitimate operations or that invoke additional executables.
  - **Check for Unauthorized Applications:** Cross-reference the activity with known applications within the environment to determine if `Fodhelper.exe` was invoked legitimately or as part of an unauthorized escalation attempt.
  - **Monitor User Activity:** Utilize Windows Security logs to review user activities around the time of the alert to identify any unauthorized access or unusual behavior that could indicate a larger compromise.
  ### Prioritization
  Alerts generated by this rule are categorized as high severity due to the potential for significant security impact when an adversary successfully bypasses UAC, which could lead to a complete system compromise and unauthorized access to sensitive data.
  ### Blind Spots and Assumptions
  This detection rule may not fire in environments where `Fodhelper.exe` is legitimately utilized by users for routine system updates or configurations. Furthermore, if an adversary utilizes additional obfuscation techniques or substitutes `Fodhelper.exe` with a similarly named but distinct executable, the rule will likely fail to trigger. It is also important to note that this rule assumes that sufficient logging is enabled in the environment to capture the necessary process creation events.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
