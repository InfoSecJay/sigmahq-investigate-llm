title: Renamed Visual Studio Code Tunnel Execution
id: 2cf29f11-e356-4f61-98c0-1bdb9393d6da
status: test
description: Detects renamed Visual Studio Code tunnel execution. Attackers can abuse
  this functionality to establish a C2 channel
references:
- https://ipfyx.fr/post/visual-studio-code-tunnel/
- https://badoption.eu/blog/2023/01/31/code_c2.html
- https://code.visualstudio.com/docs/remote/tunnels
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-09-28
tags:
- attack.command-and-control
- attack.t1071.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_image_only_tunnel:
    OriginalFileName:
    CommandLine|endswith: '.exe tunnel'
  selection_image_tunnel_args:
    CommandLine|contains|all:
    - '.exe tunnel'
    - '--name '
    - '--accept-server-license-terms'
  selection_image_tunnel_service:
    CommandLine|contains|all:
    - 'tunnel '
    - 'service'
    - 'internal-run'
    - 'tunnel-service.log'
  selection_parent_tunnel:
    ParentCommandLine|endswith: ' tunnel'
    Image|endswith: '\cmd.exe'
    CommandLine|contains|all:
    - '/d /c '
    - '\servers\Stable-'
    - 'code-server.cmd'
  filter_main_parent_code:
    ParentImage|endswith:
    - '\code-tunnel.exe'
    - '\code.exe'
  filter_main_image_code:
    Image|endswith:
    - '\code-tunnel.exe'
    - '\code.exe'
  condition: (1 of selection_image_* and not 1 of filter_main_image_*) or (selection_parent_tunnel
    and not 1 of filter_main_parent_*)
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "Renamed Visual Studio Code Tunnel Execution" is designed to detect potential command-and-control (C2) activity stemming from the misuse of Visual Studio Code (VS Code) tunnel functionality by attackers. This rule focuses on identifying specific command-line arguments that are indicative of VS Code tunnel execution, especially when these commands are renamed or executed in unconventional manners. The detection is primarily based on process creation logs, capturing details like the command line used during execution, the original file name, and the parent process to establish a context for analysis. 
  By monitoring for executables associated with Visual Studio Code that are invoked with specific parameters (such as `.exe tunnel` and service-related calls), the rule correlates these actions with typical C2 behavior as outlined in the MITRE ATT&CK framework under the "Command and Control" tactic (specifically technique T1071.001). By tracking parameters like `--name`, `--accept-server-license-terms`, and certain parent-child process relationships, the rule helps to identify potentially malicious tunneling activities that evade typical detection measures.
  ### Investigation Steps
  - **Analyze Process Creation Logs:** Review Windows Security and Sysmon logs for any process creation events matching the `code.exe` or `code-tunnel.exe` filenames, particularly those containing parameters like `tunnel` or related arguments.
  - **Check Parent Process Relationships:** Investigate the command line history of parent processes (e.g., `cmd.exe` invoking VS Code tunnels) to ensure there isnâ€™t any suspicious activity indicating a possible compromise.
  - **Network Traffic Analysis:** Utilize your EDR and NDR tools to analyze outgoing network connections for unusual traffic patterns or destinations originating from processes related to Visual Studio Code.
  - **Review Security Alerts and Context:** Validate if there are any existing alerts or historical data that correspond to the identified command-line activities or parent processes to assess the continuity of the threat.
  ### Prioritization
  This alert is categorized as high severity due to the potential implications of successfully establishing a C2 channel, which could lead to unauthorized access to critical systems and data within the enterprise. Detection of such behavior warrants immediate response to mitigate possible risks.
  ### Blind Spots and Assumptions
  This rule may not fire under certain conditions, such as if an attacker can execute the tunneling function using non-standard or renamed executables that don't align with the conditions specified in the rule. Additionally, if logging is not adequately configured to capture the necessary command-line arguments or parent process information, the detection may be ineffective. Analysts should also assume that determined adversaries might employ evasion techniques, such as using benign processes or external tools that are not part of the monitored telemetry.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
