title: Hidden Powershell in Link File Pattern
id: 30e92f50-bb5a-4884-98b5-d20aa80f3d7a
status: test
description: Detects events that appear when a user click on a link file with a powershell
  command in it
references:
- https://www.x86matthew.com/view_post?id=embed_exe_lnk
author: frack113
date: 2022-02-06
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage: C:\Windows\explorer.exe
    Image: C:\Windows\System32\cmd.exe
    CommandLine|contains|all:
    - 'powershell'
    - '.lnk'
  condition: selection
falsepositives:
- Legitimate commands in .lnk files
level: medium
notes: |
  ### Technical Context
  The "Hidden Powershell in Link File Pattern" Sigma rule is designed to detect potentially malicious activity where a user clicks on a link file (.lnk) that executes a PowerShell command. It monitors for process creation events initiated by the Windows Explorer process (C:\Windows\explorer.exe) that subsequently spawn a Command Prompt process (C:\Windows\System32\cmd.exe) with a command line containing both "powershell" and ".lnk". This combination often indicates an attempt to execute PowerShell scripts or commands hidden within link files, which is a common tactic employed by attackers to obfuscate their intent and bypass standard defenses. This rule aligns with the MITRE ATT&CK framework under the tactic "Execution" and technique T1059.001 (Command and Scripting Interpreter: Windows PowerShell).
  The technical data sources involved include Windows process creation logs which provide visibility into command-line arguments being used to invoke processes. An analyst investigating an alert will be looking for command lines that suggest the misuse of PowerShell in conjunction with link files, requiring an understanding of how legitimate .lnk file usage typically appears in their environment.
  ### Investigation Steps
  - **Review Process Creation Logs:** Check for the creation of processes logged by Windows Security that match the criteria of the alert to confirm if the command sequence was triggered by a user action.
  - **Examine Command-line Arguments:** Analyze the command-line options used when the `cmd.exe` process was created to establish whether the PowerShell command was indeed hidden or malicious in nature.
  - **Correlate User Activity:** Investigate associated user activity around the timestamp of the alert in user logs or proxy logs to determine if this was an expected action or indicative of a compromised occurrence.
  - **Check for Other Indicators:** Utilize EDR tools to search for any subsequent malicious behavior, including file downloads or other process creations that could relate back to the initial suspicious activity.
  ### Prioritization
  The alert generated by this rule is considered medium priority due to the potential for both legitimate and illegitimate use of .lnk files. Although there is a lower risk of immediate harm compared to more direct attack vectors, such instances warrant investigation given the possibility of undetected file execution or data exfiltration.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where the malicious PowerShell command does not utilize a .lnk file or if legitimate applications are scheduled to run PowerShell commands through link files without suspicion. Additionally, the rule assumes that proper logging configuration is in place to capture process creation events accurately. It can also be bypassed by attackers using other means to invoke PowerShell without .lnk files or by making legitimate Windows processes appear as the parent.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
