title: Malicious PE Execution by Microsoft Visual Studio Debugger
id: 15c7904e-6ad1-4a45-9b46-5fb25df37fd2
status: test
description: |
  There is an option for a MS VS Just-In-Time Debugger "vsjitdebugger.exe" to launch specified executable and attach a debugger.
  This option may be used adversaries to execute malicious code by signed verified binary.
  The debugger is installed alongside with Microsoft Visual Studio package.
references:
- https://twitter.com/pabraeken/status/990758590020452353
- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Vsjitdebugger/
- https://learn.microsoft.com/en-us/visualstudio/debugger/debug-using-the-just-in-time-debugger?view=vs-2019
author: Agro (@agro_sev), Ensar Åžamil (@sblmsrsn), oscd.community
date: 2020-10-14
modified: 2022-10-09
tags:
- attack.t1218
- attack.defense-evasion
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\vsjitdebugger.exe'
  reduction1:
    Image|endswith: '\vsimmersiveactivatehelper*.exe'
  reduction2:
    Image|endswith: '\devenv.exe'
  condition: selection and not (reduction1 or reduction2)
falsepositives:
- The process spawned by vsjitdebugger.exe is uncommon.
level: medium
notes: |
  ### Technical Context
  This Sigma rule identifies instances where the Microsoft Visual Studio Just-In-Time Debugger (`vsjitdebugger.exe`) is used to launch another executable, which may indicate malicious activity. Attackers can exploit this debugging feature to run unauthorized code under the guise of a legitimate binary, as `vsjitdebugger.exe` is a signed and verified executable included with Microsoft Visual Studio. The rule specifically looks for process creation events in which the parent image is `vsjitdebugger.exe` and ensures that the spawned process is not one of the common Visual Studio runtime processes, such as `vsimmersiveactivatehelper*.exe` and `devenv.exe`, which are generally not associated with malicious activities. By analyzing process creation logs, this rule helps in detecting potentially harmful behaviors that leverage trusted software.
  ### Investigation Steps
  - Review the process creation logs in your EDR to identify any recent executions of `vsjitdebugger.exe` and the associated child processes it initiated.
  - Check for any unusual command-line arguments passed to these processes to determine if they deviate from expected behavior.
  - Investigate the sourced executable that was launched by `vsjitdebugger.exe` by querying your endpoint security tool, looking for indications of known malware signatures or suspicious behavior.
  - Correlate findings with other logs, such as AV alerts and Proxy logs, to see if there were any related network activities or file downloads associated with the detected execution.
