title: Malicious PE Execution by Microsoft Visual Studio Debugger
id: 15c7904e-6ad1-4a45-9b46-5fb25df37fd2
status: test
description: |
  There is an option for a MS VS Just-In-Time Debugger "vsjitdebugger.exe" to launch specified executable and attach a debugger.
  This option may be used adversaries to execute malicious code by signed verified binary.
  The debugger is installed alongside with Microsoft Visual Studio package.
references:
- https://twitter.com/pabraeken/status/990758590020452353
- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Vsjitdebugger/
- https://learn.microsoft.com/en-us/visualstudio/debugger/debug-using-the-just-in-time-debugger?view=vs-2019
author: Agro (@agro_sev), Ensar Åžamil (@sblmsrsn), oscd.community
date: 2020-10-14
modified: 2022-10-09
tags:
- attack.t1218
- attack.defense-evasion
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\vsjitdebugger.exe'
  reduction1:
    Image|endswith: '\vsimmersiveactivatehelper*.exe'
  reduction2:
    Image|endswith: '\devenv.exe'
  condition: selection and not (reduction1 or reduction2)
falsepositives:
- The process spawned by vsjitdebugger.exe is uncommon.
level: medium
notes: |
  ### Technical Context
  This Sigma rule identifies potentially malicious activities associated with the Microsoft Visual Studio Just-In-Time Debugger (`vsjitdebugger.exe`). The rule specifically focuses on process creation events where the parent process is the Visual Studio Debugger, indicating that a user or an adversary may have invoked the debugger to execute a potentially harmful executable. The core of the detection logic is located in process creation logs, capturing scenarios where legitimate debugger calls may be leveraged for malicious purposes (e.g., launching an unsanctioned or harmful application). 
  In particular, this rule is aligned with the MITRE ATT&CK framework under the tactic of **Defense Evasion** (T1218), highlighting how adversaries may manipulate legitimate tools to enhance their operational stealth. By filtering out common Visual Studio-related processes, like `vsimmersiveactivatehelper.exe` and `devenv.exe`, this detection aims to reduce false positives and focus on incidents where the debugger is misused.
  ### Investigation Steps
  - **Verify Process Creation Logs**: Check the process creation logs associated with the alert to confirm if `vsjitdebugger.exe` launched a suspicious executable. Pay attention to the command-line arguments and the execution context.
    
  - **Assess Parent-Child Relationships**: Use the EDR tool to explore the process tree starting from `vsjitdebugger.exe`. Look for unusual child processes spawned that could indicate malicious activity.
    
  - **Review Network Connections**: Analyze any network connections made by the identified processes, particularly those that do not align with typical organizational traffic patterns. This may provide insight into command and control mechanisms.
    
  - **Inspect File System Changes**: Check for any recent changes to files or executables around the same time as the rule violation. This could help identify if any new or modified binaries were introduced in association with the debugger usage.
  ### Prioritization
  Alerts generated by this detection rule are considered medium severity due to the potential for legitimate development tools to be hijacked for malicious purposes. Effective monitoring is essential as misalignment in debugging behaviors may indicate attempts to execute unauthorized code within the environment.
  ### Blind Spots and Assumptions
  This rule may not trigger in scenarios where `vsjitdebugger.exe` is used for normal development workflows by legitimate users, which presents a challenge in environments with active software development. Additionally, certain configurations, such as custom scripts or specific application setups invoking the debugger, may evade detection. Adversaries could also choose to use similarly named processes or modify their methods to bypass this rule entirely, reinforcing the need for a layered security approach.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
