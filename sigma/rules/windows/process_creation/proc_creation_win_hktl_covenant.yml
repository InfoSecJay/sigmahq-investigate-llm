title: HackTool - Covenant PowerShell Launcher
id: c260b6db-48ba-4b4a-a76f-2f67644e99d2
status: test
description: Detects suspicious command lines used in Covenant luanchers
references:
- https://posts.specterops.io/covenant-v0-5-eee0507b85ba
author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community
date: 2020-06-04
modified: 2023-02-21
tags:
- attack.execution
- attack.defense-evasion
- attack.t1059.001
- attack.t1564.003
logsource:
  category: process_creation
  product: windows
detection:
  selection_1:
    CommandLine|contains|all:
    - '-Sta'
    - '-Nop'
    - '-Window'
    - 'Hidden'
    CommandLine|contains:
    - '-Command'
    - '-EncodedCommand'
  selection_2:
    CommandLine|contains:
    - 'sv o (New-Object IO.MemorySteam);sv d '
    - 'mshta file.hta'
    - 'GruntHTTP'
    - '-EncodedCommand cwB2ACAAbwAgA'
  condition: 1 of selection_*
level: high
notes: |
  ### Technical Context
  The "HackTool 
  - Covenant PowerShell Launcher" Sigma rule is designed to detect suspicious PowerShell command-line activity that is characteristic of Covenant launchers. Covenant is a popular post-exploitation tool used by adversaries to control compromised systems through PowerShell. This rule specifically looks for command-line parameters that are commonly used in such scenarios, including the use of options like `-Sta`, `-Nop`, `-Window`, and `Hidden`, which are indicative of attempts to run PowerShell scripts or commands with certain behaviors intended to evade detection. Additionally, it checks for known patterns, such as `-EncodedCommand` and specific strings like `mshta file.hta`, correlating with activity that may indicate command execution using hidden or minimized windows. The rule leverages Windows process creation logs as its primary data source, evaluating command-line arguments from executed processes for these telltale signs of suspicious activity. This detection correlates with the MITRE ATT&CK tactics of execution (T1059.001) and defense evasion (T1564.003).
  ### Investigation Steps
  - **Check EDR for Process Details:** Using EDR tools, review the processes that triggered the alert for their creation time, parent processes, and execution details to understand the context of the PowerShell execution.
    
  - **Analyze Command-Line Parameters:** Identify and investigate the complete command-line arguments associated with the alert, focusing on any patterns or encoded commands indicative of malicious activity.
  - **Review Windows Event Logs:** Collect and assess related Windows Security and Sysmon logs to trace any follow-on activities or suspicious processes spawned from the initial PowerShell command.
  - **Examine Network Connections:** Use NDR or firewall logs to evaluate any outbound connections from the host to determine if there are any communication paths linked to the malicious activities outlined in the alert.
  ### Prioritization
  The alert is categorized as high severity due to the potential for significant system compromise associated with unauthorized PowerShell executions and the use of known malicious patterns indicative of post-exploitation tactics.
  ### Blind Spots and Assumptions
  This rule may not fire if the PowerShell commands are obfuscated or altered to evade detection, which adversaries often do. Additionally, it assumes that PowerShell execution logging is enabled across all endpoints; if any endpoint lacks the necessary logging, the rule may fail to capture relevant events. Finally, it assumes access to the command-line parameters associated with the processes, which may not be available in all scenarios, particularly if the commands are executed in a constrained language mode or inside a restricted environment.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
