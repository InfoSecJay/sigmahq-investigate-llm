title: Potential Script Proxy Execution Via CL_Mutexverifiers.ps1
id: 1e0e1a81-e79b-44bc-935b-ddb9c8006b3d
status: test
description: Detects the use of the Microsoft signed script "CL_mutexverifiers" to
  proxy the execution of additional PowerShell script commands
references:
- https://lolbas-project.github.io/lolbas/Scripts/CL_mutexverifiers/
author: Nasreddine Bencherchali (Nextron Systems), oscd.community, Natalia Shornikova,
  frack113
date: 2022-05-21
modified: 2023-08-17
tags:
- attack.defense-evasion
- attack.t1216
logsource:
  category: process_creation
  product: windows
detection:
  selection_pwsh:
    ParentImage|endswith:
            # Note: to avoid potential FPs we assume the script was launched from powershell. But in theory it can be launched by any Powershell like process
    - '\powershell.exe'
    - '\pwsh.exe'
    Image|endswith: '\powershell.exe'
    CommandLine|contains: ' -nologo -windowstyle minimized -file '
  selection_temp:
        # Note: Since the function uses "env:temp" the value will change depending on the context of exec
    CommandLine|contains:
    - '\AppData\Local\Temp\'
    - '\Windows\Temp\'
  condition: all of selection_*
falsepositives:
- Unknown
level: medium
notes: |
  n
  ### Technical Context
  The Sigma rule titled "Potential Script Proxy Execution Via CL_Mutexverifiers.ps1" detects instances where the Microsoft signed script "CL_mutexverifiers.ps1" is executed via PowerShell in a manner that indicates potential proxy behavior for additional script execution. This rule focuses specifically on the use of PowerShell, looking at specific command-line patterns and parent process relationships that indicate the execution of scripts originating from temporary directories (such as `%AppData%\Local\Temp\` or `%Windows%\Temp\`). The rule analyzes process creation logs to detect these behavioral patterns, indicating a potential attempt at defense evasion, aligning with the MITRE ATT&CK tactic of Defense Evasion and its technique T1216, which covers signed scripts used to obfuscate malicious actions.
  By monitoring for PowerShell commands that feature key parameters, such as `-nologo -windowstyle minimized -file`, alongside the signature of the parent process being either `powershell.exe` or `pwsh.exe`, the detection rule captures potentially malicious activity that leverages trusted system scripts to execute additional commands or scripts without raising immediate red flags.
  ### Investigation Steps
  - **Review Process Creation Logs:** Examine the Winlogon Process Creation logs for instances tied to `CL_mutexverifiers.ps1`, focusing on unusual command-line arguments or parent processes indicative of script execution.
  - **Analyze EDR Alerts:** Investigate alerts generated by the EDR for any detections involving suspicious PowerShell execution patterns, particularly those originating from the temp directories.
  - **Cross-reference with AV Logs:** Check Antivirus logs for any detections or related actions taken against PowerShell executions that initiated from the identified script or its temp directory locations.
  - **Inspect Network Activity:** Utilize NDR solutions to analyze any outbound connections made by the PowerShell instances that may suggest data exfiltration or additional malware downloads.
  ### Prioritization
  The alert is assigned a medium severity level due to its potential to indicate advanced evasion tactics employed by attackers. Such usage of proxy scripts can allow adversaries to manipulate system scripts for malicious purposes while remaining under the radar, thus requiring prompt investigation.
  ### Blind spots and Assumptions
  This rule makes the assumption that any execution of the script will originate from standard PowerShell processes (`powershell.exe` or `pwsh.exe`). However, adversaries may find ways to execute the script without meeting these conditions (e.g., using alternative PowerShell hosts or processes). Additionally, if the script appears in different environments with unique temp paths, it may evade detection due to hardcoded path values. Finally, legitimate administrative utilities or scripts running from temp folders could lead to false positives if not carefully contextualized during investigations.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
