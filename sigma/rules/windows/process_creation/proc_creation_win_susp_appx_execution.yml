title: Potentially Suspicious Windows App Activity
id: f91ed517-a6ba-471d-9910-b3b4a398c0f3
status: test
description: Detects potentially suspicious child process of applications launched
  from inside the WindowsApps directory. This could be a sign of a rogue ".appx" package
  installation/execution
references:
- https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/
- https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-12
modified: 2023-08-31
tags:
- attack.defense-evasion
logsource:
  product: windows
  category: process_creation
detection:
  selection_parent:
        # GrandParentImage|endswith: '\sihost.exe'
    ParentImage|contains: 'C:\Program Files\WindowsApps\'
  selection_susp_img:
    Image|endswith:
            # You can add more LOLBINs
    - '\cmd.exe'
    - '\cscript.exe'
    - '\mshta.exe'
    - '\powershell.exe'
    - '\pwsh.exe'
    - '\regsvr32.exe'
    - '\rundll32.exe'
    - '\wscript.exe'
  selection_susp_cli:
        # You can add more potentially suspicious keywords
    CommandLine|contains:
    - 'cmd /c'
    - 'Invoke-'
    - 'Base64'
  filter_optional_terminal:
    ParentImage|contains: ':\Program Files\WindowsApps\Microsoft.WindowsTerminal'
    ParentImage|endswith: '\WindowsTerminal.exe'
        # Note: to avoid FP add the default shells and profiles that your WT integrates
    Image|endswith:
    - '\powershell.exe'
    - '\cmd.exe'
    - '\pwsh.exe'
  condition: selection_parent and 1 of selection_susp_* and not 1 of filter_optional_*
falsepositives:
- Legitimate packages that make use of external binaries such as Windows Terminal
level: medium
notes: |
  n
  ### Technical Context
  This Sigma rule is designed to detect potentially suspicious activity involving child processes launched from the WindowsApps directory, which could indicate exploitation of rogue ".appx" packages. The rule works by monitoring process creation events, specifically looking for instances where a parent process (e.g., something originating from `C:\Program Files\WindowsApps\`) spawns a child process that matches certain criteria. The rule focuses on potentially malicious images such as `cmd.exe`, `powershell.exe`, and several others, as well as suspicious command-line arguments. This detection mechanism involves telemetry from Windows process creation logs and could be directly linked to the MITRE ATT&CK tactic of Defense Evasion, specifically the technique of process injection or rogue application execution.
  ### Investigation Steps
  - **Verify the Parent Process:** Check the parent process in the EDR to confirm it originates from the WindowsApps directory and assess its legitimacy.
  - **Review Child Process Behavior:** Investigate the child process for its image and command-line arguments to determine if they match known malicious patterns or behaviors.
  - **Correlate with Other Logs:** Cross-reference the activity with Windows Security and Sysmon logs for additional context, such as related network connections or file modifications.
  - **Assess Execution Context:** Analyze the execution context and timing against known application usage patterns in your environment to identify any abnormal behavior or indication of compromise.
  ### Prioritization
  The alert carries a medium severity level due to the potential for enabling malicious activity through benign-seeming applications, highlighting the importance of verification before assuming the integrity of processes tied to the WindowsApps directory.
  ### Blind Spots and Assumptions
  This detection rule may not fire in cases where adversaries use legitimate application behavior or tooling (those considered "living off the land" such as Windows Terminal) to conduct their activities, thereby evading detection. Furthermore, if unusual or non-standard applications are installed in the WindowsApps directory that utilize typical command-line parameters or legitimate images, this could result in false negatives. It's crucial for engineers to be aware that stealthy techniques such as process hollowing or carefully crafted scripts may escape detection if they do not align with the specified criteria.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
