title: Suspicious PowerShell Parent Process
id: 754ed792-634f-40ae-b3bc-e0448d33f695
related:
- id: 692f0bec-83ba-4d04-af7e-e884a96059b6
  type: derived
status: test
description: Detects a suspicious or uncommon parent processes of PowerShell
references:
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=26
author: Teymur Kheirkhabarov, Harish Segar
date: 2020-03-20
modified: 2023-02-04
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_parent:
  - ParentImage|contains: 'tomcat'
  - ParentImage|endswith:
    - '\amigo.exe'
    - '\browser.exe'
    - '\chrome.exe'
    - '\firefox.exe'
    - '\httpd.exe'
    - '\iexplore.exe'
    - '\jbosssvc.exe'
    - '\microsoftedge.exe'
    - '\microsoftedgecp.exe'
    - '\MicrosoftEdgeSH.exe'
    - '\mshta.exe'
    - '\nginx.exe'
    - '\outlook.exe'
    - '\php-cgi.exe'
    - '\regsvr32.exe'
    - '\rundll32.exe'
    - '\safari.exe'
    - '\services.exe'
    - '\sqlagent.exe'
    - '\sqlserver.exe'
    - '\sqlservr.exe'
    - '\vivaldi.exe'
    - '\w3wp.exe'
  selection_powershell:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  - CommandLine|contains:
    - '/c powershell'            # FPs with sub processes that contained "powershell" somewhere in the command line
    - '/c pwsh'
  - Description: 'Windows PowerShell'
  - Product: 'PowerShell Core 6'
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
  condition: all of selection_*
falsepositives:
- Other scripts
level: high
notes: |
  n
  ### Technical Context
  This detection rule is designed to identify potentially malicious use of PowerShell when it is executed by uncommon or suspicious parent processes. The primary data sources involved in this alert are process creation logs, specifically monitoring parent process images and associated command-line arguments. By examining the `ParentImage` field, the rule looks for PowerShell (`powershell.exe` or `pwsh.exe`) being invoked by applications that are not typically associated with legitimate PowerShell execution. These may include web browsers, service executables, or other applications like `tomcat`, `chrome`, or `services.exe`, which can indicate potential misuse or an attempt to obfuscate malicious actions. This rule is connected to the MITRE ATT&CK tactic of Execution and specifically targets the technique T1059.001, which addresses command and scripting interpreter exploitation.
  ### Investigation Steps
  - **Review Process Creation Logs**: Utilize EDR tools to review the process creation logs around the time of the alert. Look for the parent processes listed in the alert and assess if their behavior aligns with normal operational patterns.
  - **Examine Command-Line Arguments**: Investigate the command-line arguments passed to PowerShell to determine if they indicate malicious intent. Analyze any unusual flags or parameters that do not align with legitimate PowerShell usage.
  - **Cross-check with AV/EDR Findings**: Verify if any antivirus or endpoint detection and response (EDR) systems logged related indicators. Check for any known malicious signatures or behaviors associated with the identified parent processes.
  - **Conduct Network Traffic Analysis**: Utilize NDR tools to assess any network connections made during the incident. Look for unusual external communications that may correlate with the suspicious PowerShell invocation.
  ### Prioritization
  This alert is classified as high severity due to the potential for PowerShell to execute harmful scripts or commands within an enterprise environment. The use of uncommon parent processes significantly increases the likelihood of malicious activity, warranting immediate investigation.
  ### Blind Spots and Assumptions
  This detection rule may not fire in scenarios where PowerShell is invoked by standard system processes or legitimate applications, which can lead to false negatives. Additionally, adept adversaries may obscure their activities by using custom scripts or leveraging benign parent processes not captured in the rule. It assumes that adequate logging is configured and that the processes being monitored have not been disabled or filtered out due to policy settings.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
