title: Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE
id: d80d5c81-04ba-45b4-84e4-92eba40e0ad3
status: test
description: Detects execution of arbitrary DLLs or unsigned code via a ".csproj"
  files via Dotnet.EXE.
references:
- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/
- https://twitter.com/_felamos/status/1204705548668555264
- https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/
author: Beyu Denis, oscd.community
date: 2020-10-18
modified: 2024-04-24
tags:
- attack.defense-evasion
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\dotnet.exe'
  - OriginalFileName: '.NET Host'
  selection_cli:
    CommandLine|endswith:
    - '.csproj'
    - '.csproj"'
    - '.dll'
    - '.dll"'
    - ".csproj'"
    - ".dll'"
  condition: all of selection_*
falsepositives:
- Legitimate administrator usage
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE" aims to detect the execution of potentially harmful or unsigned code through the .NET Core framework. This detection rule focuses on identifying instances when the `dotnet.exe` process is invoked with command-line parameters that point to either a `.csproj` (C# project) file or a `.dll` (dynamic link library) file. In a typical environment, this could indicate attempts by an adversary to execute arbitrary code, such as running malicious payloads under the guise of legitimate .NET processes. The rule leverages Windows process creation logs, specifically analyzing command-line invocations and the image being executed, to spot signs of potential defense evasion tactics as outlined in the MITRE ATT&CK framework under T1218 (Signed Binary Proxy Execution).
  ### Investigation Steps
  - **Check Process Creation Logs:** Review the Windows Event Log for process creation events involving `dotnet.exe` to analyze the execution context and any associated command-line arguments that could point to malicious activity.
    
  - **Examine Command-Line Arguments:** Investigate the command-line parameters provided to `dotnet.exe`. Validate any `.csproj` or `.dll` files referenced, focusing on their origin and whether they've been modified recently.
  - **Correlate with EDR Observations:** Use your Endpoint Detection and Response (EDR) tools to identify any additional suspicious behavior or patterns associated with the `dotnet.exe` process and confirm if other malicious indicators or behaviors exist on the host.
  - **Review Historical Context:** Check the incident history for user and system activity to determine if legitimate activities by administrators or developers are responsible for the alert. Look for unusual patterns or anomalies in typical usage.
  ### Prioritization
  The alert is categorized as medium severity due to the potential risks associated with executing arbitrary code using `dotnet.exe`, which could lead to further compromise if not investigated promptly.
  ### Blind Spots and Assumptions
  One of the primary assumptions of this rule is that `dotnet.exe` will always be used legitimately, which might not always be true; attackers could use various techniques to obfuscate their activities. Additionally, the rule may not trigger in environments where `dotnet.exe` is heavily utilized for legitimate applications, leading to an increased volume of false positives. The reliance on process creation logs means that any actions taken by attackers to avoid triggering these logs, such as utilizing elevation privileges or executing from a compromised legitimate service, could evade detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
