title: Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE
id: d80d5c81-04ba-45b4-84e4-92eba40e0ad3
status: test
description: Detects execution of arbitrary DLLs or unsigned code via a ".csproj"
  files via Dotnet.EXE.
references:
- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/
- https://twitter.com/_felamos/status/1204705548668555264
- https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/
author: Beyu Denis, oscd.community
date: 2020-10-18
modified: 2024-04-24
tags:
- attack.defense-evasion
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\dotnet.exe'
  - OriginalFileName: '.NET Host'
  selection_cli:
    CommandLine|endswith:
    - '.csproj'
    - '.csproj"'
    - '.dll'
    - '.dll"'
    - ".csproj'"
    - ".dll'"
  condition: all of selection_*
falsepositives:
- Legitimate administrator usage
level: medium
notes: |
  ### Technical Context
  This Sigma rule aims to identify potential malicious activity involving the execution of arbitrary DLLs or unsigned code through the use of `.csproj` files via `dotnet.exe`. The rule monitors process creation events specifically focusing on the execution of the `dotnet.exe` binary, which is a core component of the .NET framework for running applications. It analyzes command-line arguments to detect instances where `.csproj` files or `.dll` files are being executed, which may indicate an attempt to run custom code or payloads. By leveraging process creation logs, this detection assists in highlighting potentially harmful activities typically associated with defense evasion techniques.
  The detection focuses on identifying scenarios where the command line of a process contains specific indicators (`.csproj` or `.dll`), which could signify an attempt to execute unauthorized code. Such detections can be crucial in recognizing sophisticated threats that utilize .NET components to circumvent traditional security measures. Responders should review the context of these events to differentiate between legitimate application behavior and potential attacks.
  ### Investigation Steps
  - Examine the process creation logs in your EDR to identify any recent invocations of `dotnet.exe` with command-line arguments containing `.csproj` or `.dll`.
  - Cross-reference the source of the executed files against known safe applications to determine whether this is a legitimate administrative action or potentially malicious activity.
  - Analyze the network logs from the NDR to check for any outbound connections that occurred immediately following the execution of `dotnet.exe`, which might suggest further malicious behavior.
  - Review the behavior of the executing process in your EDR for any suspicious activities, such as attempts to modify system files or access sensitive data, which could indicate a broader compromise.
