title: Invoke-Obfuscation Via Stdin
id: 9c14c9fa-1a63-4a64-8e57-d19280559490
status: test
description: Detects Obfuscated Powershell via Stdin in Scripts
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task28)
author: Nikita Nazarov, oscd.community
date: 2020-10-12
modified: 2024-04-16
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|re: '(?i)(set).*&&\s?set.*(environment|invoke|\$\{?input).*&&.*"'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule identifies obfuscated PowerShell commands that utilize standard input (stdin). Specifically, it examines the command line parameters of newly created processes to detect patterns indicative of obfuscation techniques. The rule focuses on PowerShell commands that include `(set)` followed by environment manipulations, likely signifying an attempt to evade detection by security measures. The three techniques referenced in the MITRE ATT&CK framework—Defense Evasion (T1027), Execution (T1059.001), and the specific manipulation of how commands are executed—highlight the potential malicious intent behind these obfuscated commands. The log source leveraged for this detection is the process creation logs, which capture CommandLine data of executed processes, enabling insights into potentially harmful activities.
  ### Investigation Steps
  - **Review Process Creation Logs:** Check Windows Security Event Logs or an EDR platform for recent process creation events that match the obfuscation pattern specified in the rule. Look at process names, command lines, and parent-child relationships.
  - **Analyze PowerShell Execution:** Utilize PowerShell logging and transcripts to investigate the context of the obfuscated command and identify the source script or input used for execution. Ensure that logging is enabled to capture detailed execution steps.
  - **Monitor Network Activity:** Inspect outbound network connections triggered by the suspicious PowerShell commands via the organization's NDR or firewall logs to check for anomalous data exfiltration attempts or connections to known malign IP addresses.
  - **Check Security Tool Alerts:** Correlate alerts from AV, EDR, and NGFW solutions for additional context or signals of compromise associated with the detected obfuscation technique to understand if there are multiple indicators of malicious behavior.
  ### Prioritization
  Alerts generated by this rule are prioritized as high severity due to the critical nature of PowerShell as a tool for execution and the potential for significant data breaches if obfuscated malicious commands are successful in evading security defenses.
  ### Blind Spots and Assumptions
  This rule assumes that standard input manipulation leveraging command-line obfuscation will occur frequently enough to trigger detection. However, it may fail to fire if malicious scripts are executed in an unorthodox manner or use different obfuscation techniques. Additionally, if PowerShell logging is disabled or limited, the relevant command line data may not be captured, leading to undetected malicious activities. Furthermore, if script execution policies are overly permissive, adversaries may bypass detections entirely.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
