title: Use of FSharp Interpreters
id: b96b2031-7c17-4473-afe7-a30ce714db29
status: test
description: |
  Detects the execution of FSharp Interpreters "FsiAnyCpu.exe" and "FSi.exe"
  Both can be used for AWL bypass and to execute F# code via scripts or inline.
references:
- https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/applications-that-can-bypass-wdac
- https://bohops.com/2020/11/02/exploring-the-wdac-microsoft-recommended-block-rules-part-ii-wfc-fsi/
- https://lolbas-project.github.io/lolbas/OtherMSBinaries/FsiAnyCpu/
- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Fsi/
author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io
date: 2022-06-02
modified: 2024-04-23
tags:
- attack.execution
- attack.t1059
logsource:
  category: process_creation
  product: windows
detection:
  selection:
  - Image|endswith:
    - '\fsi.exe'
    - '\fsianycpu.exe'
  - OriginalFileName:
    - 'fsi.exe'
    - 'fsianycpu.exe'
  condition: selection
falsepositives:
- Legitimate use by a software developer.
level: medium
notes: |
  n
  ### Technical Context
  This Sigma rule is designed to detect the execution of FSharp interpreters, specifically "FsiAnyCpu.exe" and "FSi.exe". These interpreters are commonly utilized to bypass application control mechanisms, allowing the execution of F# code either through scripts or directly inline. The rule examines process creation logs on Windows systems, targeting specific image names and original file names associated with the FSharp interpreters. By monitoring these entries, it identifies instances where these interpreters may be invoked in inappropriate contexts, which aligns with the MITRE ATT&CK tactic of Execution (T1059). This technique can indicate potentially malicious activity, such as attempts to execute unauthorized scripts within a controlled environment.
  ### Investigation Steps
  - **Review Process Creation Logs:** Utilize EDR tools to investigate process creation events around the time of the alert, focusing on the parent process ID to identify the origin of the execution.
  - **Analyze Command-Line Parameters:** Check command-line arguments associated with the detected processes. This can reveal unusual patterns that may suggest malicious intent, such as the use of obfuscated or complex arguments.
  - **Assess Network Activity:** Inspect any network connections established during the execution of these interpreters. Use NDR tools to determine if there were any suspicious communications to external IPs or domains.
  - **Verify Valid Use Cases:** Consult with development teams to confirm whether the use of FSharp interpreters is legitimate in the context of current projects. This step helps in differentiating between false positives and actual threats.
  ### Prioritization
  The alert is classified as medium severity as the execution of these interpreters may indicate an attempt to execute unauthorized or malicious code in line with execution tactics used by adversaries.
  ### Blind Spots and Assumptions
  There is a potential blind spot regarding legitimate usage by software developers, which may result in false positives if the interpreters are invoked for valid coding tasks. Additionally, the rule may not fire if the FSharp interpreters are executed under alternate, obfuscated names or through different means, such as via scripts that do not call the command directly. It is assumed that environments have standard logging enabled and that there are no restrictive configurations that might suppress process creation logs.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
