title: HackTool - Pypykatz Credentials Dumping Activity
id: a29808fd-ef50-49ff-9c7a-59a9b040b404
status: test
description: Detects the usage of "pypykatz" to obtain stored credentials. Adversaries
  may attempt to extract credential material from the Security Account Manager (SAM)
  database through Windows registry where the SAM database is stored
references:
- https://github.com/skelsec/pypykatz
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.002/T1003.002.md#atomic-test-2---registry-parse-with-pypykatz
author: frack113
date: 2022-01-05
modified: 2023-02-05
tags:
- attack.credential-access
- attack.t1003.002
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith:
    - \pypykatz.exe
    - \python.exe
    CommandLine|contains|all:
    - 'live'
    - 'registry'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "HackTool 
  - Pypykatz Credentials Dumping Activity" is designed to detect malicious activities involving the usage of the Python-based tool, Pypykatz. This tool is commonly used by adversaries to extract stored credentials from the Security Account Manager (SAM) database on Windows systems. The rule specifically looks for process creation events where the command line includes both 'live' and 'registry', suggesting that an attempt is being made to access sensitive credential information from the Windows registry, where the SAM database is stored. The detection is triggered when either "pypykatz.exe" or "python.exe" is observed executing with the specified command line parameters, indicating potential credential theft activities.
  To effectively utilize this rule, it leverages process creation logs from Windows operating systems as its primary data source. The detection framework offers valuable insights for analysts as it flags potentially nefarious behavior associated with credential access, aiding in the identification of suspicious activities indicative of an attacker's attempt to escalate privileges or gain unauthorized access.
  ### Investigation Steps
  - Review the process creation logs from the EDR to confirm the execution of "pypykatz.exe" or "python.exe" and analyze the associated command-line parameters for indicators of credential dumping.
  - Check Windows event logs for any abnormal activities that may correlate with the time frame of the alert, focusing on events related to credential access and user logins.
  - Utilize the AV and NDR tools to search for any alerts or warnings about known patterns of credential dumping, particularly those involving Pypykatz.
  - Examine network logs (e.g., from proxies or SIEM) to identify any unusual outbound connections or data exfiltration attempts following the credential dumping activity.
