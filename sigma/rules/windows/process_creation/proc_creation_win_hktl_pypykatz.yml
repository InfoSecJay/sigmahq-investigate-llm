title: HackTool - Pypykatz Credentials Dumping Activity
id: a29808fd-ef50-49ff-9c7a-59a9b040b404
status: test
description: Detects the usage of "pypykatz" to obtain stored credentials. Adversaries
  may attempt to extract credential material from the Security Account Manager (SAM)
  database through Windows registry where the SAM database is stored
references:
- https://github.com/skelsec/pypykatz
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.002/T1003.002.md#atomic-test-2---registry-parse-with-pypykatz
author: frack113
date: 2022-01-05
modified: 2023-02-05
tags:
- attack.credential-access
- attack.t1003.002
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith:
    - \pypykatz.exe
    - \python.exe
    CommandLine|contains|all:
    - 'live'
    - 'registry'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The detection rule titled "HackTool 
  - Pypykatz Credentials Dumping Activity" is poised to identify unauthorized usage of the Pypykatz tool, which is a well-known utility used to extract stored credentials from the Windows Security Account Manager (SAM). The SAM database resides within the Windows registry, and adversaries may utilize Pypykatz to perform credential dumping by exploiting both the process creation activities and the specific command-line parameters associated with its execution. In this rule, we specifically look for instances where processes ending with "pypykatz.exe" or "python.exe" are run with command-line arguments containing "live" and "registry". This aligns with the MITRE ATT&CK technique noted as T1003.002 (Credential Dumping: Credential Dumping from LSASS) under the broader tactic of Credential Access. 
  Technical data sources involved include Windows process creation logs, which capture details about executed processes along with their command-line arguments. This allows immediate detection of potential malicious actions aimed at credential harvesting, providing a critical line of defense in an enterprise security setup.
  ### Investigation Steps
  - **Examine Process Creation Logs**: Utilize the EDR to investigate the process creation logs around the time of the alert to verify the presence of pypykatz or Python running with suspicious command-line arguments.
    
  - **Analyze Command-Line Parameters**: Review the detailed command-line context to evaluate whether any legitimate use cases for the detected processes exist, or if they align with known attack patterns.
  - **Search for Credential Access**: Look into system logs (Windows Security) to check if any subsequent unauthorized access to accounts or unusual access patterns were observed following the execution of the tool.
  - **Cross-Reference with Threat Intelligence**: Use available threat intelligence platforms to correlate the identified behavior with known malicious activities associated with the Pypykatz tool to understand the context of the threat.
  ### Prioritization
  The alert is classified as high severity due to the criticality of credential theft activities, which can lead to unauthorized access to sensitive systems and data, potentially resulting in significant breaches if not addressed promptly.
  ### Blind Spots and Assumptions
  This detection rule may not fire under certain conditions, such as if Pypykatz is executed under a different executable name or if the command-line parameters are obfuscated. Moreover, legitimate applications using Pypykatz for maintenance or troubleshooting could create false positives unless adequately reviewed. Engineers should consider the possibility of adversaries utilizing similar methodologies with custom tools designed to bypass this detection, which underscores the importance of comprehensive monitoring beyond this specific rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
