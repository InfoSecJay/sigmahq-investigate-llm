title: HackTool - CrackMapExec PowerShell Obfuscation
id: 6f8b3439-a203-45dc-a88b-abf57ea15ccf
status: test
description: The CrachMapExec pentesting framework implements a PowerShell obfuscation
  with some static strings detected by this rule.
references:
- https://github.com/byt3bl33d3r/CrackMapExec
- https://github.com/byt3bl33d3r/CrackMapExec/blob/0a49f75347b625e81ee6aa8c33d3970b5515ea9e/cme/helpers/powershell.py#L242
author: Thomas Patzke
date: 2020-05-22
modified: 2023-02-21
tags:
- attack.execution
- attack.t1059.001
- attack.defense-evasion
- attack.t1027.005
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
  selection_cli:
    CommandLine|contains:
    - 'join*split'
            # Line 343ff
    - '( $ShellId[1]+$ShellId[13]+''x'')'
    - '( $PSHome[*]+$PSHOME[*]+'
    - '( $env:Public[13]+$env:Public[5]+''x'')'
    - '( $env:ComSpec[4,*,25]-Join'''')'
    - '[1,3]+''x''-Join'''')'
  condition: all of selection_*
fields:
- ComputerName
- User
- CommandLine
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "HackTool 
  - CrackMapExec PowerShell Obfuscation" focuses on detecting potential misuse of PowerShell by identifying specific obfuscation patterns commonly employed by the CrackMapExec framework. The rule targets the execution of PowerShell scripts that utilize known methods of obscuring their true intent, signaled by the presence of certain static strings in the command line arguments. It achieves this detection through the monitoring of process creation logs where the command is executed by processes named `powershell.exe` or `pwsh.exe`. The logs must also include specific command line patterns indicative of obfuscation techniques, leveraging parameters such as `join` and `split`, among others.
  This rule aligns with the MITRE ATT&CK framework, specifically addressing the **Execution** tactic (ID: T1059.001) and **Defense Evasion** techniques (T1027.005). By focusing on these obfuscated commands, the rule seeks to identify potential malicious behavior that aims to bypass typical security measures and execute unauthorized scripts in a networked environment.
  ### Investigation Steps
  - **Verify Process Execution:**
    Use EDR tools to review process execution details and corroborate that the process `powershell.exe` or `pwsh.exe` was indeed initiated by a legitimate user session.
  - **Inspect Command Line Arguments:**
    Check the command line parameters for any suspicious patterns, focusing on strings such as `join*split` or other obfuscation techniques mentioned in the rule detection criteria.
  - **Analyze User Context:**
    Investigate the user account associated with the PowerShell execution to determine if it aligns with authorized access levels and expected behavior.
  - **Review Network Activity:**
    Utilize NDR logs to analyze outbound connections made during the timeframe of the suspicious PowerShell execution, looking for unexpected external communications that may indicate further malicious intent.
  ### Prioritization
  The alert generated by this detection rule is classified as high severity due to its association with prevalent offensive security tools like CrackMapExec. The use of PowerShell for obfuscation signifies a higher likelihood of malicious activity, warranting immediate investigation to mitigate potential threats.
  ### Blind Spots and Assumptions
  This rule may not fire if an adversary employs alternate means of PowerShell invocation that do not match the specified image or command line patterns. Additionally, if advanced obfuscation techniques are used that do not include the specified strings, detections could be missed. It's assumed that all monitored systems have Sysmon configured correctly to capture the necessary telemetry. Without this configuration or if the logs are manipulated, the effectiveness of the detection will be significantly reduced.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and to provide the best guidance possible, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
