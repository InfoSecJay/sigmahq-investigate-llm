title: Mavinject Inject DLL Into Running Process
id: 4f73421b-5a0b-4bbf-a892-5a7fb99bea66
related:
- id: 17eb8e57-9983-420d-ad8a-2c4976c22eb8
  type: obsolete
status: test
description: Detects process injection using the signed Windows tool "Mavinject" via
  the "INJECTRUNNING" flag
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.004/T1056.004.md
- https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e
- https://twitter.com/gN3mes1s/status/941315826107510784
- https://reaqta.com/2017/12/mavinject-microsoft-injector/
- https://twitter.com/Hexacorn/status/776122138063409152      # Deleted tweet
- https://github.com/SigmaHQ/sigma/issues/3742
- https://github.com/keyboardcrunch/SentinelOne-ATTACK-Queries/blob/6a228d23eefe963ca81f2d52f94b815f61ef5ee0/Tactics/DefenseEvasion.md#t1055-process-injection
author: frack113, Florian Roth
date: 2021-07-12
modified: 2022-12-05
tags:
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1055.001
- attack.t1218.013
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains: ' /INJECTRUNNING '
  filter:
    ParentImage: 'C:\Windows\System32\AppVClient.exe'     # This parent is the expected process to launch "mavinject"
  condition: selection and not filter
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled **Mavinject Inject DLL Into Running Process** is designed to detect malicious activity involving process injection using a legitimate Windows tool named "Mavinject." This rule focuses on identifying instances where the **/INJECTRUNNING** flag is included in the command line of a process created by the **AppVClient.exe**, which serves as the parent process. When a user or system invokes Mavinject with this flag, it allows for the injection of a Dynamic Link Library (DLL) into an already running process, a technique often employed by attackers to manipulate legitimate applications for nefarious purposes. 
  This alert aligns with the MITRE ATT&CK techniques for defense evasion (T1218) and privilege escalation (T1055.001). The primary log sources utilized for this detection are Windows Process Creation logs, specifically targeting the command-line parameters and parent-child process relationships to successfully flag anomalous behavior indicative of a DLL injection attempt.
  ### Investigation Steps
  - **Check Command Line Arguments:** Review the command line of the detected process in the EDR to confirm the presence of the `/INJECTRUNNING` flag, which signals potential misuse of Mavinject.
  - **Analyze Process Parentage:** Investigate the parent process (AppVClient.exe) to determine its legitimacy and whether it aligns with established baselines for expected behavior.
  - **Review Additional Logs:** Cross-reference with Sysmon logs, such as process creation and image loads, to identify any corresponding entries that may provide context or corroborate the suspicious behavior.
  - **Monitor for Indicator of Compromise (IOC):** Utilize AV solutions and network traffic monitoring tools to look for signatures or IOCs associated with the injected DLLs or related processes.
  ### Prioritization
  Given the high potential for privilege escalation and the evasion of security controls associated with process injection, alerts from this rule should be prioritized. Such behavior often indicates a serious threat to the environment and requires immediate investigation.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where Mavinject is employed without the specified command line flag or if it is called from an unexpected parent process that is not AppVClient.exe. Additionally, if an adversary uses custom tooling or modifications to Mavinject, or if processes are spawned in a covert manner that does not trigger standard logging, the detection may fail. Furthermore, false positives could arise if legitimate use of Mavinject occurs within the environment without appropriate logging context.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
