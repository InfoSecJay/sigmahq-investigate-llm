title: Potentially Suspicious Usage Of Qemu
id: 5fc297ae-25b6-488a-8f25-cc12ac29b744
status: experimental
description: |
  Detects potentially suspicious execution of the Qemu utility in a Windows environment.
  Threat actors have leveraged this utility and this technique for achieving network access as reported by Kaspersky.
references:
- https://securelist.com/network-tunneling-with-qemu/111803/
- https://www.qemu.org/docs/master/system/invocation.html#hxtool-5
author: Muhammad Faisal (@faisalusuf), Hunter Juhan (@threatHNTR)
date: 2024-06-03
tags:
- attack.command-and-control
- attack.t1090
- attack.t1572
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains:
    - '-m 1M'         # VM with just 1MB of ram is insufficient this is a suspicious flag
    - '-m 2M'
    - '-m 3M'
    CommandLine|contains|all:
    - 'restrict=off'
    - '-netdev '
    - 'connect='
    - '-nographic'         # This is also a key detection no one invoke without UI from console usually its a flag.
  filter_main_normal_usecase:
    CommandLine|contains:
    - ' -cdrom '         # Normal usage cases
    - ' type=virt '
    - ' -blockdev '
  condition: selection and not 1 of filter_main_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The Sigma rule "Potentially Suspicious Usage Of Qemu" is designed to identify potentially malicious activity related to the Qemu utility in Windows environments. Qemu is an open-source virtualization technology often used for various legitimate purposes, including application testing and secure environments. However, threat actors have been known to exploit Qemu for network access and evasion techniques, as indicated in Kaspersky's research. This rule leverages the monitoring of process creation events to detect specific command-line arguments that may indicate suspicious usage patterns. The key indicators this rule looks for include flags such as `-m 1M`, `-m 2M`, and `-m 3M`, as allocating minimal RAM is often associated with malicious intent, along with the `-nographic` flagâ€”which indicates usage without graphical output typically not utilized in standard operations. Additionally, the presence of terms like `restrict=off`, `-netdev`, and `connect=` are also indicative of possible tunneling activities. 
  This detection aligns with the MITRE ATT&CK framework, specifically under the Command and Control tactic (T1090) and the technique for Internal Tunneling (T1572). By actively monitoring process creation logs, particularly focusing on command-line parameters, this rule aims to surface any use of Qemu that could suggest an adversary attempting to establish covert network communications.
  ### Investigation Steps
  - **Review EDR Logs:** Examine the endpoint's EDR for details about the process creation event, including the complete command-line parameters used, which may provide insight into the intent and context of the Qemu execution.
  - **Check for Related Network Activity:** Utilize network detection and response (NDR) tools to inspect any outbound connections initiated by Qemu. Analyze traffic patterns for unusual or unauthorized destinations that could signify a command and control channel.
  - **Analyze System Logs:** Investigate relevant Windows Event Logs, specifically focusing on Security, to look for any unusual user activity or privilege escalations around the same time Qemu was executed.
  - **Correlate with Existing Threat Intelligence:** Cross-reference the command-line flags used with known threat actor tactics and techniques, identifying if similar patterns have been previously reported in the context of malicious behavior involving Qemu.
  ### Prioritization
  The alert generated by this rule is deemed medium severity because, while it may signal potential malicious activity, further context is required to confirm intent. The usage of these command-line flags could also reflect benign use cases but necessitates immediate investigation to rule out any nefarious activity within the enterprise.
  ### Blind Spots and Assumptions
  There are several blind spots regarding this detection rule. For instance, the rule may not fire in cases where the command-line parameters are modified to evade detection or if Qemu is executed under different user privileges. Additionally, legitimate operational use of Qemu by developers or testing teams may result in false positives due to the parameters aligned with normal function capabilities. It's assumed that all instances of Qemu would exhibit similar command-line usage, which may not hold true in every environment, particularly where environments vary in configuration.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
