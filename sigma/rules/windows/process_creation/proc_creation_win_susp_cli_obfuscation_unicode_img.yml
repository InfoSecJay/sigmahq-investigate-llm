title: Potential CommandLine Obfuscation Using Unicode Characters From Suspicious
  Image
id: 584bca0f-3608-4402-80fd-4075ff6072e3
related:
- id: e0552b19-5a83-4222-b141-b36184bb8d79
  type: similar
- id: ad691d92-15f2-4181-9aa4-723c74f9ddc3     # RTLO
  type: similar
- id: 2c0d2d7b-30d6-4d14-9751-7b9113042ab9
  type: obsolete
status: test
description: |
  Detects potential commandline obfuscation using unicode characters.
  Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit.
references:
- https://www.wietzebeukema.nl/blog/windows-command-line-obfuscation
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1027/T1027.md#atomic-test-6---dlp-evasion-via-sensitive-data-in-vba-macro-over-http
author: frack113, Florian Roth (Nextron Systems), Josh Nickels
date: 2024-09-02
modified: 2024-09-05
tags:
- attack.defense-evasion
- attack.t1027
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
    Image|endswith:
    - '\cmd.exe'
    - '\cscript.exe'
    - '\powershell.exe'
    - '\pwsh.exe'
    - '\wscript.exe'
    OriginalFileName:
    - 'Cmd.EXE'
    - 'cscript.exe'
    - 'PowerShell.EXE'
    - 'pwsh.dll'
    - 'wscript.exe'
  selection_special_chars:
    CommandLine|contains:
            # spacing modifier letters that get auto-replaced
    - 'ˣ'         # 0x02E3
    - '˪'         # 0x02EA
    - 'ˢ'         # 0x02E2
            # Forward slash alternatives
    - '∕'         # 0x22FF
    - '⁄'         # 0x206F
            # Hyphen alternatives
    - '―'         # 0x2015
    - '—'         # 0x2014
            # Whitespace that don't work as path separator
    - ' '         # 0x00A0
            # Other
    - '¯'
    - '®'
    - '¶'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule targets potential command-line obfuscation attempts by identifying the use of Unicode characters in processes related to common scripting and command-line tools, such as cmd.exe, PowerShell, and their variants. Attackers may utilize these Unicode characters to evade detection and make the command lines more difficult to analyze, thereby obscuring their intent. The rule inspects process creation logs for specific commands containing uncommon characters, such as spacing modifiers, alternative slashes, and other identifiers that do not traditionally belong in command lines. This activity aligns with the MITRE ATT&CK tactic of **Defense Evasion** (T1027), reflecting the adversary's potential effort to mask malicious actions.
  ### Investigation Steps
  - **Identify the Process:** Use EDR tools to locate the process ID (PID) of the program flagged by the alert and gather detailed information on its execution context, including parent processes.
  - **Review Command-Line Arguments:** Investigate the command-line arguments associated with the identified PID in the process creation logs, focusing on unusual characters or sequences that may indicate obfuscation techniques.
  - **Check Recent Changes:** Assess any recent changes to the system that might correlate with this alert, including new installations or modifications of scripts that could relate to the flagged executable.
  - **Correlate Network Activity:** Use network logs to examine any outbound connections made by the suspicious process to identify potential command-and-control communications or data exfiltration attempts.
  ### Prioritization
  This alert is assigned a high severity level due to the potential for obfuscated commands to hide malicious activity, which poses a significant risk to the enterprise environment. Prompt investigation is essential to mitigate any ensuing threats.
  ### Blind Spots and Assumptions
  This rule may not trigger in environments where command-line obfuscation is rare or where mitigations against such techniques are in place. Additionally, if attackers use characters not specified in the rule, or if they employ lower-profile scripts without common executables, detection may fail. Analysts should also consider legitimate applications that might inadvertently utilize similar obfuscation for functionality, which could lead to false positives.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
