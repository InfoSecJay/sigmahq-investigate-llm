title: Hiding Files with Attrib.exe
id: 4281cb20-2994-4580-aa63-c8b86d019934
status: test
description: Detects usage of attrib.exe to hide files from users.
references:
- https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/
- https://www.uptycs.com/blog/lolbins-are-no-laughing-matter
author: Sami Ruohonen
date: 2019-01-16
modified: 2023-03-14
tags:
- attack.defense-evasion
- attack.t1564.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\attrib.exe'
  - OriginalFileName: 'ATTRIB.EXE'
  selection_cli:
    CommandLine|contains: ' +h '
  filter_main_msiexec:
    CommandLine|contains: '\desktop.ini '
  filter_optional_intel:
    ParentImage|endswith: '\cmd.exe'
    CommandLine: '+R +H +S +A \\\*.cui'
    ParentCommandLine: 'C:\\WINDOWS\\system32\\\*.bat'
  condition: all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- IgfxCUIService.exe hiding *.cui files via .bat script (attrib.exe a child of cmd.exe
  and igfxCUIService.exe is the parent of the cmd.exe)
- Msiexec.exe hiding desktop.ini
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Hiding Files with Attrib.exe" is designed to detect the misuse of the `attrib.exe` command-line utility to hide files from users. `attrib.exe` is a legitimate Windows utility primarily used to change the attributes of files, such as setting them as hidden or read-only. However, adversaries can exploit this tool as part of their defense evasion tactics, specifically under the MITRE ATT&CK technique T1564.001 (Hide Artifacts). The rule focuses on tracking process creation events where `attrib.exe` is used with command-line arguments that include `+h` (which marks a file as hidden). The primary data sources leveraged for this detection include process creation logs, specifically monitoring the command-line parameters and parent-child relationships of processes.
  To effectively capture potential malicious use, the rule differentiates between general uses of `attrib.exe` and those occurring under suspicious context. For instance, it ignores instances where `desktop.ini` files are being hidden, or when executed as part of trusted processes, emphasizing its focus on detecting anomalous usage of this utility.
  ### Investigation Steps
  - **Review EDR Alerts:** Inspect EDR alerts for occurrences of `attrib.exe` being executed with the `+h` flag. Pay special attention to the parent-child process relationships to determine if it aligns with unusual behavior.
  - **Analyze Command-Line Parameters:** Examine the command-line parameters associated with the process creation events for `attrib.exe`. Look for other suspicious flags beyond `+h` that might indicate further adversarial activity.
  - **Check Supporting Logs:** Correlate findings with Windows System Event Logs to ascertain the context of usage. Look for log entries related to file access or modifications around the same timestamp.
  - **Assess Alternate Tools Usage:** Verify if other tools or scripts might be leveraging similar techniques for file hiding or obfuscation, which could amplify risk levels or indicate co-occurring threats.
  ### Prioritization
  This alert is categorized with a medium severity level as it indicates potential malicious activity using a well-known system utility for obfuscation. In an enterprise environment, understanding the context and intent behind the usage of `attrib.exe` is critical, as it can signal an attempt to hide malicious files and evade detection.
  ### Blind spots and Assumptions
  There are several blind spots and assumptions regarding this detection rule. One key issue is that legitimate applications or services may also employ `attrib.exe` to manage files, leading to potential false positives. Additionally, if an attacker utilizes alternate methods or tools outside `attrib.exe`, such instances will evade detection as the rule is focused specifically on this binary. Adversaries could also manipulate the command-line arguments to bypass this detection, emphasizing the need for a holistic approach to endpoint monitoring.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
