title: Malicious Windows Script Components File Execution by TAEF Detection
id: 634b00d5-ccc3-4a06-ae3b-0ec8444dd51b
status: test
description: |
  Windows Test Authoring and Execution Framework (TAEF) framework allows you to run automation by executing tests files written on different languages (C, C#, Microsoft COM Scripting interfaces
  Adversaries may execute malicious code (such as WSC file with VBScript, dll and so on) directly by running te.exe
references:
- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Te/
- https://twitter.com/pabraeken/status/993298228840992768
- https://learn.microsoft.com/en-us/windows-hardware/drivers/taef/
author: 'Agro (@agro_sev) oscd.community'
date: 2020-10-13
modified: 2021-11-27
tags:
- attack.defense-evasion
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection:
  - Image|endswith: '\te.exe'
  - ParentImage|endswith: '\te.exe'
  - OriginalFileName: '\te.exe'
  condition: selection
falsepositives:
- It's not an uncommon to use te.exe directly to execute legal TAEF tests
level: low
notes: |
  ### Technical Context
  The "Malicious Windows Script Components File Execution by TAEF Detection" Sigma rule identifies instances where the TAEF (Test Authoring and Execution Framework) is potentially being exploited for executing malicious scripts or files. This framework is traditionally used to run automated tests written in various programming languages. The rule specifically looks for process creation logs related to "te.exe," a utility belonging to the TAEF, as both the executed image and its parent process. By monitoring these processes, the rule can highlight suspicious activities where adversaries may utilize "te.exe" to execute harmful files, such as Windows Script Components (WSC) or VBScript, thereby evading detection mechanisms.
  The primary data sources for this detection are process creation logs, which capture the execution details of applications, including their command-line parameters and parent-child relationships. Analysts should be aware of the legitimate uses of "te.exe" in test environments, as these instances may lead to false positives when investigating alerts generated by this rule.
  ### Investigation Steps
  - Review EDR logs for instances of "te.exe" execution to determine the context of the activity and identify any unusual command-line arguments used.
  - Cross-reference the parent process of "te.exe" execution with known benign applications to assess whether the invocation is legitimate or potentially malicious.
  - Analyze associated network activity using NDR tools to check for anomalous connections that may indicate data exfiltration or command-and-control communications.
  - Examine logs from security tools such as AV and proxy servers to spot any detections or blocks associated with the executed WSC files or other suspicious file types.
