title: UAC Bypass Using PkgMgr and DISM
id: a743ceba-c771-4d75-97eb-8a90f7f4844c
status: test
description: Detects the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe
  23)
references:
- https://github.com/hfiref0x/UACME
author: Christian Burkard (Nextron Systems)
date: 2021-08-23
modified: 2024-12-01
tags:
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1548.002
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\pkgmgr.exe'
    Image|endswith: '\dism.exe'
    IntegrityLevel:
    - 'High'
    - 'System'
    - 'S-1-16-16384'         # System
    - 'S-1-16-12288'         # High
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule identifies potential User Account Control (UAC) bypass attempts leveraging the `pkgmgr.exe` (Package Manager) and `dism.exe` (Deployment Image Servicing and Management). These binaries are commonly used in legitimate administrative tasks on Windows systems, but they can also be exploited by malicious actors to gain elevated privileges without triggering standard security alerts. The rule monitors process creation logs to capture instances where `dism.exe` is initiated with `pkgmgr.exe` as its parent process, particularly when running at a high or system integrity level (indicating potential malicious intent). This behavior corresponds to the MITRE ATT&CK technique T1548.002, which focuses on the abuse of signed binaries to elevate privileges and bypass security mechanisms such as UAC.
  ### Investigation Steps
  - **Investigate Process Creation Logs:** Check recent events in the process creation logs for instances where `dism.exe` was invoked by `pkgmgr.exe`. Note timestamps and the user context under which these processes were executed.
    
  - **Examine Parent-Child Process Relationships:** Utilize EDR tooling to analyze the parent-child process relationships surrounding these executions to identify any other suspicious activity or patterns accompanying the alerts.
  - **Review Event Logs for Anomalous Activity:** Audit Windows Security, System, and Application logs for additional anomalies around the same timeframe, such as unexpected process terminations or logon attempts that may correlate with the UAC bypass.
  - **Assess User Accounts and Permission Levels:** Confirm the integrity level of the user account that initiated the process and assess whether it has legitimate administrative privileges or if it appears anomalous compared to historical data.
  ### Prioritization
  The severity of this alert is classified as high due to the potential for privilege escalation and bypassing critical security controls. Such actions, if successful, could compromise system security, leading to unauthorized access and manipulation of resources.
  ### Blind Spots and Assumptions
  This rule may not fire if the parent-child relationship is altered (e.g., different parent processes) or if the evidence is removed or obscured by legitimate cleanup utilities. Additionally, if the binaries are executed in a non-standard manner (e.g., directly from memory or via obfuscation techniques), they could evade detection. Assumptions include that the monitored processes will always be executed as specified, and unusual execution contexts may not be accounted for if typical behavior deviates.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
