title: MpiExec Lolbin
id: 729ce0ea-5d8f-4769-9762-e35de441586d
status: test
description: Detects a certain command line flag combination used by mpiexec.exe LOLBIN
  from HPC pack that can be used to execute any other binary
references:
- https://twitter.com/mrd0x/status/1465058133303246867
- https://learn.microsoft.com/en-us/powershell/high-performance-computing/mpiexec?view=hpc19-ps
author: Florian Roth (Nextron Systems)
date: 2022-01-11
modified: 2024-11-23
tags:
- attack.execution
- attack.defense-evasion
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection_binary:
  - Image|endswith: '\mpiexec.exe'
  - Hashes|contains: 'IMPHASH=d8b52ef6aaa3a81501bdfff9dbb96217'
  selection_flags:
    CommandLine|contains:
    - ' /n 1 '
    - ' -n 1 '
  condition: all of selection*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect suspicious usage of `mpiexec.exe`, a legitimate Windows binary often used for executing parallel computing tasks in High-Performance Computing (HPC). It flags command line invocations that include specific parameters commonly associated with malicious activities, such as executing arbitrary binaries. The detection focuses on two aspects: the presence of the `mpiexec.exe` image and a specific combination of command-line flags (`/n 1` or `-n 1`) that can indicate potential exploitation or lateral movement within a network. The relevant data sources for this rule primarily include process creation logs that capture executable launches along with their command line parameters, enabling precise identification of potentially malicious behavior.
  ### Investigation Steps
  - Utilize EDR to investigate the endpoint where the alert was triggered and review the recent process creation events related to `mpiexec.exe`.
  - Analyze the command line parameters associated with `mpiexec.exe` executions, specifically looking for the presence of `/n 1` or `-n 1` to determine if the command was likely malicious.
  - Cross-reference the file hashes against known malware signatures using AV tools to ascertain if the binary is trusted or has been compromised.
  - Examine network activity logs to identify any anomalous connections or data exfiltration attempts initiated by the Windows machine during the time frame of the alert.
