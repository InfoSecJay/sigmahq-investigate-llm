title: Invoke-Obfuscation Via Use Clip
id: e1561947-b4e3-4a74-9bdd-83baed21bdb5
status: test
description: Detects Obfuscated Powershell via use Clip.exe in Scripts
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task29)
author: Nikita Nazarov, oscd.community
date: 2020-10-09
modified: 2024-04-15
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
        # Example 1: C:\WINdoWS\sySteM32\CMd /c " ECho\Invoke-Expression (New-Object Net.WebClient).DownloadString|Clip.Exe&&C:\WINdoWS\sySteM32\CMd /c pOWerSheLl -STa . ( \"{2}{0}{1}\"-f'dd-',(\"{0}{1}\" -f 'T','ype' ),'A' ) -Assembly ( \"{4}{1}{3}{0}{2}\"-f (\"{0}{1}\" -f 'nd','ow'),( \"{1}{0}\"-f'.W','stem' ),( \"{2}{1}{0}\" -f 'rms','Fo','s.'),'i','Sy') ; ${exeCUtIOnCONTeXT}.\"INV`oKECOM`m`ANd\".\"INV`ok`ESCriPT\"( ( [sYSteM.wiNDoWS.forMs.ClIPboaRD]::( \"{2}{0}{1}\" -f'Ex','t',(\"{0}{1}\" -f'Get','t' ) ).\"iNvo`Ke\"( )) ) ; [System.Windows.Forms.Clipboard]::(\"{1}{0}\" -f 'ar','Cle' ).\"in`V`oKE\"( )"
        # Example 2: C:\WINDowS\sYsTEM32\CmD.eXE /C" echo\Invoke-Expression (New-Object Net.WebClient).DownloadString| C:\WIndOWs\SYSteM32\CLip &&C:\WINDowS\sYsTEM32\CmD.eXE /C POWERSHeLL -sT -noL [Void][System.Reflection.Assembly]::( \"{0}{3}{4}{1}{2}\" -f( \"{0}{1}\"-f'Lo','adW' ),( \"{0}{1}\"-f 'Par','t'),( \"{0}{1}{2}\"-f 'ial','N','ame'),'it','h' ).\"in`VO`KE\"( ( \"{3}{1}{4}{5}{2}{0}\"-f'rms','ystem.Windo','Fo','S','w','s.' )) ; ( [wIndows.fOrms.cLIPBOArD]::( \"{1}{0}\"-f'T',( \"{1}{0}\" -f'tEX','gET' )).\"i`Nvoke\"( ) ) ^^^| ^^^& ( ( ^^^& ( \"{2}{1}{0}\"-f 'e',( \"{2}{1}{0}\"-f'IABl','aR','v' ),( \"{0}{1}\"-f'Get','-' ) ) ( \"{1}{0}\"-f'*','*MDr' )).\"n`Ame\"[3,11,2]-jOin'') ; [Windows.Forms.Clipboard]::( \"{0}{1}\" -f (\"{1}{0}\"-f'tT','Se' ),'ext').\"in`VoKe\"(' ' )"
    CommandLine|re: '(?i)echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?)'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the use of obfuscated PowerShell commands that leverage `Clip.exe`, a legitimate Windows tool for manipulating the clipboard, as a means of executing potentially malicious scripts. The rule focuses on command-line activity where the `Clip` utility is invoked via `cmd.exe` to handle obfuscated PowerShell commands that may download and execute malicious payloads. Specifically, it employs regular expressions to identify command-line parameters that mention `echo` and `clip`, followed by commands that interact with the Windows clipboard through the `System.Windows.Forms.Clipboard` class. This behavior is indicative of the MITRE ATT&CK techniques T1027 (Obfuscated Files or Information) and T1059.001 (PowerShell), as it illustrates efforts to hide the true intent of the commands from security mechanisms.
  The data sources involved in this rule mainly consist of process creation logs from the Windows operating system, specifically focusing on the command-line arguments executed during these processes. This allows analysts to identify suspicious command behavior indicative of obfuscation techniques frequently used in the early phases of a cyber attack.
  ### Investigation Steps
  - **Query EDR for Process Creation Events:** Check the endpoint's EDR for process creation logs that match the alert criteria. Look specifically for any entries involving `cmd.exe` or `powershell.exe` with similar command-line parameters.
  - **Analyze Command Execution Context:** Examine the context of the command execution to determine the user account, whether it involved elevated privileges, and any prior processes that led to the execution of the suspicious command.
  - **Review Clipboard Activity:** Investigate the clipboard data around the time of the alert. This may involve checking for unusual content or large data transfers that could indicate data exfiltration attempts.
  - **Cross-reference with Security Controls:** Validate the findings against other security controls, such as firewall logs, proxy logs, and antivirus detections. This can help determine if additional malicious activities were taking place concurrently.
  ### Prioritization
  Given the nature of the alert, which involves obfuscated execution of commands in a Windows environment, it is categorized as a high severity alert. The use of PowerShell alongside clipboard manipulation techniques is often associated with advanced persistent threats and may indicate a critical risk to the integrity of systems and data.
  ### Blind spots and Assumptions
  There are several potential blind spots related to this detection rule. For instance, the rule may not fire if the obfuscated command is executed with a different encoding technique or bypasses PowerShell's visibility by using alternative execution methods. Additionally, if security configurations prevent logging of some processes, the telemetry may not capture the behaviors necessary for this rule to trigger. Analysts should assume that not all instances of clipboard usage are malicious, and therefore false positives can occur. Understanding how attackers may obfuscate their commands or use legitimate tools for illicit purposes is essential for effective detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
