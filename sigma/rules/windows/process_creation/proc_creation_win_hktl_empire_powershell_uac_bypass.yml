title: HackTool - Empire PowerShell UAC Bypass
id: 3268b746-88d8-4cd3-bffc-30077d02c787
status: stable
description: Detects some Empire PowerShell UAC bypass methods
references:
- https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/data/module_source/privesc/Invoke-EventVwrBypass.ps1#L64
- https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/data/module_source/privesc/Invoke-FodHelperBypass.ps1#L64
author: Ecco
date: 2019-08-30
modified: 2023-02-21
tags:
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1548.002
- car.2019-04-001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains:
    - ' -NoP -NonI -w Hidden -c $x=$((gp HKCU:Software\Microsoft\Windows Update).Update)'
    - ' -NoP -NonI -c $x=$((gp HKCU:Software\Microsoft\Windows Update).Update);'
  condition: selection
fields:
- CommandLine
- ParentCommandLine
falsepositives:
- Unknown
level: critical
notes: |
  ### Technical Context
  The "HackTool 
  - Empire PowerShell UAC Bypass" detection rule aims to identify unauthorized attempts to bypass User Account Control (UAC) mechanisms using PowerShell scripts associated with the Empire framework. Specifically, it monitors for command-line invocations that leverage PowerShell with parameters indicative of bypass attempts, such as silently executing commands that access sensitive registry keys. By detecting these malicious command-line patterns, the rule helps to protect against potential privilege escalation techniques employed by adversaries. In terms of data sources, this detection relies on Windows process creation logs, particularly focusing on capturing command-line arguments that are executed in the context of suspicious PowerShell activities. The rule aligns with the MITRE ATT&CK technique T1548.002, which describes methods of bypassing UAC.
  ### Investigation Steps
  - **Review Process Creation Logs:** Analyze related process creation logs in your EDR tool to investigate the context in which the alert was triggered. Check for multiple instances of the detected command-line patterns and their corresponding parent processes.
    
  - **Examine Parent Command Line:** Inspect the `ParentCommandLine` field of the alert to determine what initiated the suspicious PowerShell command. This can provide insight into whether it was executed by a legitimate application or if it originated from malicious behavior.
  - **Check for Additional Indicators:** Utilize your SIEM to correlate the alert with other event logs, such as Windows Security logs and Sysmon data, to identify any prior indications of system compromise or lateral movement.
  - **Conduct Threat Intel Lookup:** Reference threat intelligence databases or the given GitHub links to see if the PowerShell commands executed were consistent with known threat actor behaviors or tactics related to privilege escalation.
  ### Prioritization
  The alert is classified as critical due to the nature of UAC bypass techniques that can allow attackers to escalate privileges and execute arbitrary code. In an enterprise context, this potentially leads to a full compromise of sensitive systems.
  ### Blind Spots and Assumptions
  There are several assumptions to consider: first, the rule assumes proper logging is enabled for process creation events; if logging is not configured accurately, the rule may not fire. Moreover, adversaries may employ obfuscation techniques or modify command-line arguments to evade detection. Additionally, benign user scripts or legitimate administrative tasks may inadvertently trigger false positives if they contain similar command structures, which can lead to investigation fatigue.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
