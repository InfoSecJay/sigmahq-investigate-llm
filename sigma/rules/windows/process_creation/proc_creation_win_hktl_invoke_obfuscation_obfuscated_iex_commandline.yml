title: Invoke-Obfuscation Obfuscated IEX Invocation
id: 4bf943c6-5146-4273-98dd-e958fd1e3abf
status: test
description: Detects all variations of obfuscated powershell IEX invocation code generated
  by Invoke-Obfuscation framework from the following code block
references:
- https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888
author: 'Daniel Bohannon (@Mandiant/@FireEye), oscd.community'
date: 2019-11-08
modified: 2022-12-31
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
  - CommandLine|re: '\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\['
  - CommandLine|re: '\$ShellId\[\s*\d{1,3}\s*\]\s*\+\s*\$ShellId\['
  - CommandLine|re: '\$env:Public\[\s*\d{1,3}\s*\]\s*\+\s*\$env:Public\['
  - CommandLine|re: '\$env:ComSpec\[(\s*\d{1,3}\s*,){2}'
  - CommandLine|re: '\*mdr\*\W\s*\)\.Name'
  - CommandLine|re: '\$VerbosePreference\.ToString\('
  - CommandLine|re: '\[String\]\s*\$VerbosePreference'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule identifies variations of obfuscated PowerShell command invocations that are commonly generated by the Invoke-Obfuscation framework. The rule focuses specifically on recognizing certain patterns in the command line parameters related to PowerShell's `$PSHome`, `$ShellId`, and environmental variables like `$env:Public` and `$env:ComSpec`. By using regular expressions, the rule can detect these obfuscation techniques which are often employed by attackers to evade detection mechanisms. The primary data source for this detection is process creation logs from Windows, which capture command line arguments that are passed when a process is initiated, allowing analysts to understand potentially malicious behaviors hidden within seemingly benign commands.
  ### Investigation Steps
  - Examine EDR alerts for recent PowerShell process executions and filter for those that match the identified command line patterns.
  - Review the associated process trees in the EDR to determine if any suspicious child processes were spawned from the initial PowerShell command.
  - Check Windows event logs for any related security events (e.g., Event ID 4688) that document the creation of new processes, particularly focusing on the user account that initiated the commands.
  - If leveraging cloud services, investigate logs from AWS, GCP, or Azure for any indications of abnormal PowerShell script activity, especially within instances hosting Windows environments.
