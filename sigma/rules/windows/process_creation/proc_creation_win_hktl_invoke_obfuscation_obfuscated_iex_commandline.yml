title: Invoke-Obfuscation Obfuscated IEX Invocation
id: 4bf943c6-5146-4273-98dd-e958fd1e3abf
status: test
description: Detects all variations of obfuscated powershell IEX invocation code generated
  by Invoke-Obfuscation framework from the following code block
references:
- https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888
author: 'Daniel Bohannon (@Mandiant/@FireEye), oscd.community'
date: 2019-11-08
modified: 2022-12-31
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
  - CommandLine|re: '\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\['
  - CommandLine|re: '\$ShellId\[\s*\d{1,3}\s*\]\s*\+\s*\$ShellId\['
  - CommandLine|re: '\$env:Public\[\s*\d{1,3}\s*\]\s*\+\s*\$env:Public\['
  - CommandLine|re: '\$env:ComSpec\[(\s*\d{1,3}\s*,){2}'
  - CommandLine|re: '\*mdr\*\W\s*\)\.Name'
  - CommandLine|re: '\$VerbosePreference\.ToString\('
  - CommandLine|re: '\[String\]\s*\$VerbosePreference'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule detects obfuscated PowerShell commands using the Invoke-Obfuscation framework, which is a tool designed to help generate obfuscated PowerShell code for testing security products and enhancing the concealment of malicious activity. The rule focuses on specific command-line patterns indicative of obfuscation techniques, such as those using `$PSHome`, `$ShellId`, and environment variables like `$env:Public` and `$env:ComSpec`. By monitoring process creation logs for these obfuscated command invocations, this rule identifies potential attempts at defense evasion by rogue actors. The associated MITRE ATT&CK tactics include "Defense Evasion" (T1027) and "Execution" (T1059.001), which relate to the execution of code while circumventing detection methodologies.
  ### Investigation Steps
  - **Review Process Creation Logs:** Check for the originating process that triggered the alert by examining Windows Security logs for the specific time of the flagged command execution.
  - **Examine Command-Line Parameters:** Analyze the command-line parameters in the alert to assess the context and intention behind the obfuscated PowerShell invocation.
  - **Correlate with EDR Events:** Investigate related EDR events that may expose further details, such as file actions or network connections made by the processes involved.
  - **Check Network Activity:** Utilize proxy or firewall logs to see if any abnormal outbound connections were made after the execution of the obfuscated command, which could indicate data exfiltration or further compromise.
  ### Prioritization
  This alert is classified as high severity because obfuscated PowerShell commands often signify malicious intent aimed at bypassing security controls and executing unauthorized actions in the environment. Timely investigation is crucial to prevent potential breaches.
  ### Blind Spots and Assumptions
  This rule may not fire if the obfuscation used falls outside the defined regex patterns or if PowerShell command execution is performed through non-standard methods not captured by the process_creation logs. Additionally, environments that implement stringent application control measures may limit PowerShell usage, potentially reducing the rule's efficacy. It is assumed that the detection capability relies heavily on PowerShell's visibility into command-line activity, which could be disabled or heavily restricted by system administrators.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
