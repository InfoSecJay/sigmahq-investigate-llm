title: Suspicious Use of CSharp Interactive Console
id: a9e416a8-e613-4f8b-88b8-a7d1d1af2f61
status: test
description: Detects the execution of CSharp interactive console by PowerShell
references:
- https://redcanary.com/blog/detecting-attacks-leveraging-the-net-framework/
author: Michael R. (@nahamike01)
date: 2020-03-08
modified: 2022-07-14
tags:
- attack.execution
- attack.t1127
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith: '\csi.exe'
    ParentImage|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    - '\powershell_ise.exe'
    OriginalFileName: 'csi.exe'
  condition: selection
falsepositives:
- Possible depending on environment. Pair with other factors such as net connections,
  command-line args, etc.
level: high
notes: |
  n
  ### Technical Context
  The Sigma rule titled "Suspicious Use of CSharp Interactive Console" is designed to detect the execution of the CSharp Interactive (CSI) Console, which can be misused by attackers leveraging PowerShell as a means for execution. Specifically, this rule looks for process creation logs where the image name ends with `csi.exe`, particularly noting instances where it was spawned by a parent process such as `powershell.exe`, `pwsh.exe`, or `powershell_ise.exe`. Additional indicators such as the original file name being `csi.exe` help ensure precision in detection. This rule correlates to the MITRE ATT&CK tactic for execution, particularly technique T1127 ("Trusted Developer Utilities") which describes the exploitation of trusted development tools to execute malicious code within a target environment. Analysts can expect to interact primarily with Windows process creation logs to discern these activities.
  ### Investigation Steps
  - **Validate the Process:** Review the process creation event in the EDR to verify the occurrence of `csi.exe` execution and examine its parent process to confirm it stemmed from a PowerShell instance.
  - **Check Network Activity:** Use network connection logs to determine if the CSharp Interactive Console made any outbound connections that could indicate data exfiltration or command and control communication.
  - **Examine Command-Line Arguments:** Investigate the command-line arguments associated with the processes to identify potentially malicious actions or suspicious parameters passed to the CSI console.
  - **Review User Context:** Analyze user behavior and context by checking logs from Windows Security to assess whether the user executing the command has a legitimate reason for using the CSharp Interactive Console.
  ### Prioritization
  The severity of this alert is high due to the potential misuse of trusted scripting environments for executing malicious code, which could directly lead to significant data breaches or system compromises if exploited by an adversary.
  ### Blind Spots and Assumptions
  This detection rule may not fire in environments where the misuse of `csi.exe` is a common and legitimate activity by developers, leading to potential false positives. Additionally, if the attackers choose to rename the executable or utilize different spawning processes that do not fall under `powershell.exe`, the detection may fail. Another consideration is the reliance on proper event logging setup; if process creation logging is not enabled or is misconfigured, legitimate activities could be overlooked entirely.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
