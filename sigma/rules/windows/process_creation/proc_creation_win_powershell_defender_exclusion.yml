title: Powershell Defender Exclusion
id: 17769c90-230e-488b-a463-e05c08e9d48f
related:
- id: c1344fa2-323b-4d2e-9176-84b4d4821c88
  type: similar
status: test
description: Detects requests to exclude files, folders or processes from Antivirus
  scanning using PowerShell cmdlets
references:
- https://learn.microsoft.com/en-us/defender-endpoint/configure-process-opened-file-exclusions-microsoft-defender-antivirus
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md
- https://twitter.com/AdamTheAnalyst/status/1483497517119590403
author: Florian Roth (Nextron Systems)
date: 2021-04-29
modified: 2022-05-12
tags:
- attack.defense-evasion
- attack.t1562.001
logsource:
  category: process_creation
  product: windows
detection:
  selection1:
    CommandLine|contains:
    - 'Add-MpPreference '
    - 'Set-MpPreference '
  selection2:
    CommandLine|contains:
    - ' -ExclusionPath '
    - ' -ExclusionExtension '
    - ' -ExclusionProcess '
    - ' -ExclusionIpAddress '
  condition: all of selection*
falsepositives:
- Possible Admin Activity
- Other Cmdlets that may use the same parameters
level: medium
notes: |
  ### Technical Context
  The "Powershell Defender Exclusion" detection rule is designed to identify potentially malicious activities related to the use of PowerShell cmdlets that modify the behavior of Microsoft Defender Antivirus (MDA). Specifically, it looks for instances where the `Add-MpPreference` or `Set-MpPreference` commands are called with parameters that specify exclusions for files, folders, processes, or other objects from being scanned by the antivirus software. By monitoring the CommandLine field for known cmdlets and exclusion parameters, the rule flags activities that could indicate an attempt to bypass security controls, a tactic often employed by adversaries to facilitate malicious activities undetected. This rule is associated with the MITRE ATT&CK tactic "Defense Evasion" and the technique T1562.001, which outlines methods for circumventing security measures.
  In implementing this detection, the primary technical data sources leveraged include the CommandLine parameters captured during process creation logs. This analysis takes place in environments where Windows is the operating system, and focuses on any instances involving the PowerShell application, which is typically utilized by both administrators for legitimate tasks and attackers for nefarious purposes.
  ### Investigation Steps
  - **Review EDR Alerts**: Use the Endpoint Detection and Response (EDR) tool to investigate alerts triggered by the detection rule and correlate the PowerShell command execution with additional telemetry, such as process parent-child relationships.
  - **Analyze Process Creation Logs**: Examine Windows Security logs to identify the context around the PowerShell execution, focusing on user accounts that initiated the commands for any signs of misuse or unauthorized access.
  - **Consult Antivirus Logs**: Check the logs from Microsoft Defender to see if the exclusions were applied successfully and whether they correspond to legitimate administrative actions or potentially malicious intent.
  - **Inspect Recent Activity**: Look for other indicators of compromise within the network, such as unusual network connections or file modifications, that may correlate with the suspicious use of exclusion cmdlets in PowerShell.
  ### Prioritization
  The severity level for this alert is considered medium because while legitimate administrative activities may warrant the use of exclusion commands, an unexpected or unauthorized invocation in sensitive environments raises concerns about potential bypassing of security measures that could lead to a successful compromise.
  ### Blind Spots and Assumptions
  This rule may have blind spots, particularly if administrators routinely manage exclusions for legitimate reasons, which could result in false positives. Furthermore, adversaries might employ obfuscation techniques or use non-standard PowerShell commands to avoid triggering this detection rule, such as creating scripts that remove file exclusions indirectly. Additionally, this rule assumes that PowerShell logging is enabled and appropriately configured across enterprise environments, which may not consistently be the case.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
