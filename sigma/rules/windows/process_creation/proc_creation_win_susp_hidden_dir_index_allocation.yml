title: Potential Hidden Directory Creation Via NTFS INDEX_ALLOCATION Stream - CLI
id: 0900463c-b33b-49a8-be1d-552a3b553dae
related:
- id: a8f866e1-bdd4-425e-a27a-37619238d9c7
  type: similar
status: test
description: |
  Detects command line containing reference to the "::$index_allocation" stream, which can be used as a technique to prevent access to folders or files from tooling such as "explorer.exe" or "powershell.exe"
references:
- https://twitter.com/pfiatde/status/1681977680688738305
- https://soroush.me/blog/2010/12/a-dotty-salty-directory-a-secret-place-in-ntfs-for-secret-files/
- https://sec-consult.com/blog/detail/pentesters-windows-ntfs-tricks-collection/
- https://github.com/redcanaryco/atomic-red-team/blob/5c3b23002d2bbede3c07e7307165fc2a235a427d/atomics/T1564.004/T1564.004.md#atomic-test-5---create-hidden-directory-via-index_allocation
- https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/c54dec26-1551-4d3a-a0ea-4fa40f848eb3
author: Nasreddine Bencherchali (Nextron Systems), Scoubi (@ScoubiMtl)
date: 2023-10-09
tags:
- attack.defense-evasion
- attack.t1564.004
logsource:
  product: windows
  category: process_creation
detection:
  selection:
        # Note: Both Sysmon and ETW are unable to log the presence of such stream in the CommandLine. But EDRs such as Crowdstrike are able to using for example CMD console history. Users are advised to test this before usage
    CommandLine|contains: '::$index_allocation'
  condition: selection
falsepositives:
- Unlikely
level: medium
notes: |
  ### Technical Context
  This detection rule targets the creation of hidden directories in NTFS file systems via a specific command line invocation that includes the "::$INDEX_ALLOCATION" stream. This stream manipulation can obscure files and directories from standard file management tools such as Windows Explorer and PowerShell, enabling adversaries to hide malicious files. The rule specifically looks for process creation logs that contain this distinct command line pattern. Because tools like Sysmon and ETW may not capture the presence of such streams within the command line effectively, this rule leverages EDR solutions capable of monitoring command history, like CrowdStrike, to enhance detection reliability. The detection maps to the MITRE ATT&CK technique T1564.004, under the tactic of Defense Evasion, emphasizing the stealthy methods used by attackers to avoid detection.
  ### Investigation Steps
  - **Review the Process Creation Logs:** Examine the process creation logs from the EDR to identify the initiating process and any parent processes associated with the detection. This will help in understanding the context of the command execution.
  - **Analyze Command Line Parameters:** Investigate the complete command line parameters used for the process which triggered the alert. This will clarify whether the suspicious command indeed invoked the "::$INDEX_ALLOCATION" stream.
  - **Correlate with Other Security Tools:** Check logs from additional security tools such as Antivirus or Intrusion Detection Systems (IDS) for any related anomalies or warnings that occurred around the same time as the detected command execution.
  - **Investigate Potential Data Exfiltration or Lateral Movement:** Since this technique is often used for hiding files, monitor for any unusual file access or network connections that might indicate data exfiltration or lateral movement attempts following this event.
  ### Prioritization
  Given the medium severity level of this alert, it suggests that while this technique is unusual for typical users and may symbolize an attempt to hide malicious activity, it does not definitively indicate an active compromise. Therefore, it requires a thorough investigation to rule out false positives and assess the potential risk.
  ### Blind Spots and Assumptions
  This rule assumes that the EDR being utilized is capable of logging command line entries that invoke the "::$INDEX_ALLOCATION" stream. However, if the command is executed within certain contexts or applications that do not retain command history, such as certain scripting environments or patched versions of cmd.exe, the detection may not trigger. Additionally, adversaries may employ obfuscation techniques or other hidden command layers to evade detection, potentially causing this rule to miss relevant activities.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
