title: UAC Bypass Tools Using ComputerDefaults
id: 3c05e90d-7eba-4324-9972-5d7f711a60a8
status: test
description: Detects tools such as UACMe used to bypass UAC with computerdefaults.exe
  (UACMe 59)
references:
- https://github.com/hfiref0x/UACME
author: Christian Burkard (Nextron Systems)
date: 2021-08-31
modified: 2024-12-01
tags:
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1548.002
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    IntegrityLevel:
    - 'High'
    - 'System'
    - 'S-1-16-16384'         # System
    - 'S-1-16-12288'         # High
    Image: 'C:\Windows\System32\ComputerDefaults.exe'
  filter:
    ParentImage|contains:
    - ':\Windows\System32'
    - ':\Program Files'
  condition: selection and not filter
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule focuses on detecting potential UAC (User Account Control) bypass attempts using the utility `ComputerDefaults.exe`. UAC bypass methods are commonly employed by adversaries seeking to elevate their privileges without alerting the user or the system. The rule identifies instances where `ComputerDefaults.exe` is executed with high integrity levels, including System and High integrity (specifically the SIDs S-1-16-16384 and S-1-16-12288), which suggest that it might be part of an attack vector such as those seen with tools like UACMe. By monitoring process creation logs within Windows, this rule scrutinizes the execution of `ComputerDefaults.exe` to flag any abnormal parent-child relationships that diverge from standard executables typically residing in the `C:\Windows\System32` or `C:\Program Files\` directories. The detection aligns with the MITRE ATT&CK technique T1548.002, which is centered around exploitation avenues to bypass user privilege restrictions.
  ### Investigation Steps
  - **Check Process Details:** Use EDR tools to capture the execution context of `ComputerDefaults.exe`, reviewing associated command-line arguments and integrity levels to understand the nature of the execution.
  - **Analyze Parent Process:** Investigate the parent process of `ComputerDefaults.exe` to confirm if it originates from legitimate sources. Cross-reference this with known safe applications to identify anomalies.
  - **Review Related Events:** Examine Windows Event Logs (Security, Sysmon) for other events correlated to the time of the detection, focusing on account logins, lateral movement attempts, or other privileges elevation logs in the vicinity.
  - **Conduct a Threat Hunt:** Utilize threat intelligence feeds and internal logs to identify any ongoing campaigns or known IOCs (Indicators of Compromise) that may be associated with UAC bypass techniques to see if related activity exists in the environment.
  ### Prioritization
  The severity of this alert is high, given that UAC bypass techniques often indicate malicious intent and can be a precursor to privilege escalation, which compromises sensitive systems within the enterprise.
  ### Blind Spots and Assumptions
  One recognized blind spot is the potential for legitimate applications that might use `ComputerDefaults.exe` for benign purposes, leading to false positives. Additionally, if the legitimate execution source for `ComputerDefaults.exe` is altered or masked by anomaly patterns (e.g., via process hollowing or system modification), the rule may fail to trigger. Engineers should understand that robust monitoring for context and correlation with user behavior is critical to minimizing false negatives and affirmatively recognizing exploit attempts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
