title: HackTool - Jlaive In-Memory Assembly Execution
id: 0a99eb3e-1617-41bd-b095-13dc767f3def
status: test
description: Detects the use of Jlaive to execute assemblies in a copied PowerShell
references:
- https://jstnk9.github.io/jstnk9/research/Jlaive-Antivirus-Evasion-Tool
- https://web.archive.org/web/20220514073704/https://github.com/ch2sh/Jlaive
author: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)
date: 2022-05-24
modified: 2023-02-22
tags:
- attack.execution
- attack.t1059.003
logsource:
  product: windows
  category: process_creation
detection:
  parent_selection:
    ParentImage|endswith: '\cmd.exe'
    ParentCommandLine|endswith: '.bat'
  selection1:
    Image|endswith: '\xcopy.exe'
    CommandLine|contains|all:
    - 'powershell.exe'
    - '.bat.exe'
  selection2:
    Image|endswith: '\xcopy.exe'
    CommandLine|contains|all:
    - 'pwsh.exe'
    - '.bat.exe'
  selection3:
    Image|endswith: '\attrib.exe'
    CommandLine|contains|all:
    - '+s'
    - '+h'
    - '.bat.exe'
  condition: parent_selection and (1 of selection*)
falsepositives:
- Unknown
level: medium
notes: |
  n
  ### Technical Context
  The Sigma rule titled "HackTool 
  - Jlaive In-Memory Assembly Execution" is designed to detect potentially malicious behaviors associated with the Jlaive tool, which is utilized for executing assemblies in memory through PowerShell. This detection rule identifies process creation events where the execution of specific command-line patterns occurs in combination with particular parent processes, such as `cmd.exe` and `.bat` scripts. Key technical data sources leveraged include Windows Security logs, specifically the process creation logs that capture details about newly created processes, along with command-line parameters. The alerts generated by this rule are aligned with the MITRE ATT&CK tactical framework, specifically under the `Execution` tactic and the `T1059.003` technique, which pertains to PowerShell.
  ### Investigation Steps
  - **Review the Alert Details:** Start by examining the details of the alert within the SIEM, identifying affected systems and timestamps to contextualize the event.
  - **Correlate with PowerShell Logs:** Utilize EDR tools to search for related PowerShell logs around the alert time, focusing on any unusual execution patterns or commands that could indicate scripting attacks.
  - **Analyze Parent Process Activity:** Investigate the parent process (`cmd.exe` or `.bat`) to determine how these scripts were initiated, checking for any remote execution or lateral movement indicators.
  - **Assess System for Artifacts:** Conduct a thorough search of the endpoints involved for artifacts associated with Jlaive or any modified .bat files that may have been used in conjunction with the detected execution.
  ### Prioritization
  This alert should be considered of medium severity due to the potential use of a known tool for executing in-memory attacks, which can bypass traditional antivirus solutions and compromises host integrity.
  ### Blind spots and Assumptions
  This rule may not fire if the adversary uses alternative scripting methods or different parent processes that do not correspond with the defined criteria. Additionally, if an attacker uses obfuscation techniques in command-line arguments or executes the tool from a different environment where logging is insufficient, detection may fail. It is assumed that all relevant logging for process creation is enabled and that existing security controls are in place to monitor PowerShell script execution behaviors.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
