title: Suspicious Provlaunch.EXE Child Process
id: f9999590-1f94-4a34-a91e-951e47bedefd
related:
- id: 7f5d1c9a-3e83-48df-95a7-2b98aae6c13c     # CLI Generic
  type: similar
- id: 2a4b3e61-9d22-4e4a-b60f-6e8f0cde6f25     # CLI Registry
  type: similar
- id: 7021255e-5db3-4946-a8b9-0ba7a4644a69     # Registry
  type: similar
status: test
description: Detects suspicious child processes of "provlaunch.exe" which might indicate
  potential abuse to proxy execution.
references:
- https://lolbas-project.github.io/lolbas/Binaries/Provlaunch/
- https://twitter.com/0gtweet/status/1674399582162153472
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-08-08
tags:
- attack.defense-evasion
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection_parent:
    ParentImage|endswith: '\provlaunch.exe'
  selection_child:
  - Image|endswith:
    - '\calc.exe'
    - '\cmd.exe'
    - '\cscript.exe'
    - '\mshta.exe'
    - '\notepad.exe'
    - '\powershell.exe'
    - '\pwsh.exe'
    - '\regsvr32.exe'
    - '\rundll32.exe'
    - '\wscript.exe'
  - Image|contains:
    - ':\PerfLogs\'
    - ':\Temp\'
    - ':\Users\Public\'
    - '\AppData\Temp\'
    - '\Windows\System32\Tasks\'
    - '\Windows\Tasks\'
    - '\Windows\Temp\'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "Suspicious Provlaunch.EXE Child Process" is designed to detect potential misuse of the `provlaunch.exe` process on Windows systems. `provlaunch.exe` is a legitimate Microsoft process used for handling device provisioning processes, but it can be exploited by adversaries to execute malicious child processes. This rule specifically looks for instances where `provlaunch.exe` serves as a parent process to various potentially malicious child processes, such as `cmd.exe`, `powershell.exe`, and others known for their use in scripting and command execution. 
  The detection relies on the telemetry from process creation logs collected via Sysmon, which enables deep visibility into process activities. By monitoring the relationships between parent and child processes, the rule helps identify suspicious activity indicative of tactics and techniques associated with Defense Evasion (MITRE ATT&CK Tactic: Defense Evasion; Technique: T1218). Therefore, this rule serves as a crucial checkpoint to flag anomalies in process hierarchies that could signify nefarious intent.
  ### Investigation Steps
  - **Check the Process Tree:** Analyze the process tree for instances where `provlaunch.exe` initiated the suspicious child processes. Use EDR tools to visualize the parent-child relationships for better context.
  - **Examine Command-Line Arguments:** Review command-line arguments associated with the detected child processes. This can provide insights into the actions being performed, especially for scripts or executables that could be benign in normal circumstances.
  - **Review Event Logs:** Correlate alerts with Windows Event Logs, particularly focusing on Security and Sysmon logs, to find any other associated activity that may indicate lateral movement or further exploitation.
  - **Scan for Additional Indicators:** Utilize threat intelligence and malware analysis platforms to scan for any known malicious signatures associated with the identified child processes, especially if they exhibit odd behavior or executions patterns.
  ### Prioritization
  Given the high severity level of this alert, its firing suggests a potential compromise as it may indicate an adversary's attempt to execute scripts or programs that exploit legitimate Windows functionalities for malicious purposes. Such activity warrants immediate investigation to mitigate any potential data breaches or malicious operations.
  ### Blind Spots and Assumptions
  This rule may not fire in situations where the `provlaunch.exe` process is not involved in the attack, or if the malicious processes are spawned by other legitimate processes less commonly monitored. Additionally, if an adversary uses obfuscation techniques or renames known tools to evade detection, the rule might fail to capture the activity. The efficiency of detection is also dependent on the deployment and proper configuration of Sysmon across all endpoints, as misconfigurations can lead to gaps in the visibility of process creation events.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
