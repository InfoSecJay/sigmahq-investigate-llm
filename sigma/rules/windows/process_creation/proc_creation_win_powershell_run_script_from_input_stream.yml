title: Run PowerShell Script from Redirected Input Stream
id: c83bf4b5-cdf0-437c-90fa-43d734f7c476
status: test
description: Detects PowerShell script execution via input stream redirect
references:
- https://github.com/LOLBAS-Project/LOLBAS/blob/4db780e0f0b2e2bb8cb1fa13e09196da9b9f1834/yml/LOLUtilz/OSBinaries/Powershell.yml
- https://twitter.com/Moriarty_Meng/status/984380793383370752
author: Moriarty Meng (idea), Anton Kutepov (rule), oscd.community
date: 2020-10-17
modified: 2021-11-27
tags:
- attack.defense-evasion
- attack.execution
- attack.t1059
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    CommandLine|re: '\s-\s*<'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule "Run PowerShell Script from Redirected Input Stream" is designed to detect suspicious PowerShell script execution that utilizes input stream redirection, a technique often employed by threat actors to conceal their malicious activities. When legitimate commands are executed, a common practice involves redirecting input from files or other streams; however, adversaries can exploit this process to obfuscate the actual content or command being executed. The rule specifically looks for process creation events in which either `powershell.exe` or `pwsh.exe` (the PowerShell core version) is executed, and the command line includes an input redirection syntax such as `
  - <`. 
  This detection relies on telemetry from Windows process creation logs, which provide insights into command-line parameters and the executables invoked. By correlating this data with the MITRE ATT&CK techniques under the tactics of Defense Evasion (T1202) and Execution (T1059), security analysts can identify potential unauthorized PowerShell activity indicative of an attack pattern commonly associated with data exfiltration, lateral movement, or other malicious behaviors.
  ### Investigation Steps
  - **Verify the Command Line Arguments:** Review the command line arguments associated with the detected PowerShell process. Ensure they align with expected operations in your environment and look for any unusual parameters or redirections.
  - **Analyze Process Tree:** Use your EDR tool to investigate the parent and child processes spawned by `powershell.exe` or `pwsh.exe`. This can help to determine the initial source of the script and any subsequent actions taken by the process.
  - **Check for Indicators of Compromise:** Cross-reference the behavior with known indicators of compromise (IOCs) or malicious PowerShell scripts available in threat intelligence feeds. This step can assist in confirming or ruling out active intrusions.
  - **Consult Proxy and Network Logs:** Evaluate network traffic and proxy logs for outbound connections initiated by the PowerShell process. Determine if any suspicious or unauthorized communication attempts were made during the detection timeframe.
  ### Prioritization
  Alerts triggered by this rule are categorized as high severity due to the potential for active exploitation of PowerShell, a legitimate but powerful administrative tool commonly used by attackers for executing malicious payloads and evading detection.
  ### Blind Spots and Assumptions
  This rule may not fire if the adversary employs alternate scripting methods or command execution tools outside of PowerShell, such as CMD or other scripting languages. Additionally, it assumes that process creation logs are being generated and collected consistently; if logging is insufficient or if PowerShell activity is truly legitimate, the detection may be ineffective. Analysts should also be aware that potential evasion techniques, such as invoking PowerShell from within other programs or using trusted executables, could hinder detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
