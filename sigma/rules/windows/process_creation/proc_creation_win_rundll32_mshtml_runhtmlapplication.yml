title: Mshtml.DLL RunHTMLApplication Suspicious Usage
id: 4782eb5a-a513-4523-a0ac-f3082b26ac5c
related:
- id: 9f06447a-a33a-4cbe-a94f-a3f43184a7a3
  type: obsolete
- id: 73fcad2e-ff14-4c38-b11d-4172c8ac86c7
  type: obsolete
status: test
description: |
  Detects execution of commands that leverage the "mshtml.dll" RunHTMLApplication export to run arbitrary code via different protocol handlers (vbscript, javascript, file, http...)
references:
- https://twitter.com/n1nj4sec/status/1421190238081277959
- https://hyp3rlinx.altervista.org/advisories/MICROSOFT_WINDOWS_DEFENDER_TROJAN.WIN32.POWESSERE.G_MITIGATION_BYPASS_PART2.txt
- http://hyp3rlinx.altervista.org/advisories/MICROSOFT_WINDOWS_DEFENDER_DETECTION_BYPASS.txt
author: Nasreddine Bencherchali (Nextron Systems),  Florian Roth (Nextron Systems),
  Josh Nickels, frack113, Zaw Min Htun (ZETA)
date: 2022-08-14
modified: 2024-02-23
tags:
- attack.defense-evasion
- attack.execution
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains|all:
    - '\..\'
    - 'mshtml'
    CommandLine|contains:
    - '#135'
    - 'RunHTMLApplication'
  condition: selection
falsepositives:
- Unlikely
level: high
notes: |
  ### Technical Context
  The Sigma rule titled **"Mshtml.DLL RunHTMLApplication Suspicious Usage"** is designed to detect potential misuse of the `mshtml.dll` library, which can be exploited to execute arbitrary code through various protocol handlers (e.g., VBScript, JavaScript). The rule specifically flags command-line activity that invokes the `RunHTMLApplication` function within `mshtml.dll` accompanied by suspicious patterns, such as the presence of `..\` paths or the special character sequence `#135`. This is crucial as cyber adversaries often use such methods to bypass security mechanisms and execute payloads stealthily.
  The primary technical sources involved in this detection include **process creation logs** from Windows, particularly focusing on the command-line arguments of newly created processes to identify malicious behavior indicative of command execution tactics. This rule is aligned with the MITRE ATT&CK framework, specifically under the tactics of defense evasion (TA0005) and execution (TA0002).
  ### Investigation Steps
  - **Review Process Creation Logs:** Examine EDR data for recent process creation events that match the command line patterns specified in the rule. Check for execution context and whether the process originated from a legitimate source.
  - **Analyze Command-Line Arguments:** Investigate the full command-line arguments for the flagged processes to determine if any legitimate applications are being manipulated or if the investigation leads to suspicious file paths or parameters.
  - **Inspect Network Connections:** Utilize network detection tools (NDR) to analyze any associated outbound connections that may have been initiated by the flagged processes, particularly those targeting unusual ports or protocols.
  - **Correlate with AV Alerts:** Check any associated alerts from endpoint protection solutions (AV) to see if there have been prior warnings about the behaviors of the identified processes. This can provide contextual insight into potential false positives or confirmed threats.
  ### Prioritization
  Given the high severity level assigned to this alert, it indicates a significant risk to the enterprise environment, as exploitation of `mshtml.dll` can lead to arbitrary code execution and potential compromise of sensitive systems.
  ### Blind Spots and Assumptions
  - **False Negative Risks:** The rule may not fire in environments where strict user permissions and application whitelisting are applied effectively, as legitimate usages may not invoke flagged command lines.
  - **Obfuscated Techniques:** Adversaries may employ techniques to obfuscate command-line parameters to bypass detection or use alternative execution paths that do not trigger this rule, thus limiting its effectiveness.
  - **Environment Variability:** The rule's context assumes that the handling of `mshtml.dll` is consistent across environments. Variations in software deployments, custom applications, or legitimate uses of `RunHTMLApplication` could yield false positives.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
