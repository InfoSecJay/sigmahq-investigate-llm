title: Suspicious Shells Spawn by Java Utility Keytool
id: 90fb5e62-ca1f-4e22-b42e-cc521874c938
status: test
description: Detects suspicious shell spawn from Java utility keytool process (e.g.
  adselfservice plus exploitation)
references:
- https://redcanary.com/blog/intelligence-insights-december-2021
- https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html
author: Andreas Hunkeler (@Karneades)
date: 2021-12-22
modified: 2023-01-21
tags:
- attack.initial-access
- attack.persistence
- attack.privilege-escalation
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\keytool.exe'
    Image|endswith:
    - '\cmd.exe'
    - '\sh.exe'
    - '\bash.exe'
    - '\powershell.exe'
    - '\pwsh.exe'
    - '\schtasks.exe'
    - '\certutil.exe'
    - '\whoami.exe'
    - '\bitsadmin.exe'
    - '\wscript.exe'
    - '\cscript.exe'
    - '\scrcons.exe'
    - '\regsvr32.exe'
    - '\hh.exe'
    - '\wmic.exe'
    - '\mshta.exe'
    - '\rundll32.exe'
    - '\forfiles.exe'
    - '\scriptrunner.exe'
    - '\mftrace.exe'
    - '\AppVLP.exe'
    - '\systeminfo.exe'
    - '\reg.exe'
    - '\query.exe'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potentially suspicious activity involving the Java utility `keytool.exe`, which may be exploited to execute malicious commands through various shell processes. `Keytool` is a command-line utility used for managing keys and certificates; however, attackers can exploit it to execute arbitrary code, thereby gaining initial access, persisting within a system, or achieving privilege escalation. The rule specifically looks for the creation of common shell processes (e.g., `cmd.exe`, `powershell.exe`, `bash.exe`) that are spawned as children of `keytool.exe`. The detection leverages Windows process creation logs to identify these relationships, with the intent to highlight actions that deviate from normal operational behavior.
  The MITRE ATT&CK framework categorizes this rule under tactics related to Initial Access (TA0001), Persistence (TA0030), and Privilege Escalation (TA0004). By correlating the parent process with known command-line utilities, responders can focus their analysis on potentially malicious activities that bypass traditional security measures.
  ### Investigation Steps
  - **Collect Process Creation Events:** Utilize EDR tools to monitor process creation logs focusing on the parent-child relationship between `keytool.exe` and the suspicious shells. Note the timestamps and user context for better analysis.
  - **Analyze Command-Line Arguments:** Investigate the command-line parameters of the child processes spawned from `keytool.exe` for any suspicious commands or scripts that may indicate malicious intent.
  - **Review Associated Network Activity:** Check logs from the NDR to identify any outbound connections that correspond with the suspicious shell activity, especially connections to known malicious IP addresses or domains.
  - **Correlate with User Access Logs:** Examine Windows Security logs to understand user actions leading up to the event, checking for any anomalies or escalation of privileges that may provide context for the shell activity.
  ### Prioritization
  The alert is considered high severity due to the potential for significant impact on the systemâ€™s integrity, including unauthorized access, data exfiltration, or lateral movement within the enterprise environment.
  ### Blind Spots and Assumptions
  This rule may not fire if the `keytool.exe` process executes without creating a shell or if benign scripts mistakenly use similar command-line patterns. Additionally, if adversaries employ known process names but manipulate the underlying logic (e.g., through process injection), the detection may be evaded. It is assumed that monitoring for process creation is enabled and that no significant log loss occurs that could obscure evidence of exploitation.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
