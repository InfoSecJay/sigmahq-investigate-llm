title: Visual Studio NodejsTools PressAnyKey Arbitrary Binary Execution
id: a20391f8-76fb-437b-abc0-dba2df1952c6
related:
- id: 65c3ca2c-525f-4ced-968e-246a713d164f
  type: similar
status: test
description: Detects child processes of Microsoft.NodejsTools.PressAnyKey.exe that
  can be used to execute any other binary
references:
- https://twitter.com/mrd0x/status/1463526834918854661
- https://gist.github.com/nasbench/a989ce64cefa8081bd50cf6ad8c491b5
author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
date: 2022-01-11
modified: 2023-04-11
tags:
- attack.execution
- attack.defense-evasion
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\Microsoft.NodejsTools.PressAnyKey.exe'
  condition: selection
falsepositives:
- Legitimate use by developers as part of NodeJS development with Visual Studio Tools
level: medium
notes: |
  ### Technical Context
  This Sigma rule detects potentially malicious behavior related to the execution of arbitrary binaries through the Microsoft.NodejsTools.PressAnyKey.exe parent process. Specifically, it looks for child processes spawned by the Node.js tools in Visual Studio, which could indicate an attacker has used this legitimate application to execute unauthorized binaries. The primary data sources leveraged for this detection include process creation logs, which allow for the examination of process hierarchies and command-line arguments, and Windows Event Logs, particularly focusing on entries related to application and system activities. This rule aligns with the MITRE ATT&CK technique T1218 (Signed Binary Proxy Execution), as it captures a scenario where a legitimate parent process is exploited for execution evasion.
  ### Investigation Steps
  - **Check Process Tree:** Use EDR tools to review the process tree hierarchy for any instances of Microsoft.NodejsTools.PressAnyKey.exe that have spawned unusual child processes. Look for unexpected executables or processes that deviate from typical development activities.
    
  - **Examine Command-Line Arguments:** Analyze command-line arguments associated with the detected child processes to identify any flags or instructions that could suggest nefarious intentions. Pay close attention to execution paths that do not align with standard applications.
  - **Review User Context:** Determine the user account under which the suspicious processes are running. If the execution is performed under a privileged account or an account that has no legitimate reason to invoke Node.js tools, this raises a red flag.
  - **Cross-reference Activity Logs:** Investigate additional telemetry such as network connections, DNS queries, or file system changes that may correlate with the alert. Utilize proxy and VPN logs to trace any external communications linked to the detected processes.
  ### Prioritization
  The alert has been categorized as medium severity because, while it may indicate something benign in a development environment, the use of Visual Studio Node.js tools for arbitrary binary execution could signal an active attempt at evasion or other malicious activities. Prompt investigation is necessary to ascertain whether legitimate development processes are being subverted.
  ### Blind Spots and Assumptions
  This rule assumes that the Microsoft.NodejsTools.PressAnyKey.exe is being used legitimately within the organization for development purposes. Thus, false positives may occur if developers routinely execute various binaries as part of their workflow. Additionally, the rule may fail to fire if the malicious process spawns directly from another process not covered by this rule or if the parent process is altered to avoid detection. Adversaries might also use legitimate applications or signed binaries to create backdoors without triggering this detection, necessitating a comprehensive approach to monitoring.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
