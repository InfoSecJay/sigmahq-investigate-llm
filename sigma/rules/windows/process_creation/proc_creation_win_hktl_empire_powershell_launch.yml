title: HackTool - Empire PowerShell Launch Parameters
id: 79f4ede3-402e-41c8-bc3e-ebbf5f162581
status: test
description: Detects suspicious powershell command line parameters used in Empire
references:
- https://github.com/EmpireProject/Empire/blob/c2ba61ca8d2031dad0cfc1d5770ba723e8b710db/lib/common/helpers.py#L165
- https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/lib/modules/powershell/persistence/powerbreach/deaduser.py#L191
- https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/lib/modules/powershell/persistence/powerbreach/resolver.py#L178
- https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/data/module_source/privesc/Invoke-EventVwrBypass.ps1#L64
author: Florian Roth (Nextron Systems)
date: 2019-04-20
modified: 2023-02-21
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains:
    - ' -NoP -sta -NonI -W Hidden -Enc '
    - ' -noP -sta -w 1 -enc '
    - ' -NoP -NonI -W Hidden -enc '
    - ' -noP -sta -w 1 -enc'
    - ' -enc  SQB'
    - ' -nop -exec bypass -EncodedCommand '
  condition: selection
falsepositives:
- Other tools that incidentally use the same command line parameters
level: high
notes: |
  ### Technical Context
  This detection rule targets suspicious PowerShell command-line parameters associated with the Empire framework, a known post-exploitation tool often used by adversaries in penetration tests and real-world attacks. The rule triggers alerts when specific encoded command-line arguments are detected, particularly variations that include parameters designed to obfuscate execution or bypass security controls, such as `-NoP`, `-NonI`, `-W Hidden`, and `-EncodedCommand`. The primary technical data source involved is the process creation logs from Windows, which capture the command-line arguments associated with every process launched on the system. By focusing on these parameters, the rule aims to identify potential use of hacking tools and techniques in alignment with the MITRE ATT&CK technique T1059.001 (PowerShell), particularly during malicious activity where PowerShell is exploited for execution of unauthorized commands.
  ### Investigation Steps
  - **Review Process Creation Logs:** Investigate the specific process creation events in the EDR tool to determine the context in which the PowerShell command was executed, including the user account and the parent process.
  - **Analyze Command-Line Arguments:** Use the command-line parameters detected in the alert to look for patterns or known malicious indicators using the PowerShell logs and correlate those findings with other security events.
  - **Check for File and Network Activities:** Look into any file creations, modifications, and network connections spawned by the suspicious PowerShell processes to identify further malicious activity, leveraging Sysmon network connection logs if available.
  - **Examine User Behavior:** Assess the user behavior associated with the execution of PowerShell commands, including login history and other activities, to determine if the user is authorized to execute such commands or if it indicates a potential compromise.
  ### Prioritization
  Given that PowerShell is a powerful scripting language that can be leveraged to execute a variety of malicious commands, alerts generated by this rule are classified as high severity. The presence of suspicious command-line parameters typically indicates potential adversary activity requiring immediate investigation.
  ### Blind Spots and Assumptions
  This rule may not fire if the malicious actors use alternate command-line arguments that do not match the specified patterns or if they obfuscate their commands further. Additionally, benign applications that incidentally utilize similar command-line parameters could lead to false positives. Consequently, analysts should be aware that legitimate administrative tasks may also trigger this rule, and extra scrutiny of context is essential to avoid unnecessary investigations.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
