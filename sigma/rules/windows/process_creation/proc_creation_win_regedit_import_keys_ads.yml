title: Imports Registry Key From an ADS
id: 0b80ade5-6997-4b1d-99a1-71701778ea61
related:
- id: 73bba97f-a82d-42ce-b315-9182e76c57b1
  type: similar
status: test
description: Detects the import of a alternate datastream to the registry with regedit.exe.
references:
- https://lolbas-project.github.io/lolbas/Binaries/Regedit/
- https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f
author: Oddvar Moe, Sander Wiebing, oscd.community
date: 2020-10-12
modified: 2024-03-13
tags:
- attack.t1112
- attack.defense-evasion
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\regedit.exe'
  - OriginalFileName: 'REGEDIT.EXE'
  selection_cli:
    CommandLine|contains:
    - ' /i '
    - '.reg'
    CommandLine|re: ':[^ \\]'
  filter:
    CommandLine|contains|windash:
    - ' -e '
    - ' -a '
    - ' -c '
  condition: all of selection_* and not filter
fields:
- ParentImage
- CommandLine
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule detects the import of a registry key from an Alternate Data Stream (ADS) using `regedit.exe`, which can be a technique employed by attackers for defense evasion or to hide malicious configurations. The rule leverages process creation logs to monitor the execution of `regedit.exe`, looking for command-line arguments that indicate the importing of registry entries from a `.reg` file. It specifically targets command lines containing the `/i` flag along with a filename ending in `.reg`, which signifies an attempt to import a registry configuration. The MITRE ATT&CK tactic identified by this rule corresponds to **Defense Evasion (T1112)**. By focusing on this specific command line input, the rule aims to catch potential misuse of registry edits that may not appear during routine monitoring but could serve malicious purposes.
  ### Investigation Steps
  - **Review Process Creation Logs:** Examine process creation events for `regedit.exe` to determine whether the invocation is legitimate or potentially malicious. Pay special attention to the command-line arguments used.
  - **Check Registry Modifications:** Utilize Windows registry logs or tools to see which keys were modified during the detected `regedit.exe` execution. This will help assess the extent of the potential changes made.
  - **Analyze Process Parentage:** Track the parent process of the `regedit.exe` invocation to understand its context. This can help identify whether a known good or bad process initiated the registry modification.
  - **Correlate with Endpoint Activity:** Use EDR tools to analyze endpoint behavior before and after the detected action. Look for any anomalies that could indicate broader malicious activity surrounding the registry import.
  ### Prioritization
  The high severity level is assigned to this alert as importing registry keys, particularly from an ADS, can indicate sophisticated techniques for hiding malicious activities and can lead to significant impacts on system integrity if left unchecked.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where `regedit.exe` is invoked without using the `/i` flag or when its command-line arguments are obfuscated or altered, allowing adversaries to bypass detection. Additionally, if an adversary employs alternative methods for registry manipulation that do not involve `regedit.exe`, the rule will not trigger. Finally, if users have legitimate reasons to import registry keys frequently, this could lead to false positives in high-noise environments.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
