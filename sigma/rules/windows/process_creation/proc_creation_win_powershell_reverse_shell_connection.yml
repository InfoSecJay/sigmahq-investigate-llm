title: Potential Powershell ReverseShell Connection
id: edc2f8ae-2412-4dfd-b9d5-0c57727e70be
status: stable
description: Detects usage of the "TcpClient" class. Which can be abused to establish
  remote connections and reverse-shells. As seen used by the Nishang "Invoke-PowerShellTcpOneLine"
  reverse shell and other.
references:
- https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/
- https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/
- https://github.com/samratashok/nishang/blob/414ee1104526d7057f9adaeee196d91ae447283e/Shells/Invoke-PowerShellTcpOneLine.ps1
author: FPT.EagleEye, wagga, Nasreddine Bencherchali (Nextron Systems)
date: 2021-03-03
modified: 2023-04-05
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  selection_cli:
    CommandLine|contains|all:
    - ' Net.Sockets.TCPClient'
    - '.GetStream('
    - '.Write('
  condition: all of selection_*
falsepositives:
- In rare administrative cases, this function might be used to check network connectivity
level: high
notes: |
  ### Technical Context
  This Sigma rule detects potential reverse shell connections initiated via PowerShell by specifically monitoring the creation of processes that utilize the "TcpClient" class to establish remote connections. The rule focuses on detecting common patterns found in command-line parameters, specifically looking for the "Net.Sockets.TCPClient" class along with calls to `.GetStream(` and `.Write(`, which signify the activity of establishing a TCP connection and sending data over the stream. This leverages process creation logs sourced from Windows Sysmon, particularly concerning `PowerShell.EXE` and `pwsh.dll`. 
  PowerShell reverse shells often utilize these methods to bypass security measures and exfiltrate sensitive data or establish unauthorized remote access to systems. This detection is relevant to the MITRE ATT&CK tactics of Execution (TA0002) and specifically targets the technique T1059.001, which pertains to command and scripting interpreter (PowerShell).
  ### Investigation Steps
  - **Examine PowerShell Activity:** Check EDR telemetry for the execution of PowerShell processes and analyze the command-line arguments to identify if the "TcpClient" class is invoked.
  - **Review Related Events:** Investigate Windows Security logs for account authentication events, particularly for unusual logon patterns or accounts that should not typically execute PowerShell scripts.
  - **Analyze Network Connections:** Use the NDR or firewall logs to identify any outbound network connections initiated from the affected endpoint, particularly to unfamiliar IP addresses or unusual ports.
  - **Cross-reference with Threat Intelligence:** Validate against known threat actor profiles, such as the activities associated with the HAFNIUM group, referenced in the relevant links, to ascertain if the detected pattern aligns with known malicious behavior.
  ### Prioritization
  This alert is classified as high severity because potential reverse shell connections can indicate a serious breach of security, allowing for significant unauthorized access and control over the compromised system.
  ### Blind Spots and Assumptions
  This rule may not trigger in environments where PowerShell usage is heavily integrated into administrative tasks, leading to potential false positives in rare legitimate cases. Additionally, skilled adversaries may evade detection by modifying how they invoke PowerShell or by using obfuscated scripts. The rule relies on specific command-line patterns, which may allow advanced threats to use alternative methods or arguments to establish connections without triggering the alert.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
