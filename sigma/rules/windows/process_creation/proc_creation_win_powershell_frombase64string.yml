title: Base64 Encoded PowerShell Command Detected
id: e32d4572-9826-4738-b651-95fa63747e8a
status: test
description: Detects usage of the "FromBase64String" function in the commandline which
  is used to decode a base64 encoded string
references:
- https://gist.github.com/Neo23x0/6af876ee72b51676c82a2db8d2cd3639
author: Florian Roth (Nextron Systems)
date: 2020-01-29
modified: 2023-01-26
tags:
- attack.t1027
- attack.defense-evasion
- attack.t1140
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains: '::FromBase64String('
  condition: selection
falsepositives:
- Administrative script libraries
level: high
notes: |
  ### Technical Context
  The "Base64 Encoded PowerShell Command Detected" Sigma rule is designed to identify the usage of the `FromBase64String` function in PowerShell command-lines. This function is often employed by threat actors to decode base64-encoded strings, typically concealing malicious commands or payloads within an innocuous-looking string to evade detection. By monitoring process creation logs, the rule inspects the command-line inputs of newly spawned PowerShell processes, specifically targeting instances where base64 decoding is initiated, which can be an indicator of an attempted cyberattack following the MITRE ATT&CK techniques T1027 (Obfuscated Files or Information) and T1059.001 (PowerShell).
  When the detection rule is triggered, it looks into Windows process creation logs to find any command-line entries that contain `::FromBase64String(`. The rule utilizes telemetry from Sysmon or Windows Security logs to catch potential misuse of PowerShell, providing incident responders with critical insights into potentially malicious activities associated with obfuscated scripts, enabling swift threat response and investigation.
  ### Investigation Steps
  - **Check Process Creation Logs:** Examine the process creation logs in Sysmon or Windows Security to identify details about the PowerShell process, such as its parent process, user account, and time of execution.
  - **Analyze Command-Line Parameters:** Investigate the command-line parameters of the flagged PowerShell instance for further obfuscation or suspicious arguments that may indicate malicious behavior.
  - **Correlate with EDR Data:** Utilize EDR tools to retrieve additional context on the affected system, looking for other related alerts or behaviors (e.g., lateral movement or suspicious network connections) to assess the scope of the potential compromise.
  - **Search for Base64 Patterns:** If applicable, perform a reverse lookup of the decoded base64 strings (if available) to determine if they contain any known malicious indicators or signatures within threat intelligence platforms.
  ### Prioritization
  Given the high severity level of this alert, it indicates a potential compromise involving obfuscation techniques commonly used in advanced persistent threats (APTs) and exploits in the enterprise environment, warranting immediate investigation.
  ### Blind Spots and Assumptions
  This rule may not detect situations where users legitimately utilize base64 decoding in administrative scripts, thus resulting in false positives. Furthermore, the rule relies on effective logging configuration and may fail to trigger if logging is not enabled for process creation or if the PowerShell instances are executed under alternate or restricted environments. Additionally, attackers may employ custom or less common methods of obfuscation that do not invoke the identified function, thereby evading detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
