title: Lolbin Runexehelper Use As Proxy
id: cd71385d-fd9b-4691-9b98-2b1f7e508714
status: test
description: Detect usage of the "runexehelper.exe" binary as a proxy to launch other
  programs
references:
- https://twitter.com/0gtweet/status/1206692239839289344
- https://lolbas-project.github.io/lolbas/Binaries/Runexehelper/
author: frack113
date: 2022-12-29
tags:
- attack.defense-evasion
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\runexehelper.exe'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Lolbin Runexehelper Use As Proxy" is designed to detect the use of the "runexehelper.exe" binary to launch other programs in a potentially malicious manner. This technique is associated with the MITRE ATT&CK tactic of Defense Evasion (T1218), where adversaries may leverage living-off-the-land binaries (Lolbins) to disguise their activities and evade detection mechanisms. The rule focuses on Windows process creation logs, specifically assessing instances where the parent process is identified as "runexehelper.exe". This allows for the detection of unauthorized or suspicious executable launches that stem from this binary, serving as a proxy to initiate other functions. 
  The monitoring of this activity relies specifically on process creation telemetry derived from operational systems, providing insights into the command-line execution context. By evaluating the relationships between processes, the rule aims to reveal potentially harmful behaviors that could indicate attempts to bypass security measures.
  ### Investigation Steps
  - **Assess Process Creation Logs:** Review the process creation logs for any entries that indicate a parent process of "runexehelper.exe". Check child processes that have been spawned to understand the chain of execution.
    
  - **Analyze Command-Line Arguments:** Inspect the command-line arguments associated with the processes launched by "runexehelper.exe". Look for unusual or suspicious parameters that could indicate malicious intent.
    
  - **Cross-reference with EDR Alerts:** Use your EDR solution to gather additional context on the processes spawned from "runexehelper.exe". Investigate any alerts correlating with those processes for further indicators of compromise.
    
  - **Check Network Connections:** Examine network logs for outbound connections initiated by the processes launched via "runexehelper.exe". Identify any suspicious IP addresses or domains that could relate to data exfiltration or C2 (Command and Control) communications.
  ### Prioritization
  The severity level is classified as medium because the detection of this behavior suggests potential evasion tactics that could facilitate malicious activities, warranting prompt investigation to prevent further exploitation.
  ### Blind Spots and Assumptions
  This rule may not fire if the binary "runexehelper.exe" has been renamed or if adversaries utilize alternative methods for evasion that do not involve this specific executable. Additionally, if EDR policies are not configured to capture detailed process creation events or if there are limitations in logging, critical indicators of compromise might be missed. It is assumed that the execution of "runexehelper.exe" in isolation is benign; however, context is crucial as inherent trust in typical system processes can lead to oversight.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
