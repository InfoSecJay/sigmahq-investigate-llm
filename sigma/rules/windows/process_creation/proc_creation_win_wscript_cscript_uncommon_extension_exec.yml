title: Cscript/Wscript Uncommon Script Extension Execution
id: 99b7460d-c9f1-40d7-a316-1f36f61d52ee
status: test
description: Detects Wscript/Cscript executing a file with an uncommon (i.e. non-script)
  extension
references:
- Internal Research
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-05-15
modified: 2023-06-19
tags:
- attack.execution
- attack.t1059.005
- attack.t1059.007
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - OriginalFileName:
    - 'wscript.exe'
    - 'cscript.exe'
  - Image|endswith:
    - '\wscript.exe'
    - '\cscript.exe'
  selection_extension:
    CommandLine|contains:
            # Note: add additional potential suspicious extension
            # We could specify the "//E:" flag to avoid typos by admin. But since that's prone to blind spots via the creation of assoc it's better not to include it
    - '.csv'
    - '.dat'
    - '.doc'
    - '.gif'
    - '.jpeg'
    - '.jpg'
    - '.png'
    - '.ppt'
    - '.txt'
    - '.xls'
    - '.xml'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule detects potential misuse of scripting engines (Wscript and Cscript) in Windows environments by identifying instances where these executables are used to run files with uncommon extensions, such as .csv, .dat, .doc, and others typically not associated with script execution. The analysis is primarily based on process creation logs, focusing on the command-line parameters associated with the invocations of 'wscript.exe' and 'cscript.exe'. By monitoring these executables along with the specified uncommon file extensions, we can identify potential malicious behavior that may signify exploitation attempts or unauthorized script execution. This detection aligns with the MITRE ATT&CK techniques T1059.005 (Command and Scripting Interpreter: Visual Basic) and T1059.007 (Command and Scripting Interpreter: Scripting Languages), highlighting the execution of scripts in an anomalous context.
  ### Investigation Steps
  - **Review Process Creation Logs:** Examine the detailed process creation events stemming from the identified instances of 'wscript.exe' or 'cscript.exe', paying attention to the command-line parameters used.
  - **Analyze the Files Executed:** Determine the origin and purpose of the files with uncommon extensions that were executed. Investigate if they are legitimate business files or potentially harmful.
  - **Check for Additional Indicators:** Conduct an additional review on related network activity, correlating the timing of the alert with any unusual outbound network connections from the affected endpoint.
  - **Utilize EDR for Contextual Details:** Leverage Endpoint Detection and Response (EDR) solutions to fetch historical data about the process invocations, including parent process details, to understand the broader context of the execution.
  ### Prioritization
  The alert has a high severity level due to the potential for malicious actors to exploit script engines in executing unauthorized scripts. Given the nature of the file extensions being used, there is a significant risk of data exfiltration or system compromise.
  ### Blind Spots and Assumptions
  This detection rule may not fire if an adversary uses other methods to run scripts, such as leveraging PowerShell or Windows Management Instrumentation (WMI). Additionally, if legitimate applications are repurposed to run files with uncommon extensions or if association settings for file types are modified, it could lead to false negatives. It's also essential to ensure that all script execution techniques are monitored comprehensively, as attackers may employ various evasion tactics.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
