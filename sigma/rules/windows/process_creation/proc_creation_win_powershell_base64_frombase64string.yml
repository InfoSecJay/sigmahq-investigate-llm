title: PowerShell Base64 Encoded FromBase64String Cmdlet
id: fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c
status: test
description: Detects usage of a base64 encoded "FromBase64String" cmdlet in a process
  command line
references:
- Internal Research
author: Florian Roth (Nextron Systems)
date: 2019-08-24
modified: 2023-04-06
tags:
- attack.defense-evasion
- attack.t1140
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
  - CommandLine|base64offset|contains: '::FromBase64String'
        # UTF-16 LE
  - CommandLine|contains:
    - 'OgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcA'
    - 'oAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnA'
    - '6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZw'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "PowerShell Base64 Encoded FromBase64String Cmdlet" is designed to detect potentially malicious activity involving PowerShell commands that utilize the Base64 encoded `FromBase64String` cmdlet. Adversaries often employ this technique to obfuscate their command payloads, making it challenging for traditional security measures to identify them. This rule specifically looks for indications of the `FromBase64String` in the command line parameters of newly created processes, particularly focusing on encoded data patterns typically associated with initial payloads in attacks. The primary technical data sources leveraged include process creation logs, which capture the command-line arguments provided to executables when they are launched, aiding in the identification of malicious usages of PowerShell. The rule correlates with the MITRE ATT&CK tactics of `Defense Evasion` and `Execution`, specifically techniques T1140 (Use of Base64 Encoding) and T1059.001 (PowerShell), enhancing the visibility of advanced threat actors obscuring their operations.
  ### Investigation Steps
  - **Review Process Details:** Utilize your EDR solution to examine the process creation logs associated with the alert, focusing on the command line that triggered this rule for any suspicious activity or patterns.
  - **Analyze Parent Processes:** Investigate the parent process of the detected PowerShell command to ascertain the context of execution and identify any unusual or suspicious activity leading up to the commandâ€™s execution.
  - **Correlate with Network Activity:** Cross-reference network connection logs to determine if any external communication is being initiated by the PowerShell process, which may indicate command-and-control (C2) activity or data exfiltration.
  - **Examine Sysmon Logs:** Query Sysmon logs for any related events, such as network connections or file modifications that coincide with the time of the alert, to gather a broader context of the potential threat.
  ### Prioritization
  This alert is categorized as high severity due to the malicious use of PowerShell and obfuscation techniques, which are commonly employed in advanced persistent threats (APTs) and therefore require immediate investigation to mitigate potential breaches.
  ### Blind Spots and Assumptions
  The rule may not fire in environments where organizations have implemented strict execution policies or configurations that prevent unauthorized PowerShell commands from being executed. Additionally, the use of alternate encoding schemes or changes to the command-line format that obfuscate the `FromBase64String` invocation could similarly bypass detection. It is also assumed that all legitimate uses of this command are known and understood by the organization, which may not always be the case, leading to false negatives in detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
