title: Potential AMSI Bypass Using NULL Bits
id: 92a974db-ab84-457f-9ec0-55db83d7a825
related:
- id: fa2559c8-1197-471d-9cdd-05a0273d4522
  type: similar
status: test
description: Detects usage of special strings/null bits in order to potentially bypass
  AMSI functionalities
references:
- https://github.com/r00t-3xp10it/hacking-material-books/blob/43cb1e1932c16ff1f58b755bc9ab6b096046853f/obfuscation/simple_obfuscation.md#amsi-bypass-using-null-bits-satoshi
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-04
modified: 2023-05-09
tags:
- attack.defense-evasion
- attack.t1562.001
logsource:
  product: windows
  category: process_creation
detection:
  selection:
    CommandLine|contains:
    - "if(0){{{0}}}' -f $(0 -as [char]) +"
    - "#<NULL>"
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The Sigma rule "Potential AMSI Bypass Using NULL Bits" is designed to detect potential evasion techniques targeting the Anti-Malware Scan Interface (AMSI). Specifically, it identifies the usage of special strings, including NULL bits, that malicious actors may use to bypass AMSI functionalities, a critical security feature in Windows that facilitates the detection of malicious scripts and code. The detection leverages process creation logs, specifically monitoring the `CommandLine` parameter for suspicious patterns indicative of attempts to obfuscate or manipulate code execution.
  In a typical attack scenario, an adversary may employ methods that involve inserting NULL bytes into command lines or PowerShell expressions to avoid detection by AMSI. This situation adheres to the MITRE ATT&CK tactic of "Defense Evasion" and specifically leverages the technique `T1562.001` (AMSI Bypass). The rule aims to provide visibility into these potentially harmful practices, enabling the SOC team to initiate a timely investigation when alerts are triggered.
  ### Investigation Steps
  - **Review EDR Process Logs:** Examine the EDR for the process creation logs associated with the alerted event, focusing on the command line used and any parent processes that initiated it.
  - **Correlate with Windows Security Logs:** Look at the Windows Security logs for related events, such as successful or failed logins, and correlate them with the timestamp of the detected activity.
  - **Analyze Network Traffic:** Utilize NDR to assess outbound connections made by the process in question, identifying any suspicious communications or data exfiltration attempts.
  - **Inspect PowerShell Logs:** Investigate PowerShell logs for additional context around the command executed, particularly any involved scripts or commands that may have utilized obfuscation techniques.
  ### Prioritization
  The severity of this alert is medium due to the significant implications of successful AMSI bypass attempts. In an enterprise environment, such activity could indicate attempts to execute malicious payloads without detection, necessitating immediate attention from incident responders.
  ### Blind Spots and Assumptions
  This detection rule assumes that the telemetry from process creation logs is adequately ingested and not filtered out by prior security measures. There may be instances where legitimate applications utilize similar command lines for benign purposes, leading to potential false positives. Additionally, if an attacker uses different obfuscation techniques or modifies the command lines in ways not captured by this rule, the detection may fail. Other methods to bypass AMSI that do not utilize the specified NULL bit techniques will not trigger this alert.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
