title: Suspicious PowerShell Invocation From Script Engines
id: 95eadcb2-92e4-4ed1-9031-92547773a6db
status: test
description: Detects suspicious powershell invocations from interpreters or unusual
  programs
references:
- https://www.securitynewspaper.com/2017/03/20/attackers-leverage-excel-powershell-dns-latest-non-malware-attack/
author: Florian Roth (Nextron Systems)
date: 2019-01-16
modified: 2023-01-05
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith:
    - '\wscript.exe'
    - '\cscript.exe'
    Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  filter_health_service:
    CurrentDirectory|contains: '\Health Service State\'
  condition: selection and not 1 of filter_*
falsepositives:
- Microsoft Operations Manager (MOM)
- Other scripts
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Suspicious PowerShell Invocation From Script Engines" identifies potentially malicious use of PowerShell executed from common script interpreters, specifically `wscript.exe` and `cscript.exe`. These interpreters are often used for running Windows Script Host (WSH) scripts, which may be exploited by attackers to execute malicious PowerShell commands stealthily. The rule works by monitoring process creation logs, looking for instances where `powershell.exe` or `pwsh.exe` is invoked as a child process of either `wscript.exe` or `cscript.exe`. This behavior corresponds to the MITRE ATT&CK technique T1059.001 (Command and Scripting Interpreter: PowerShell), indicating that a script engine is being used to launch PowerShell, which can be a red flag for credential harvesting, data exfiltration, or other malicious actions.
  In a typical enterprise environment, this detection is crucial given the increasing prevalence of PowerShell exploitation in cyberattacks. Attackers frequently employ such techniques to execute scripts that can evade traditional security measures. By utilizing Windows Event Logs, particularly from the process creation category, the rule captures the necessary data to identify these suspicious invocations effectively.
  ### Investigation Steps
  - **Review Process Creation Logs:** Examine the Windows Event Logs for any entries related to process creation that correspond to the execution of PowerShell initiated by the script interpreters. This can help confirm if the alert is valid.
  - **Analyze Parent Process Relationships:** Use your EDR tool to visualize and trace the process tree of suspicious PowerShell invocations, noting the context of parent and child processes to ascertain whether they relate to legitimate operations.
  - **Examine Command-Line Arguments:** Look for command-line parameters associated with the PowerShell instances to check for common indicators of compromise, such as suspicious URLs or encoded commands that could signal malicious activity.
  - **Utilize Threat Intelligence:** Cross-reference any identified IP addresses or domains in the command strings against threat intelligence feeds to determine the association with known malicious activities or actors.
  ### Prioritization
  This alert is classified as medium severity since it signals unusual behavior that could indicate an early stage of a cyberattack. Investigation is warranted to ensure that the PowerShell invocation is not being used for malicious purposes, especially in a corporate network where PowerShell is often abused by attackers.
  ### Blind Spots and Assumptions
  One major assumption of this rule is that the malicious actors will invoke PowerShell via `wscript.exe` or `cscript.exe`, while more sophisticated attacks may bypass this by using other legitimate tools or direct process invocation techniques. Additionally, this rule may not fire if scripts are executed using other common methods outside the monitored interpreters. The possibility of false negatives exists if legitimate applications or benign scripts utilize these methods, emphasizing the need for context in each alert to differentiate between legitimate use and potential threats.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
