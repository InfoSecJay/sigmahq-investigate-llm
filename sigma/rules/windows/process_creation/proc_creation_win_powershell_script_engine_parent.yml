title: Suspicious PowerShell Invocation From Script Engines
id: 95eadcb2-92e4-4ed1-9031-92547773a6db
status: test
description: Detects suspicious powershell invocations from interpreters or unusual
  programs
references:
- https://www.securitynewspaper.com/2017/03/20/attackers-leverage-excel-powershell-dns-latest-non-malware-attack/
author: Florian Roth (Nextron Systems)
date: 2019-01-16
modified: 2023-01-05
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith:
    - '\wscript.exe'
    - '\cscript.exe'
    Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  filter_health_service:
    CurrentDirectory|contains: '\Health Service State\'
  condition: selection and not 1 of filter_*
falsepositives:
- Microsoft Operations Manager (MOM)
- Other scripts
level: medium
notes: |
  ### Technical Context
  This Sigma rule aims to detect suspicious PowerShell invocations initiated by script engines such as `wscript.exe` and `cscript.exe`, which are Windows scripting hosts. The rule analyzes process creation logs to identify instances where PowerShell (either `powershell.exe` or `pwsh.exe`) is executed as a child process of these script engines. A key characteristic of this detection is that it excludes alerts triggered by processes running in specific directories, like the "Health Service State," which is associated with legitimate operational activity. By monitoring these relationships between parent and child processes, the detection identifies potentially harmful usage of PowerShell that may indicate a non-malicious script being leveraged in an attack scenario.
  ### Investigation Steps
  - Review the process creation logs in your EDR solution to identify all instances of `wscript.exe` and `cscript.exe` that have spawned PowerShell processes.
  - Analyze the command-line arguments associated with these PowerShell invocations to determine if they exhibit suspicious characteristics or match known malicious patterns.
  - Examine related activity in proxy logs to identify any external communication initiated by the PowerShell processes, which could indicate data exfiltration or command and control (C2) connections.
  - Cross-reference alerts with known false positives, such as Microsoft Operations Manager activities, to ensure proper context is considered before escalating or taking further action.
