title: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION
id: e9f55347-2928-4c06-88e5-1a7f8169942e
status: test
description: Detects Obfuscated Powershell via VAR++ LAUNCHER
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task27)
author: Timur Zinniatullin, oscd.community
date: 2020-10-13
modified: 2022-11-16
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
        # CommandLine|re: '(?i)&&set.*(\{\d\}){2,}\\\"\s+?\-f.*&&.*cmd.*\/c' # FPs with |\/r
        # Example 1: CMD /C"sET KUR=Invoke-Expression (New-Object Net.WebClient).DownloadString&&Set MxI=C:\wINDowS\sYsWow64\winDOWspoWERSheLl\V1.0\PowerShelL.EXe ${ExEcut`IoN`cON`TExT}.\"invo`kEcoMm`A`ND\".( \"{2}{1}{0}\" -f 'pt','EscRi','INvOk' ).Invoke( ( .( \"{0}{1}\" -f'D','IR' ) ( \"{0}{1}\"-f'ENV:kU','R')).\"vAl`Ue\" )&& CMD /C%mXI%"
        # Example 2: c:\WiNDOWS\sYSTEm32\CmD.exE /C "sEt DeJLz=Invoke-Expression (New-Object Net.WebClient).DownloadString&&set yBKM=PoWERShelL -noeX ^^^&(\"{2}{0}{1}\"-f '-ItE','m','seT') ( 'V' + 'a'+ 'RiAblE:z8J' +'U2' + 'l' ) ([TYpE]( \"{2}{3}{0}{1}\"-f 'e','NT','e','NViRONM' ) ) ; ^^^& ( ( [sTrIng]${VE`Rbo`SepReFER`Ence})[1,3] + 'X'-joIN'')( ( (.('gI') ('V' + 'a' + 'RIAbLe:z8j' + 'u2' +'l' ) ).vALUe::( \"{2}{5}{0}{1}{6}{4}{3}\" -f 'IRo','Nm','GETE','ABlE','I','nv','enTVAr').Invoke(( \"{0}{1}\"-f'd','ejLz' ),( \"{1}{2}{0}\"-f'cEss','P','RO') )) )&& c:\WiNDOWS\sYSTEm32\CmD.exE /C %ybkm%"
    CommandLine|contains|all:
    - '&&set'
    - 'cmd'
    - '/c'
    - '-f'
    CommandLine|contains:
    - '{0}'
    - '{1}'
    - '{2}'
    - '{3}'
    - '{4}'
    - '{5}'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION" is designed to detect obfuscated PowerShell commands that utilize the 'Invoke-Expression' method, often leveraged by adversaries to execute malicious scripts while evading detection. The rule specifically looks for patterns in command-line arguments that indicate an attempt to use obfuscation techniques. This includes searches for common elements like "&&set", "cmd", and "/c", along with specific placeholders that suggest command reconstruction (e.g., '{0}', '{1}', '{2}'). The primary source of data for this detection is process creation logs on Windows systems, which capture command-line inputs associated with new processes. This allows the detection rule to recognize suspicious behavior indicative of command injection or execution of hidden PowerShell scripts.
  ### Investigation Steps
  - Review the process creation logs in your EDR solution to identify instances where the command-line input matches the identified patterns in the Sigma rule.
  - Use the SIEM to correlate the detected alerts with other security events, such as network logs or endpoint activities, that could provide context for the observed behavior.
  - Check the antivirus logs to determine if any suspicious activities triggered a response or alert and investigate any quarantined items related to PowerShell execution.
  - Analyze the proxy logs to look for any unusual outbound connections initiated by the suspected process, as this could indicate data exfiltration following the PowerShell execution.
