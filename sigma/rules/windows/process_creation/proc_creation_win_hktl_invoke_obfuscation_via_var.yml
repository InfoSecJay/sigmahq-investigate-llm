title: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION
id: e9f55347-2928-4c06-88e5-1a7f8169942e
status: test
description: Detects Obfuscated Powershell via VAR++ LAUNCHER
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task27)
author: Timur Zinniatullin, oscd.community
date: 2020-10-13
modified: 2022-11-16
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
        # CommandLine|re: '(?i)&&set.*(\{\d\}){2,}\\\"\s+?\-f.*&&.*cmd.*\/c' # FPs with |\/r
        # Example 1: CMD /C"sET KUR=Invoke-Expression (New-Object Net.WebClient).DownloadString&&Set MxI=C:\wINDowS\sYsWow64\winDOWspoWERSheLl\V1.0\PowerShelL.EXe ${ExEcut`IoN`cON`TExT}.\"invo`kEcoMm`A`ND\".( \"{2}{1}{0}\" -f 'pt','EscRi','INvOk' ).Invoke( ( .( \"{0}{1}\" -f'D','IR' ) ( \"{0}{1}\"-f'ENV:kU','R')).\"vAl`Ue\" )&& CMD /C%mXI%"
        # Example 2: c:\WiNDOWS\sYSTEm32\CmD.exE /C "sEt DeJLz=Invoke-Expression (New-Object Net.WebClient).DownloadString&&set yBKM=PoWERShelL -noeX ^^^&(\"{2}{0}{1}\"-f '-ItE','m','seT') ( 'V' + 'a'+ 'RiAblE:z8J' +'U2' + 'l' ) ([TYpE]( \"{2}{3}{0}{1}\"-f 'e','NT','e','NViRONM' ) ) ; ^^^& ( ( [sTrIng]${VE`Rbo`SepReFER`Ence})[1,3] + 'X'-joIN'')( ( (.('gI') ('V' + 'a' + 'RIAbLe:z8j' + 'u2' +'l' ) ).vALUe::( \"{2}{5}{0}{1}{6}{4}{3}\" -f 'IRo','Nm','GETE','ABlE','I','nv','enTVAr').Invoke(( \"{0}{1}\"-f'd','ejLz' ),( \"{1}{2}{0}\"-f'cEss','P','RO') )) )&& c:\WiNDOWS\sYSTEm32\CmD.exE /C %ybkm%"
    CommandLine|contains|all:
    - '&&set'
    - 'cmd'
    - '/c'
    - '-f'
    CommandLine|contains:
    - '{0}'
    - '{1}'
    - '{2}'
    - '{3}'
    - '{4}'
    - '{5}'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  This detection rule identifies sophisticated obfuscation tactics used in PowerShell scripts, particularly those utilizing the VAR++ launcher technique. It analyzes process creation logs for command-line arguments containing specific pattern sequences associated with obfuscated commands, including the use of environment variable assignments and redirection techniques to conceal malicious actions. By leveraging indicators such as `cmd /c`, `&&set`, and PowerShell parameters like `-f`, the rule raises alerts when it detects potential attempts at executing malware via convoluted command strings. This corresponds to the MITRE ATT&CK tactics of Defense Evasion (T1027) and Execution (T1059.001), making it relevant for spotting malicious actors attempting to bypass security measures.
  ### Investigation Steps
  - **Review EDR Alerts:** Start by correlating the generated alert with endpoint detection and response (EDR) logs to understand the context of the process creation event, reviewing the associated command-line arguments for signs of obfuscation.
    
  - **Examine Process Tree:** Check the process tree in your EDR for parent-child relationships among processes to identify if the command was invoked by legitimate applications or malicious scripts, noting any unusual parent processes.
    
  - **Analyze PowerShell Logs:** Utilize Windows Event Logs for PowerShell (e.g., Event ID 4104 for script block logging) to pull detailed logging insights that may reveal further obfuscated PowerShell commands or unusual script execution patterns.
    
  - **Inspect Network Activity:** Investigate any outbound connections generated during the time of the alert, especially any associated with unusual domains or IP addresses that might be linked to command-and-control (C2) activities.
  ### Prioritization
  The alert is categorized as high severity because obfuscated PowerShell usage is often indicative of advanced threat actors attempting to evade detection while executing potentially harmful payloads, warranting immediate investigation.
  ### Blind Spots and Assumptions
  This rule may not fire in environments where PowerShell script execution policy is set to restrict or block unauthorized scripts. Additionally, sophisticated adversaries may employ custom obfuscation techniques that are not covered by this rule, such as encoded commands, which might go undetected. False positives may also arise from benign applications that utilize similar command patterns, highlighting the need for corroborating evidence from other logs.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
