title: Potential DLL Injection Or Execution Using Tracker.exe
id: 148431ce-4b70-403d-8525-fcc2993f29ea
status: test
description: Detects potential DLL injection and execution using "Tracker.exe"
references:
- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Tracker/
author: 'Avneet Singh @v3t0_, oscd.community'
date: 2020-10-18
modified: 2023-01-09
tags:
- attack.defense-evasion
- attack.t1055.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\tracker.exe'
  - Description: 'Tracker'
  selection_cli:
    CommandLine|contains:
    - ' /d '
    - ' /c '
  filter_msbuild1:
    CommandLine|contains: ' /ERRORREPORT:PROMPT '
  filter_msbuild2:
        # Example:
        #   GrandparentImage: C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\MSBuild.exe
        #   ParentCommandLine: "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe" /nologo /nodemode:1 /nodeReuse:true /low:false
        #   CommandLine: "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\Tracker.exe" @"C:\Users\user\AppData\Local\Temp\tmp05c7789bc5534838bf96d7a0fed1ffff.tmp" /c "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\bin\HostX86\x64\Lib.exe"
    ParentImage|endswith:
    - '\Msbuild\Current\Bin\MSBuild.exe'
    - '\Msbuild\Current\Bin\amd64\MSBuild.exe'
  condition: all of selection_* and not 1 of filter_*
falsepositives:
- Unknown
level: medium
notes: |
  n
  ### Technical Context
  This detection rule is designed to identify potentially malicious activity involving `Tracker.exe`, a binary associated with Microsoft's build tools. The rule looks for instances where `Tracker.exe` is executed, particularly focusing on specific command-line parameters that may indicate the use of DLL injection techniques. In particular, the detection mechanism utilizes process creation logs, examining both the image name and command-line parameters to distinguish between legitimate and potentially malicious invocations. The rule falls under the MITRE ATT&CK framework with the tactic of "Defense Evasion" and the technique T1055.001, which specifically pertains to process injection.
  In detecting this risky behavior, the rule considers the process hierarchy, mandating that `Tracker.exe` must be a child process of `MSBuild.exe`, a common legitimate parent in development environments. The inclusion of filters further refines the results by filtering out certain benign command-line options that do not typically align with malicious activity.
  ### Investigation Steps
  - **Review Process Creation Logs:** Examine Windows Event Logs for process creation events to identify instances where `Tracker.exe` was launched, paying close attention to the command-line arguments.
  - **Analyze Parent Process:** Utilize EDR tools to investigate the parent process (`MSBuild.exe`) that spawned `Tracker.exe` to ascertain if the behavior aligns with legitimate build operations.
  - **Check Network Activity:** Inspect network connection logs for any unusual outbound connections associated with the instances of `Tracker.exe`, which could indicate data exfiltration or communication with command-and-control servers.
  - **Correlate with Other Alerts:** Cross-reference any alerts triggered by EDR or AV tools during the same timeframe to assess if there are additional indicators of compromise related to the detected execution.
  ### Prioritization
  This alert has been assigned a medium severity level as the execution of `Tracker.exe` with suspicious parameters could indicate a sophisticated attack vector targeting development environments. Response teams should prioritize investigations in high-value or sensitive project environments where such tools are utilized.
  ### Blind Spots and Assumptions
  The rule may not fire in environments where `Tracker.exe` is legitimately used with benign command-line arguments, which could lead to a significant number of false negatives. Additionally, if an attacker modifies the behavior of legitimate binaries or utilizes alternative methods for DLL injection not covered by the selected command-line patterns, the rule may fail to detect malicious activity. Analysts should remain vigilant to the evolving techniques of adversaries who might bypass detection through legitimate processes or lesser-known alternatives.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
