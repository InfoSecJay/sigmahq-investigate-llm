title: Potential AMSI Bypass Via .NET Reflection
id: 30edb182-aa75-42c0-b0a9-e998bb29067c
related:
- id: 4f927692-68b5-4267-871b-073c45f4f6fe
  type: obsolete
status: test
description: Detects Request to "amsiInitFailed" that can be used to disable AMSI
  Scanning
references:
- https://s3cur3th1ssh1t.github.io/Bypass_AMSI_by_manual_modification/
- https://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/
author: Markus Neis, @Kostastsale
date: 2018-08-17
modified: 2023-02-03
tags:
- attack.defense-evasion
- attack.t1562.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
  - CommandLine|contains|all:
    - 'System.Management.Automation.AmsiUtils'
    - 'amsiInitFailed'
  - CommandLine|contains|all:
    - '[Ref].Assembly.GetType'
    - 'SetValue($null,$true)'
    - 'NonPublic,Static'
  condition: selection
falsepositives:
- Unlikely
level: high
notes: |
  ### Technical Context
  This detection rule is designed to identify potential attempts to bypass the Antimalware Scan Interface (AMSI) through .NET Reflection in a Windows environment. AMSI is a security feature that enables applications to integrate with antimalware products for scanning scripts and other data. The rule specifically monitors process creation events, looking for command-line arguments that include key phrases associated with disabling AMSI scanning, such as 'amsiInitFailed' or specific .NET Reflection methods that manipulate the AMSI settings. This detection leverages Windows Event Logs, particularly focusing on process creation logs for relevant PowerShell execution patterns collating with defense evasion techniques described in the MITRE ATT&CK framework, specifically T1562.001.
  When PowerShell scripts are executed with a command line that demonstrates manipulation of AMSI functions or reflects specific system aspects, it raises a flag for potential malicious activity. The rule captures these scenarios effectively, giving SOC analysts the visibility needed to investigate the intent behind the command executions and discern if they are part of an evasion tactic employed by adversaries.
  ### Investigation Steps
  - **Review Process Creation Logs**: Examine Windows Security Event Logs (Event ID 4688) for the associated process creation logs that triggered the detection rule. Validate the command lines recorded against the rule criteria to confirm intent.
  - **Analyze Command-Line Parameters**: Utilize EDR tools to further dissect the command-line parameters and confirm the presence of specific terms like 'amsiInitFailed' or any related .NET Reflection commands. This can give insight into whether legitimate administrative operations are being misused.
  - **Check for Related Unusual Activities**: Look for other suspicious behaviors that may coincide with the time of the alert, such as unexpected network connections or indicators of compromise in the surrounding processes. NDR solutions can help in identifying any abnormal network activity that correlates with the event.
  - **Consult AMSI and PowerShell Event Logs**: Investigate any available logs pertaining to AMSI activity and PowerShell executions within the system. This should help in determining whether the AMSI component has been effectively bypassed or if there are additional patterns to observe.
  ### Prioritization
  This alert has been classified as high severity due to its relation to potential bypassing of an essential security control, AMSI, which can facilitate further malicious activity, such as malware execution or data exfiltration. Timely investigation is critical to mitigate risks posed by potential threats exploiting this evasion technique.
  ### Blind Spots and Assumptions
  This rule may not fire in instances where the attack vector does not utilize the specified command-line parameters or if AMSI is not leveraged by the attacker. Moreover, there might be scenarios where legitimate administrative scripts inadvertently trigger the detection. Additionally, the effectiveness of this rule may be diminished if an adversary utilizes obfuscation or encoding techniques to obscure their actions. Understanding these limitations is key to refining and complementing the detection strategy.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and adapt it to specific operational needs, we recommend validating the content. Please communicate any changes to the detection engineering team.
