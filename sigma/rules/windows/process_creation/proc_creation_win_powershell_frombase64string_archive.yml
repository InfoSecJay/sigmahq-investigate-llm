title: Suspicious FromBase64String Usage On Gzip Archive - Process Creation
id: d75d6b6b-adb9-48f7-824b-ac2e786efe1f
related:
- id: df69cb1d-b891-4cd9-90c7-d617d90100ce
  type: similar
status: test
description: Detects attempts of decoding a base64 Gzip archive via PowerShell. This
  technique is often used as a method to load malicious content into memory afterward.
references:
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=43
author: frack113
date: 2022-12-23
tags:
- attack.command-and-control
- attack.t1132.001
logsource:
  product: windows
  category: process_creation
detection:
  selection:
    CommandLine|contains|all:
    - 'FromBase64String'
    - 'MemoryStream'
    - 'H4sI'
  condition: selection
falsepositives:
- Legitimate administrative script
level: medium
notes: |
  ### Technical Context
  This detection rule identifies the suspicious usage of the `FromBase64String` method alongside a gzip archive in PowerShell commands, often indicative of an attempt to load malicious content into memory. The key indicators consist of command-line parameters that include `FromBase64String`, `MemoryStream`, and a specific pattern like `H4sI`, which signifies gzip compression. Such behavior is commonly associated with malicious actors leveraging PowerShell to decode and execute payloads hidden within compressed archives, allowing them to bypass traditional detection mechanisms that look for file drops or recognizable malware signatures. The data source involved is primarily process creation logs from Windows systems, which capture the command-line input utilized during the execution of PowerShell scripts.
  ### Investigation Steps
  - Analyze process creation logs in the EDR to identify the specific PowerShell commands executed, focusing on those that include `FromBase64String` and `MemoryStream`.
  - Check the origin of the PowerShell script by querying any related network logs, particularly through the proxy and VPN, to see if the script was retrieved from a suspicious external source. 
  - Review endpoint antivirus logs to determine if the executed PowerShell process had any associated alerts or warnings that could indicate known malicious activity.
  - Correlate findings with historical cloud service logs, especially if the execution was initiated from a cloud instance (AWS, GCP, or Azure) to verify if it is linked to known compromised credentials or risky configurations.
