title: Suspicious FromBase64String Usage On Gzip Archive - Process Creation
id: d75d6b6b-adb9-48f7-824b-ac2e786efe1f
related:
- id: df69cb1d-b891-4cd9-90c7-d617d90100ce
  type: similar
status: test
description: Detects attempts of decoding a base64 Gzip archive via PowerShell. This
  technique is often used as a method to load malicious content into memory afterward.
references:
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=43
author: frack113
date: 2022-12-23
tags:
- attack.command-and-control
- attack.t1132.001
logsource:
  product: windows
  category: process_creation
detection:
  selection:
    CommandLine|contains|all:
    - 'FromBase64String'
    - 'MemoryStream'
    - 'H4sI'
  condition: selection
falsepositives:
- Legitimate administrative script
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect suspicious usage of PowerShell that involves decoding a Base64-encoded Gzip archive. Specifically, it looks for command-line parameters associated with PowerShell process creation that contain the terms 'FromBase64String', 'MemoryStream', and a specific Gzip header ('H4sI'). The presence of these elements suggests an attempt to decode a compressed payload, which is a common technique utilized by attackers to load malicious content directly into the memory of a system, thereby evading traditional file-based detection mechanisms. This rule aligns with the MITRE ATT&CK technique T1132.001, which focuses on the manipulation of data to establish command-and-control channels.
  The data sources involved in this detection include Windows event logs for process creation, specifically the capture of command lines executed by PowerShell. These logs provide insight into the actions performed within the PowerShell environment, making it possible to identify potentially harmful activities.
  ### Investigation Steps
  - **Review Process Creation Logs:** Investigate Windows Security event logs for the corresponding process creation events around the time the alert was triggered, focusing on the PowerShell executions.
  - **Analyze Command Line Arguments:** Examine the full command-line arguments associated with the detected PowerShell process to confirm the presence of 'FromBase64String', 'MemoryStream', and 'H4sI' as an indicator of potential malicious activity.
  - **Check for Related Network Activity:** Utilize your EDR solution to look for any unusual outbound network connections or command-and-control traffic that may correlate with the suspicious PowerShell activity.
  - **Validate Source of Scripts:** Investigate the source of the PowerShell script or command being executed to determine if it originated from a legitimate administrative source or if it could be part of a malicious intrusion.
  ### Prioritization
  The alert is classified as medium severity due to the potential for malicious payload execution through memory manipulation. While not always indicative of a breach, the combination of PowerShell techniques suggests a higher than normal risk, necessitating further investigation.
  ### Blind Spots and Assumptions
  This rule may not fire if the command is executed without the specified terms or if the query is crafted in a way that circumvents detection. Additionally, if an adversary disguises their activity by altering the command structure or using obfuscation techniques, the rule may fail to trigger. It operates under the assumption that PowerShell is being utilized in its standard context and does not account for malicious users who may use alternate script languages or environments.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
