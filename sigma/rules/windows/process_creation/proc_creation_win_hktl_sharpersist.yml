title: HackTool - SharPersist Execution
id: 26488ad0-f9fd-4536-876f-52fea846a2e4
status: test
description: Detects the execution of the hacktool SharPersist - used to deploy various
  different kinds of persistence mechanisms
references:
- https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit
- https://github.com/mandiant/SharPersist
author: Florian Roth (Nextron Systems)
date: 2022-09-15
modified: 2023-02-04
tags:
- attack.persistence
- attack.t1053
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\SharPersist.exe'
  - Product: 'SharPersist'
  selection_cli_1:
    CommandLine|contains:
    - ' -t schtask -c '
    - ' -t startupfolder -c '
  selection_cli_2:
    CommandLine|contains|all:
    - ' -t reg -c '
    - ' -m add'
  selection_cli_3:
    CommandLine|contains|all:
    - ' -t service -c '
    - ' -m add'
  selection_cli_4:
    CommandLine|contains|all:
    - ' -t schtask -c '
    - ' -m add'
  condition: 1 of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "HackTool 
  - SharPersist Execution" is designed to detect the execution of the SharPersist tool, which is known for deploying various persistence mechanisms on Windows systems. The rule focuses primarily on process creation logs to identify when the `SharPersist.exe` executable is launched. It examines specific command-line patterns used by the tool, looking for flags indicating various methods of persistence implementation, such as scheduled tasks, startup folder additions, registry modifications, and service installations. By parsing through the command-line parameters associated with `SharPersist.exe`, the rule can effectively highlight potential malicious activity aimed at maintaining persistence within a compromised environment.
  This rule is especially important for incident responders as it can help detect early stages of an attack leveraging persistence mechanisms that might not be readily visible through traditional monitoring techniques. Accurate detection requires thorough analysis of process creation data, making it vital for analysts to understand the context and operational capabilities of SharPersist.
  ### Investigation Steps
  - Review the process creation logs in your EDR solution to identify instances of `SharPersist.exe` execution, paying close attention to any associated command-line parameters.
  - Analyze the command-line arguments to determine the persistence method employed (e.g., scheduled tasks, registry modifications), which can guide your understanding of the attackerâ€™s intent.
  - Check for any unusual persistence mechanisms on endpoints directly related to the execution of SharPersist, verifying their legitimacy against organizational policy.
  - Utilize threat intelligence and historical data from AV and NDR tools to assess whether similar patterns have been previously observed in your environment, helping to establish a broader context for the alert.
