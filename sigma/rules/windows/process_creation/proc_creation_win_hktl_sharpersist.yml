title: HackTool - SharPersist Execution
id: 26488ad0-f9fd-4536-876f-52fea846a2e4
status: test
description: Detects the execution of the hacktool SharPersist - used to deploy various
  different kinds of persistence mechanisms
references:
- https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit
- https://github.com/mandiant/SharPersist
author: Florian Roth (Nextron Systems)
date: 2022-09-15
modified: 2023-02-04
tags:
- attack.persistence
- attack.t1053
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\SharPersist.exe'
  - Product: 'SharPersist'
  selection_cli_1:
    CommandLine|contains:
    - ' -t schtask -c '
    - ' -t startupfolder -c '
  selection_cli_2:
    CommandLine|contains|all:
    - ' -t reg -c '
    - ' -m add'
  selection_cli_3:
    CommandLine|contains|all:
    - ' -t service -c '
    - ' -m add'
  selection_cli_4:
    CommandLine|contains|all:
    - ' -t schtask -c '
    - ' -m add'
  condition: 1 of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "HackTool 
  - SharPersist Execution" is designed to detect the execution of the SharPersist tool, which is often leveraged by adversaries to establish persistence on compromised systems within a Windows environment. The rule looks for specific indicators that signify the use of SharPersist, including the presence of the executable file `SharPersist.exe` and command-line arguments that indicate various types of persistence mechanisms being implemented, such as scheduled tasks, startup folder entries, registry modifications, and services. The key data sources utilized in this detection rule are Windows process creation logs that contain details about command-line execution, allowing for the identification of malicious behavior that aligns with MITRE ATT&CK techniques for persistence, specifically T1053 (Scheduled Task/Job). 
  ### Investigation Steps
  - **Correlate Process Creation Logs:** Check Windows process creation logs for instances of `SharPersist.exe`. Identify the user and time context of the execution to assess potential impact.
    
  - **Review Command Line Arguments:** Analyze the command-line parameters used during execution of SharPersist to determine which persistence mechanism is being established. Pay careful attention to flags indicating service creation, registry modifications, or scheduled tasks.
    
  - **Investigate Historical Changes:** Use an EDR tool to check for any historical changes made by the SharPersist tool. Look for newly created services, scheduled tasks, or registry entries that could indicate long-term persistence.
    
  - **Validate Current Environment State:** Conduct a review of the environmentâ€™s security posture, especially checking the affected endpoints for any anomalies that coincide with the SharPersist execution timeframe.
  ### Prioritization
  The alert is marked as high severity because the execution of tools like SharPersist typically indicates an attempt by an adversary to establish a foothold within the organization, which can lead to further compromise and data exfiltration.
  ### Blind Spots and Assumptions
  This rule may not fire if the executable is renamed or executed in a non-standard way, such as through obfuscation techniques. Additionally, if the tool runs with elevated privileges or in a manner that bypasses standard logging mechanisms, such as utilizing a custom script, the detection may not trigger. Assumptions also include that Windows process creation logging is enabled and functioning properly across the environment.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
