title: Suspicious Encoded And Obfuscated Reflection Assembly Load Function Call
id: 9c0295ce-d60d-40bd-bd74-84673b7592b1
related:
- id: 62b7ccc9-23b4-471e-aa15-6da3663c4d59
  type: similar
status: test
description: Detects suspicious base64 encoded and obfuscated "LOAD" keyword used
  in .NET "reflection.assembly"
references:
- https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar
- https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/
- https://learn.microsoft.com/en-us/dotnet/api/system.appdomain.load?view=net-7.0
author: pH-T (Nextron Systems)
date: 2022-03-01
modified: 2023-04-06
tags:
- attack.execution
- attack.defense-evasion
- attack.t1059.001
- attack.t1027
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains:
            # ::("L"+"oad")
    - 'OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ'
    - 'oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA'
    - '6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA'
            # ::("Lo"+"ad")
    - 'OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ'
    - 'oAOgAoACIATABvACIAKwAiAGEAZAAiACkA'
    - '6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA'
            # ::("Loa"+"d")
    - 'OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ'
    - 'oAOgAoACIATABvAGEAIgArACIAZAAiACkA'
    - '6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA'
            # ::('L'+'oad')
    - 'OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ'
    - 'oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA'
    - '6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA'
            # ::('Lo'+'ad')
    - 'OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ'
    - 'oAOgAoACcATABvACcAKwAnAGEAZAAnACkA'
    - '6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA'
            # ::('Loa'+'d')
    - 'OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ'
    - 'oAOgAoACcATABvAGEAJwArACcAZAAnACkA'
    - '6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA'
  condition: selection
fields:
- CommandLine
falsepositives:
- Unlikely
level: high
notes: |
  n
  ### Technical Context
  This Sigma rule is designed to detect suspicious behavior involving the loading of .NET assemblies via reflection, specifically when the "LOAD" keyword is obfuscated or encoded using Base64. Such techniques are often employed by attackers to bypass traditional detection mechanisms and execute malicious code in a stealthy manner. The rule inspects Windows process creation logs, focusing on command-line arguments. It looks for encoded strings that correspond to obfuscated commands invoking the `System.AppDomain.Load` method. These commands may include various combinations of the "LOAD" keyword manipulated to evade detection. The detected activity is aligned with the MITRE ATT&CK tactics of [Execution](https://attack.mitre.org/techniques/T1059/001/) and [Defense Evasion](https://attack.mitre.org/techniques/T1027/).
  ### Investigation Steps
  - **Check Process Execution:** Explore the process tree in your EDR tool to determine the parent process of the offending command. Understanding the context of execution can help identify whether it was initiated by a trusted application or potentially malicious software.
  - **Review Command-Line Arguments:** Examine the command-line parameters associated with the detected process. Pay particular attention to the encoding patterns and any unusual script paths that might indicate an exploit or intrusion.
  - **Correlate with Network Activity:** Use NDR tools to inspect any associated outbound network connections made after the process creation event. This may reveal communication with known malicious IPs, indicating a potential compromise.
  - **Analyze Recent Changes:** Investigate any recent changes to the environment, including new deployments or modifications to application settings that could correlate with the timing of the alerts.
  ### Prioritization
  The alert is categorized as high severity due to the potential for executed malicious content, which may lead to extensive compromise or data exfiltration within the environment. Quick action is advised to prevent escalation.
  ### Blind Spots and Assumptions
  While this rule is effective in catching encoded assembly loads, there are limitations. It may not trigger if the obfuscation techniques evolve beyond the current patterns specified. Furthermore, false negatives could occur if malicious actors utilize alternate methods for loading assemblies that don't follow the patterns defined in this rule. Responders should also consider the possibility of legitimate applications using similar techniques for valid purposes, which may warrant further analysis to prevent wrongful flagging.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
