title: Obfuscated PowerShell OneLiner Execution
id: 44e24481-6202-4c62-9127-5a0ae8e3fe3d
status: test
description: Detects the execution of a specific OneLiner to download and execute
  powershell modules in memory.
author: '@Kostastsale, @TheDFIRReport'
references:
- https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/
- https://gist.github.com/mgeeky/3b11169ab77a7de354f4111aa2f0df38
date: 2022-05-09
tags:
- attack.defense-evasion
- attack.execution
- attack.t1059.001
- attack.t1562.001
logsource:
  product: windows
  category: process_creation
detection:
  selection:
    Image|endswith: '\powershell.exe'
    CommandLine|contains|all:
    - 'http://127.0.0.1'
    - '%{(IRM $_)}'
    - '.SubString.ToString()[67,72,64]-Join'
    - 'Import-Module'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The "Obfuscated PowerShell OneLiner Execution" Sigma rule is designed to detect the execution of a specific PowerShell one-liner that utilizes obfuscation techniques to download and execute PowerShell modules in memory. This rule focuses on identifying the `powershell.exe` process where the command line contains certain indicative patterns, such as a callback to `http://127.0.0.1` and use of the `Import-Module` cmdlet, augmented by obfuscated string manipulations. The primary technical data sources involved in this detection include process creation logs that capture the command line parameters passed during the execution of PowerShell. This detection aligns with the MITRE ATT&CK tactics of "Execution" (T1059.001) and "Defense Evasion" (T1562.001), signaling methods employed by adversaries to execute code while attempting to blend in with legitimate system processes.
  ### Investigation Steps
  - **Check EDR Alerts:** Review EDR logs and alerts for unusual PowerShell activities or abnormal command line arguments associated with `powershell.exe`, focusing on instances where the detected command line matches the obfuscation patterns.
    
  - **Analyze Process Tree:** Investigate the process tree for any parent-child relationships involving `powershell.exe` that indicate potential malicious behavior, especially entries originating from unusual or suspicious parent processes.
    
  - **Review Network Connections:** Examine the network connection logs for any outgoing requests to `http://127.0.0.1`, along with any other related IPs, to identify if any communication intended for command and control (C2) infrastructure took place.
    
  - **Correlate with Security Logs:** Analyze Windows Security and Application logs to cross-reference other suspicious user activities happening around the same time to assess whether they relate to broader malicious activity.
  ### Prioritization
  This alert is classified as high severity due to the potential for significant impacts if a malicious actor successfully executes obfuscated PowerShell commands that can lead to data exfiltration, malware deployment, or lateral movement within the network.
  ### Blind Spots and Assumptions
  This rule may not fire in environments where PowerShell logging is disabled or where execution policies are overly restrictive, preventing the execution of such scripts. Additionally, if malicious actors employ sophisticated obfuscation methods that differ from the specified patterns or use alternative scripting languages, the rule may fail to detect their activities. It is assumed that all instances of PowerShell execution are legitimate or have been sanctioned by administrators; however, this assumption may not hold in cases of credential compromise.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
