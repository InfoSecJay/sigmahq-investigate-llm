title: Suspicious WindowsTerminal Child Processes
id: 8de89e52-f6e1-4b5b-afd1-41ecfa300d48
status: test
description: Detects suspicious children spawned via the Windows Terminal application
  which could be a sign of persistence via WindowsTerminal (see references section)
references:
- https://persistence-info.github.io/Data/windowsterminalprofile.html
- https://twitter.com/nas_bench/status/1550836225652686848
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-07-25
modified: 2023-02-14
tags:
- attack.execution
- attack.persistence
logsource:
  category: process_creation
  product: windows
detection:
  selection_parent:
    ParentImage|endswith:
    - '\WindowsTerminal.exe'
    - '\wt.exe'
  selection_susp:
  - Image|endswith:
              # Add more LOLBINS
    - '\rundll32.exe'
    - '\regsvr32.exe'
    - '\certutil.exe'
    - '\cscript.exe'
    - '\wscript.exe'
    - '\csc.exe'
  - Image|contains:
              # Add more suspicious paths
    - 'C:\Users\Public\'
    - '\Downloads\'
    - '\Desktop\'
    - '\AppData\Local\Temp\'
    - '\Windows\TEMP\'
  - CommandLine|contains:
              # Add more suspicious commandline
    - ' iex '
    - ' icm'
    - 'Invoke-'
    - 'Import-Module '
    - 'ipmo '
    - 'DownloadString('
    - ' /c '
    - ' /k '
    - ' /r '
  filter_builtin_visual_studio_shell:
    CommandLine|contains|all:
    - 'Import-Module'
    - 'Microsoft.VisualStudio.DevShell.dll'
    - 'Enter-VsDevShell'
  filter_open_settings:
    CommandLine|contains|all:
    - '\AppData\Local\Packages\Microsoft.WindowsTerminal_'
    - '\LocalState\settings.json'
  filter_vsdevcmd:
    CommandLine|contains|all:
    - 'C:\Program Files\Microsoft Visual Studio\'
    - '\Common7\Tools\VsDevCmd.bat'
  condition: all of selection_* and not 1 of filter_*
falsepositives:
- Other legitimate "Windows Terminal" profiles
level: medium
notes: |
  n
  ### Technical Context
  This detection rule targets potentially malicious activity originating from the Windows Terminal application, which can be exploited to execute suspicious child processes. Specifically, it looks for processes that are spawned by `WindowsTerminal.exe` or `wt.exe`, where those child processes include known living-off-the-land binaries (LOLBINS) such as `rundll32.exe`, `regsvr32.exe`, and `certutil.exe`, as well as certain command-line arguments that indicate potential misuse, such as those involving PowerShell's `Invoke-` or `Import-Module` commands. The rule uses telemetry from Windows process creation logs to identify these patterns, providing a granular view of any suspicious behaviors that may hint at persistence mechanisms within the environment. This aligns with the MITRE ATT&CK tactics of Execution (T1203) and Persistence (T1505).
  ### Investigation Steps
  - **Check the Process Tree:** Investigate the process tree in your EDR to understand the parent-child relationship of the suspicious processes triggered by Windows Terminal. Focus on the immediate child processes to assess their legitimacy.
  - **Review Command-Line Arguments:** Analyze the command-line arguments of the detected processes for indicators of compromise, such as the presence of PowerShell commands or paths indicative of temporary file execution. Validate any unusual patterns or parameters.
  - **Correlate with User Activity:** Cross-reference the detected process activity with user account logs to determine if the actions were initiated by authorized personnel or if they are anomalous. Review user login times and permissions for any discrepancies.
  - **Check Windows Event Logs:** Utilize Windows Security Logs to monitor for further authentication of the user account that executed the suspicious processes. This may reveal additional context, such as any related failed logins or anomalous access patterns.
  ### Prioritization
  The alert is categorized as medium severity due to the potential of Windows Terminal being abused for persistence mechanisms. While some executions may be legitimate, the use of known LOLBINS raises the need for prompt investigation to mitigate risks associated with unauthorized access or malicious activity.
  ### Blind spots and Assumptions
  The effectiveness of this rule may be compromised in environments that either do not utilize Windows Terminal frequently or where legitimate processes interact with the specified LOLBINS. Additionally, a high volume of legitimate Windows Terminal use could lead to false positives. Attackers may also use legitimate scripts or terminal profiles to camouflage their activities, making it more challenging to detect malevolent intent. Thus, analysts should be mindful of baseline behaviors within their specific operational environments.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
