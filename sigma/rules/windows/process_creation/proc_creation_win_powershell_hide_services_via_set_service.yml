title: Abuse of Service Permissions to Hide Services Via Set-Service
id: 514e4c3a-c77d-4cde-a00f-046425e2301e
related:
- id: a537cfc3-4297-4789-92b5-345bfd845ad0
  type: derived
- id: 953945c5-22fe-4a92-9f8a-a9edc1e522da
  type: similar
status: test
description: Detects usage of the "Set-Service" powershell cmdlet to configure a new
  SecurityDescriptor that allows a service to be hidden from other utilities such
  as "sc.exe", "Get-Service"...etc. (Works only in powershell 7)
references:
- https://twitter.com/Alh4zr3d/status/1580925761996828672
- https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/set-service?view=powershell-7.2
author: Nasreddine Bencherchali (Nextron Systems)
date: 2022-10-17
tags:
- attack.persistence
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1574.011
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\pwsh.exe'
  - OriginalFileName: 'pwsh.dll'
  selection_sddl:
        # Example would be: "D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)"
    CommandLine|contains|all:
    - 'Set-Service '
    - 'DCLCWPDTSD'
  selection_cmdlet:
    CommandLine|contains:
    - '-SecurityDescriptorSddl '
    - '-sd '
  condition: all of selection_*
falsepositives:
- Rare intended use of hidden services
level: high
notes: |
  ### Technical Context
  This Sigma rule aims to detect potential misuse of the PowerShell `Set-Service` cmdlet to manipulate service permissions in a manner that allows a service to be hidden from common service management utilities, such as `sc.exe` and `Get-Service`. When executed, this cmdlet modifies a service's Security Descriptor, configuring it in a way that may obfuscate its presence on the system. The detection logic focuses on process creation events, specifically monitoring for instances of `pwsh.exe`, which signifies the execution of PowerShell 7. Additionally, the rule looks for specific command-line arguments indicating the use of the `-SecurityDescriptorSddl ` and `-sd ` parameters combined with a particular SDDL string that grants hidden service permissions.
  This rule is linked to the MITRE ATT&CK tactic of **Persistence** and the technique **T1574.011 
  - Service Registry Permissions Weakness**, which highlights the method by which attackers may establish persistence while evading detection. By recognizing these actions, analysts can respond to potential threats that compromise service visibility and ultimately the integrity of the system.
  ### Investigation Steps
  - **Review Process Creation Logs**: Utilize your EDR solution to check for processes that match the criteria of `pwsh.exe` and were initiated with the parameters specified in the detection rule. Focus especially on times that correspond with reported alerts.
  - **Analyze Security Descriptor Changes**: Investigate any changes in service configurations by reviewing the Windows Security event logs for service-related event IDs (like 7045) to see if there are records of manipulation of the Security Descriptor matching the SDDL pattern defined in the rule.
  - **Correlate with Other Logs**: Cross-reference PowerShell logs with network connection logs to determine if any suspicious outbound communications were initiated by the PowerShell process, which could suggest other malicious activity.
  - **Perform Threat Intelligence Lookup**: Conduct an investigation on the service in question to ascertain its legitimacy. Confirm if it correlates with known legitimate services or if there are associated Indicators of Compromise (IOCs) that have been flagged in threat intelligence databases.
  ### Prioritization
  The alert raised by this rule is categorized as **high severity** due to the potential implications of service manipulation through privileged access, suggesting an active attempt to establish persistence or evade detection techniques common in enterprise environments.
  ### Blind Spots and Assumptions
  This detection rule may not trigger in environments where PowerShell 7 is not available or where the cmdlet `Set-Service` is not commonly used. Furthermore, legitimate administrative actions could potentially cause false positives, particularly in scenarios involving rarely used hidden services. Adversaries may also employ obfuscation techniques within the command-line parameters to avoid detection, or use alternative methods of modifying service permissions, thereby bypassing this rule altogether. 
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
