title: Potentially Suspicious Electron Application CommandLine
id: 378a05d8-963c-46c9-bcce-13c7657eac99
related:
- id: f26eb764-fd89-464b-85e2-dc4a8e6e77b8
  type: similar
status: test
description: Detects potentially suspicious CommandLine of electron apps (teams, discord,
  slack, etc.). This could be a sign of abuse to proxy execution through a signed
  binary.
references:
- https://positive.security/blog/ms-officecmd-rce
- https://lolbas-project.github.io/lolbas/Binaries/Teams/
- https://lolbas-project.github.io/lolbas/Binaries/Msedge/
- https://lolbas-project.github.io/lolbas/Binaries/msedgewebview2/
- https://medium.com/@MalFuzzer/one-electron-to-rule-them-all-dc2e9b263daf
- https://chromium.googlesource.com/chromium/chromium/+/master/content/public/common/content_switches.cc
author: frack113, Nasreddine Bencherchali (Nextron Systems)
date: 2023-09-05
modified: 2023-11-09
tags:
- attack.execution
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith:
              # Add more electron based app to the list
    - '\chrome.exe'
    - '\code.exe'
    - '\discord.exe'
    - '\GitHubDesktop.exe'
    - '\keybase.exe'
    - '\msedge_proxy.exe'
    - '\msedge.exe'
    - '\msedgewebview2.exe'
    - '\msteams.exe'
    - '\slack.exe'
    - '\Teams.exe'
  - OriginalFileName:
              # Add more electron based app to the list
    - 'chrome.exe'
    - 'code.exe'
    - 'discord.exe'
    - 'GitHubDesktop.exe'
    - 'keybase.exe'
    - 'msedge_proxy.exe'
    - 'msedge.exe'
    - 'msedgewebview2.exe'
    - 'msteams.exe'
    - 'slack.exe'
    - 'Teams.exe'
  selection_cli:
    CommandLine|contains:
    - '--browser-subprocess-path'
    - '--gpu-launcher'
    - '--renderer-cmd-prefix'
    - '--utility-cmd-prefix'
  condition: all of selection_*
falsepositives:
- Legitimate usage for debugging purposes
# Increase the level once FP rate is known better (see status)
level: medium
notes: |
  n
  ### Technical Context
  The "Potentially Suspicious Electron Application CommandLine" detection rule is designed to identify potentially malicious use of Electron-based applications such as Microsoft Teams, Discord, and Slack. It focuses on specific command-line arguments associated with these applications that are characteristic of abnormal operations, potentially indicating abuse for proxy execution through these signed binaries. The rule analyzes process creation logs for Windows systems, particularly looking for processes whose images end with names like `chrome.exe`, `discord.exe`, or `msteams.exe`, alongside certain command-line parameters that suggest unusual activity. This aligns with the MITRE ATT&CK tactic of Execution (T1203) which looks at how adversaries execute malign code on systems by leveraging seemingly benign applications.
  ### Investigation Steps
  - **Review Process Creation Logs:** Utilize EDR tools to filter for recent process creations that match the filenames of Electron applications listed in the rule, checking for abnormal execution contexts.
  - **Analyze Command-Line Arguments:** Investigate the command-line parameters of alerted processes, particularly focusing on the presence of unusual flags such as `--utility-cmd-prefix` or `--gpu-launcher`.
  - **Cross-reference with User Activity:** Look into the user sessions and activities associated with the processes to determine if the execution correlates with legitimate workflows or if it appears to be anomalous.
  - **Monitor Network Connections:** Analyze any network connections initiated by the suspicious processes through NDR tools to identify any known malicious destinations or abnormal data exfiltration patterns.
  ### Prioritization
  This alert has a medium severity level due to the potential for misuse of legitimate software to execute unauthorized commands or scripts. While the presence of these processes does not inherently indicate malicious intent, timely investigation is critical to assess the risk to enterprise systems.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where Electron applications are used legitimately for debugging or development purposes, which can lead to false positives. Additionally, if an adversary disguises malicious activity using custom or renamed executables that do not match the specified signatures, the detection may fail. Furthermore, users invoking these applications through trusted command lines may also result in missed alerts, underscoring the need for thorough contextual analysis during investigations.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
