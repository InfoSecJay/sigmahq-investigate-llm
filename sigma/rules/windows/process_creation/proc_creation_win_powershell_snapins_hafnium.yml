title: Exchange PowerShell Snap-Ins Usage
id: 25676e10-2121-446e-80a4-71ff8506af47
status: test
description: Detects adding and using Exchange PowerShell snap-ins to export mailbox
  data. As seen used by HAFNIUM and APT27
references:
- https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/
- https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/
- https://www.intrinsec.com/apt27-analysis/
author: FPT.EagleEye, Nasreddine Bencherchali (Nextron Systems)
date: 2021-03-03
modified: 2023-03-24
tags:
- attack.execution
- attack.t1059.001
- attack.collection
- attack.t1114
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
  selection_cli:
    CommandLine|contains: 'Add-PSSnapin'
  selection_module:
    CommandLine|contains:
    - 'Microsoft.Exchange.Powershell.Snapin'
    - 'Microsoft.Exchange.Management.PowerShell.SnapIn'
  filter_msiexec:
        # ParentCommandLine: C:\Windows\System32\MsiExec.exe -Embedding C9138ECE2536CB4821EB5F55D300D88E E Global\MSI0000
    ParentImage: 'C:\Windows\System32\msiexec.exe'
    CommandLine|contains: '$exserver=Get-ExchangeServer ([Environment]::MachineName)
      -ErrorVariable exerr 2> $null'
  condition: all of selection_* and not 1 of filter_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potential malicious usage of Microsoft Exchange PowerShell Snap-Ins, which can be indicative of exploitation activities similar to those conducted by cyber threat actors such as HAFNIUM and APT27. The rule focuses on process creation events where PowerShell or PowerShell Core (pwsh) is invoked to add specific snap-ins associated with managing Exchange servers. It utilizes logs from Windows, notably the process creation telemetry available through Sysmon, which includes command-line parameters and the image files invoked.
  Key data sources utilized in this detection include process creation logs that capture the command-line strings passed to PowerShell, as well as information about the executables being run and the associated parent processes. The rule specifically looks for command-line invocations containing `Add-PSSnapin` and identifies the presence of Exchange-related snap-ins. By combining these indicators, the rule aims to highlight potentially unauthorized attempts to access or export mailbox data. This detection aligns with the MITRE ATT&CK framework, specifically addressing tactics of Execution (T1059.001: Command and Scripting Interpreter: Windows PowerShell) and Collection (T1114: Email Collection).
  ### Investigation Steps
  - **Correlate Logs:** Check the process creation logs on the endpoint for entries matching the PowerShell invocation with the `Add-PSSnapin` command. Identify if the execution originated from a legitimate source or unusual context.
  - **Examine Parent Process:** Investigate the parent process associated with the detected PowerShell instances, especially if `MsiExec.exe` is involved. This can provide insights into the method used for invoking the PowerShell commands.
  - **Review Access to Exchange Data:** Utilize your EDR to check for any export activities related to mailbox content around the same time as the alert. Pay close attention to any unexpected or unauthorized data transfers.
  - **Analyze Network Traffic:** If applicable, inspect outbound traffic for any unusual connections or data exfiltration attempts from endpoints using the identified PowerShell commands. Anomalies in network patterns could indicate further exploitation.
  ### Prioritization
  This alert is classified as high severity due to the critical nature of Exchange servers and their susceptibility to attacks. Unauthorized access and manipulation of mailbox data can lead to significant data breaches and should be addressed with urgency.
  ### Blind Spots and Assumptions
  There are several factors that could result in this rule not firing. First, if an adversary disguises their PowerShell commands or uses alternative scripting methods (like WMI or .NET) to interact with Exchange servers, the rule may not capture those activities. Additionally, legitimate administrative use of PowerShell for Exchange management may generate false positives, especially in environments where snap-ins are commonly employed. Assumptions include that the command-line monitoring configuration is properly set up to capture all relevant events, which may not always be the case.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
