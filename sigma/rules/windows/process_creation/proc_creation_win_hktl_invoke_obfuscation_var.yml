title: Invoke-Obfuscation VAR+ Launcher
id: 27aec9c9-dbb0-4939-8422-1742242471d0
status: test
description: Detects Obfuscated use of Environment Variables to execute PowerShell
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task 24)
author: Jonathan Cheong, oscd.community
date: 2020-10-15
modified: 2024-04-15
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
        # Example 1: C:\winDoWs\SySTeM32\cmd.Exe /C"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\"{2}{3}{0}{1}\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\"IN`VO`KecOmMaND\".\"inVo`KES`crIPt\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\"{1}{4}{2}{3}{0}\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \"{0}{1}\"-f'n','oti' ),( \"{0}{1}\" -f'pRoC','esS') )) )"
        # Example 2: cMD.exe /C "seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\"{1}{0}{2}{3}\" -f 'eT-vaR','G','iab','lE' ) (\"{0}{1}\" -f '*m','DR*' ) ).\"na`ME\"[3,11,2]-JOIN'' ) ( ( ^&(\"{0}{1}\" -f'g','CI' ) (\"{0}{1}\" -f 'ENV',':SlDb' ) ).\"VA`luE\" ) "
    CommandLine|re: 'cmd.{0,5}(?:/c|/r)(?:\s|)\"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\\"\s+?\-f(?:.*\)){1,}.*\"'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The "Invoke-Obfuscation VAR+ Launcher" detection rule aims to identify potentially malicious PowerShell commands that utilize obfuscation techniques through environment variables to evade security detections. It specifically looks for unusual command-line patterns associated with the execution of `cmd.exe` and `powershell.exe`, which often indicate an attempt to run obfuscated scripts containing encoded strings to download and execute malicious payloads. This rule utilizes process creation logs as its primary telemetry source, monitoring for specific command-line arguments that demonstrate obfuscated PowerShell syntax. The tactics and techniques being referenced align with the MITRE ATT&CK framework under "Defense Evasion" (T1027) and "Execution" (T1059.001).
  ### Investigation Steps
  - **Check Process Creation Logs:** Use EDR tools to review the process creation logs for instances of `cmd.exe` or `powershell.exe` that match the identified patterns, paying special attention to command-line arguments.
  - **Analyze Network Connections:** Investigate any network traffic associated with the detected processes, looking for unusual outbound connections that may indicate data exfiltration or connections to known malicious domains.
  - **Review Related Windows Event Logs:** Examine corresponding Windows Security Event Logs for additional context regarding user authentication and access patterns related to the identified processes to understand the activity better.
  - **Correlate with AV or Threat Intelligence:** Cross-reference detected activities with threat intelligence feeds or AV logs to check if any associated files or IP addresses are recognized as malicious.
  ### Prioritization
  Given the high-level of obfuscation and the potential for malicious activity, alerts from this rule should be treated with high priority. In an enterprise environment, rapid identification and response to such tactics are crucial to mitigate risks associated with malware deployment or data breaches.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where an adversary uses direct executable paths without obfuscation or employs alternative command interpreters that are not specified in the detection logic. Additionally, the rule assumes that process creation events are captured without gaps; hence, any disabled logging or lack of coverage on endpoints may result in missed detections. The use of legitimate software and environments to evade detection could also limit the effectiveness of this rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
