title: Invoke-Obfuscation VAR+ Launcher
id: 27aec9c9-dbb0-4939-8422-1742242471d0
status: test
description: Detects Obfuscated use of Environment Variables to execute PowerShell
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task 24)
author: Jonathan Cheong, oscd.community
date: 2020-10-15
modified: 2024-04-15
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
        # Example 1: C:\winDoWs\SySTeM32\cmd.Exe /C"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\"{2}{3}{0}{1}\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\"IN`VO`KecOmMaND\".\"inVo`KES`crIPt\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\"{1}{4}{2}{3}{0}\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \"{0}{1}\"-f'n','oti' ),( \"{0}{1}\" -f'pRoC','esS') )) )"
        # Example 2: cMD.exe /C "seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\"{1}{0}{2}{3}\" -f 'eT-vaR','G','iab','lE' ) (\"{0}{1}\" -f '*m','DR*' ) ).\"na`ME\"[3,11,2]-JOIN'' ) ( ( ^&(\"{0}{1}\" -f'g','CI' ) (\"{0}{1}\" -f 'ENV',':SlDb' ) ).\"VA`luE\" ) "
    CommandLine|re: 'cmd.{0,5}(?:/c|/r)(?:\s|)\"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\\"\s+?\-f(?:.*\)){1,}.*\"'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The "Invoke-Obfuscation VAR+ Launcher" detection rule is designed to identify obfuscated PowerShell commands that leverage environment variables for execution. Specifically, it focuses on command-line indicators that show manipulation of the Windows Command Processor (cmd.exe) to execute PowerShell commands in a way that bypasses standard detection mechanisms. The rule scans for process creation logs where the command line contains patterns indicative of obfuscated code, such as the use of `SET` commands followed by complex strings and PowerShell invocations. Technical data sources highlighted in this rule include process creation logs, particularly the command-line parameters that reveal how processes are being invoked and any associated malicious payloads.
  ### Investigation Steps
  - Utilize the EDR platform to review the process creation logs for any instances of `cmd.exe` invoking PowerShell with obfuscated command-line patterns identified by the rule. 
  - Check for any related alerts or anomalies in the SIEM that could provide additional context, such as user behaviors or access to sensitive systems during the time of the suspicious process creation.
  - Analyze security logs and events within the environments, such as Windows logs, to establish if the user account associated with the processes has a history of benign or malicious activity.
  - Review firewall and proxy logs to determine if the command attempted to make outbound connections, especially to potentially malicious domains or IP addresses, which could indicate further malicious behavior.
