title: Potential Process Execution Proxy Via CL_Invocation.ps1
id: a0459f02-ac51-4c09-b511-b8c9203fc429
status: test
description: Detects calls to "SyncInvoke" that is part of the "CL_Invocation.ps1"
  script to proxy execution using "System.Diagnostics.Process"
references:
- https://lolbas-project.github.io/lolbas/Scripts/Cl_invocation/
- https://twitter.com/bohops/status/948061991012327424
author: Nasreddine Bencherchali (Nextron Systems), oscd.community, Natalia Shornikova
date: 2020-10-14
modified: 2023-08-17
tags:
- attack.defense-evasion
- attack.t1216
logsource:
  category: process_creation
  product: windows
detection:
  selection:
        # Note: As this function is usually called from within powershell, classical process creation even would not catch it. This will only catch inline calls via "-Command" or "-ScriptBlock" flags for example.
    CommandLine|contains: 'SyncInvoke '
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This detection rule identifies potential misuse of PowerShell scripts to execute processes indirectly through the `SyncInvoke` method from the `CL_Invocation.ps1` script. This method can lead to executing commands that bypass traditional security mechanisms, as it leverages the .NET framework's capabilities to create and manage processes. The key data source for this detection is process creation logs, specifically focusing on command-line parameters that contain the string `SyncInvoke `. Given that this function is frequently invoked from within PowerShell using the `-Command` or `-ScriptBlock` flags, the rule is designed to capture such inline calls, which may indicate a defense evasion tactic being employed by adversaries.
  ### Investigation Steps
  - Review process creation logs for any instances where command lines include `SyncInvoke`, paying particular attention to the context in which PowerShell was invoked. 
  - Utilize EDR tools to gather detailed information about the identified process, such as parent process, user context, and any associated file paths.
  - Cross-reference findings with proxy logs to identify any network activity that correlates with the execution of the suspicious command, which may indicate data exfiltration or command and control (C2) communication.
  - Consult cloud platform logs (AWS, GCP, Azure) for any related API calls that might align with the execution context, helping to establish a broader view of the attack surface and potential lateral movement within the environment.
