title: Bad Opsec Defaults Sacrificial Processes With Improper Arguments
id: a7c3d773-caef-227e-a7e7-c2f13c622329
related:
- id: f5647edc-a7bf-4737-ab50-ef8c60dc3add
  type: obsolete
status: experimental
description: |
  Detects attackers using tooling with bad opsec defaults.
  E.g. spawning a sacrificial process to inject a capability into the process without taking into account how the process is normally run.
  One trivial example of this is using rundll32.exe without arguments as a sacrificial process (default in CS, now highlighted by c2lint), running WerFault without arguments (Kraken - credit am0nsec), and other examples.
references:
- https://blog.malwarebytes.com/malwarebytes-news/2020/10/kraken-attack-abuses-wer-service/
- https://www.cobaltstrike.com/help-opsec
- https://twitter.com/CyberRaiju/status/1251492025678983169
- https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/regsvr32
- https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/rundll32
- https://learn.microsoft.com/en-us/dotnet/framework/tools/regasm-exe-assembly-registration-tool
- https://learn.microsoft.com/en-us/dotnet/framework/tools/regsvcs-exe-net-services-installation-tool
author: Oleg Kolesnikov @securonix invrep_de, oscd.community, Florian Roth (Nextron
  Systems), Christian Burkard (Nextron Systems)
date: 2020-10-23
modified: 2024-08-15
tags:
- attack.defense-evasion
- attack.t1218.011
logsource:
  category: process_creation
  product: windows
detection:
  selection_werfault:
    Image|endswith: '\WerFault.exe'
    CommandLine|endswith: 'WerFault.exe'
  selection_rundll32:
    Image|endswith: '\rundll32.exe'
    CommandLine|endswith: 'rundll32.exe'
  selection_regsvcs:
    Image|endswith: '\regsvcs.exe'
    CommandLine|endswith: 'regsvcs.exe'
  selection_regasm:
    Image|endswith: '\regasm.exe'
    CommandLine|endswith: 'regasm.exe'
  selection_regsvr32:
    Image|endswith: '\regsvr32.exe'
    CommandLine|endswith: 'regsvr32.exe'
  filter_optional_edge_update:
    ParentImage|contains: '\AppData\Local\Microsoft\EdgeUpdate\Install\{'
    Image|endswith: '\rundll32.exe'
    CommandLine|endswith: 'rundll32.exe'
  filter_optional_chromium_installer:
        # As reported in https://github.com/SigmaHQ/sigma/issues/4570 and others
    ParentImage|contains:
    - '\AppData\Local\BraveSoftware\Brave-Browser\Application\'
    - '\AppData\Local\Google\Chrome\Application\'
    ParentImage|endswith: '\Installer\setup.exe'
    ParentCommandLine|contains: '--uninstall '
    Image|endswith: '\rundll32.exe'
    CommandLine|endswith: 'rundll32.exe'
  condition: 1 of selection_* and not 1 of filter_optional_*
falsepositives:
- Unlikely
level: high
notes: |
  ### Technical Context
  This Sigma rule aims to detect misuse of common Windows utilities by threat actors who overlook operational security (OpSec) best practices. Specifically, it focuses on "sacrificial processes" like `WerFault.exe`, `rundll32.exe`, `regsvcs.exe`, `regasm.exe`, and `regsvr32.exe` when they are executed without appropriate command-line arguments. Attackers often employ these legitimate processes to inject malicious code or capabilities, taking advantage of their trusted status on the Windows operating system. For example, invoking `rundll32.exe` or `WerFault.exe` without any arguments can indicate an attempt to obscure malicious activity or perform execution in a covert manner. The rule utilizes process creation logs from Windows to monitor for these abnormal executions, thereby aligning with the MITRE ATT&CK technique T1218.011 (System Services: Service Execution).
  ### Investigation Steps
  - **Check Process Logs:** Utilize your EDR solution to review the process creation logs for instances of `WerFault.exe`, `rundll32.exe`, and similar utilities to see if they are executed with unintended command-line arguments.
  - **Analyze Parent Processes:** Investigate the parent processes associated with these suspicious executions to determine if they originate from known benign applications or from potentially compromised sources.
  - **Correlate with Network Activity:** Use network detection tools to correlate any network connections made concurrently with the execution of these processes. Unusual outbound connections could indicate malicious intent.
  - **Review System and Security Logs:** Cross-reference the findings with Windows Security, Application, and System logs to assess if there are associated Windows events indicating unusual behavior or additional suspicious activities.
  ### Prioritization
  This alert is classified as high severity due to the potential risk it poses for exploitation through common system tools. Detection of sacrificial processes without proper arguments can signify an initial stage of an attack, necessitating immediate investigation to prevent further compromise.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where the monitored processes are used legitimately with appropriate arguments, potentially leading to false negatives. Additionally, adversaries may employ alternative or less common utilities to achieve similar objectives, thereby evading detection. The efficacy of the rule assumes that logging is effectively enabled for Windows process creation events across the enterprise environment. Without comprehensive logging, the capture of this suspicious activity could be incomplete.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
