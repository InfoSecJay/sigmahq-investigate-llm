title: Forfiles.EXE Child Process Masquerading
id: f53714ec-5077-420e-ad20-907ff9bb2958
status: test
description: |
  Detects the execution of "forfiles" from a non-default location, in order to potentially spawn a custom "cmd.exe" from the current working directory.
references:
- https://www.hexacorn.com/blog/2023/12/31/1-little-known-secret-of-forfiles-exe/
author: Nasreddine Bencherchali (Nextron Systems), Anish Bogati
date: 2024-01-05
tags:
- attack.defense-evasion
- attack.t1036
logsource:
  category: process_creation
  product: windows
detection:
  selection:
        # Notes:
        #   - The parent must not have CLI options
        #   - The Child Image must be named "cmd" as its hardcoded in the "forfiles" binary
        #   - The Child CLI will always contains "/c echo" as its hardcoded in the original "forfiles" binary
    ParentCommandLine|endswith:
    - '.exe'
    - '.exe"'
    Image|endswith: '\cmd.exe'
    CommandLine|startswith: '/c echo "'
  filter_main_parent_not_sys:
    ParentImage|contains:
    - ':\Windows\System32\'
    - ':\Windows\SysWOW64\'
    ParentImage|endswith: '\forfiles.exe'
    Image|contains:
    - ':\Windows\System32\'
    - ':\Windows\SysWOW64\'
    Image|endswith: '\cmd.exe'
  condition: selection and not 1 of filter_main_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The detection rule "Forfiles.EXE Child Process Masquerading" is designed to identify a specific instance of potential process masquerading involving the `forfiles.exe` utility on Windows systems. This utility is intended for batch processing of files and has been observed to be misused by attackers to spawn a malicious instance of `cmd.exe` from a non-standard location. The detection logic looks for processes where the parent command line ends with '.exe', filters out cases where the parent process is `forfiles.exe`, and checks that the child process executed is `cmd.exe` with a command line starting with "/c echo". This method leverages process creation logs, specifically focusing on the parent-child relationship between processes to highlight unusual or suspect activity. The rule correlates with the MITRE ATT&CK technique T1036 (Masquerading), within the Defense Evasion tactic, indicating attempts to conceal malicious behavior by mimicking legitimate system activity.
  ### Investigation Steps
  - **Review Process Creation Logs**: Utilize EDR tools to analyze the process creation logs to validate instances where `forfiles.exe` was executed and to check its child processes. Investigate the command line parameters to determine if they align with the patterns detected by the rule.
  - **Correlate Parent Process**: Identify the parent process of the detected `cmd.exe` execution to ensure it originated from `forfiles.exe` and not from a legitimate source. Look for any other anomalies in the command line arguments that could suggest manipulation.
  - **Examine Process Anomalies**: Check for unusual file paths associated with `forfiles.exe` and `cmd.exe`. Investigate whether the execution was initiated from a known safe location or if it stems from a potentially compromised directory.
  - **Check for Persistence Mechanisms**: Analyze related logs for any additional suspicious activities like DLL loading, network connections, or registry changes that might indicate further attempts at maintaining access or infection post-exploitation.
  ### Prioritization
  This alert is classified as high severity due to its potential association with malicious activity aimed at evading detection through process masquerading techniques, which can lead to greater infiltration or compromise of systems.
  ### Blind Spots and Assumptions
  This rule may not fire under certain conditions, such as if the attacker uses original system paths for `forfiles.exe` or employs alternative command shells with different naming conventions. Additionally, legitimate use of `forfiles.exe` for benign operational tasks could lead to false negatives. It assumes that the telemetry reliably captures all process creation events and their associated details, which might not be the case if log retention policies are overly strict or if there are gaps in data collection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
