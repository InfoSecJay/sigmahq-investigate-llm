title: Potentially Suspicious Child Process Of VsCode
id: 5a3164f2-b373-4152-93cf-090b13c12d27
status: test
description: Detects uncommon or suspicious child processes spawning from a VsCode
  "code.exe" process. This could indicate an attempt of persistence via VsCode tasks
  or terminal profiles.
references:
- https://twitter.com/nas_bench/status/1618021838407495681
- https://twitter.com/nas_bench/status/1618021415852335105
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-26
modified: 2023-10-25
tags:
- attack.execution
- attack.defense-evasion
- attack.t1218
- attack.t1202
logsource:
  category: process_creation
  product: windows
detection:
  selection_parent:
    ParentImage|endswith: '\code.exe'
  selection_children_images:
    Image|endswith:
    - '\calc.exe'
    - '\regsvr32.exe'
    - '\rundll32.exe'
    - '\cscript.exe'
    - '\wscript.exe'
  selection_children_cli:
    Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    - '\cmd.exe'
    CommandLine|contains:
    - 'Invoke-Expressions'
    - 'IEX'
    - 'Invoke-Command'
    - 'ICM'
    - 'DownloadString'
    - 'rundll32'
    - 'regsvr32'
    - 'wscript'
    - 'cscript'
  selection_children_paths:
    Image|contains:
            # Add more suspicious locations
    - ':\Users\Public\'
    - ':\Windows\Temp\'
    - ':\Temp\'
  condition: selection_parent and 1 of selection_children_*
falsepositives:
- In development environment where VsCode is used heavily. False positives may occur
  when developers use task to compile or execute different types of code. Remove or
  add processes accordingly
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potentially malicious child processes that are spawned from the Visual Studio Code (VsCode) executable (`code.exe`). By monitoring the process creation logs, the rule identifies unusual child processes that may indicate an attacker is attempting to exploit VsCode for persistence or executing malicious commands. The rule checks for known suspicious child processes such as `calc.exe`, `regsvr32.exe`, and others that could be used in various attack scenarios, including command execution and script automation. Additionally, it scrutinizes command-line parameters in commonly used utilities like PowerShell and CMD for signs of malicious behavior, such as `Invoke-Expressions` and `DownloadString`. Key data sources involved include Windows process creation logs and command-line arguments.
  ### Investigation Steps
  - Investigate the parent process `code.exe` in the EDR to confirm its source and whether it was executed legitimately or an unusual instance.
  - Review the child processes spawned by `code.exe`, particularly looking for those that are not typically associated with normal development activities to assess their legitimacy.
  - Analyze the command-line parameters of suspicious child processes using logs from EDR or SIEM to determine if any of them exhibit traits associated with known attack techniques.
  - Check for any unusual file creations or modifications in temp directories (`C:\Windows\Temp`, `C:\Users\Public`) during the time the suspicious activity was recorded for additional context on potential malicious activity.
