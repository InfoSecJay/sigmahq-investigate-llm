title: Potentially Suspicious Child Process Of VsCode
id: 5a3164f2-b373-4152-93cf-090b13c12d27
status: test
description: Detects uncommon or suspicious child processes spawning from a VsCode
  "code.exe" process. This could indicate an attempt of persistence via VsCode tasks
  or terminal profiles.
references:
- https://twitter.com/nas_bench/status/1618021838407495681
- https://twitter.com/nas_bench/status/1618021415852335105
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-26
modified: 2023-10-25
tags:
- attack.execution
- attack.defense-evasion
- attack.t1218
- attack.t1202
logsource:
  category: process_creation
  product: windows
detection:
  selection_parent:
    ParentImage|endswith: '\code.exe'
  selection_children_images:
    Image|endswith:
    - '\calc.exe'
    - '\regsvr32.exe'
    - '\rundll32.exe'
    - '\cscript.exe'
    - '\wscript.exe'
  selection_children_cli:
    Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    - '\cmd.exe'
    CommandLine|contains:
    - 'Invoke-Expressions'
    - 'IEX'
    - 'Invoke-Command'
    - 'ICM'
    - 'DownloadString'
    - 'rundll32'
    - 'regsvr32'
    - 'wscript'
    - 'cscript'
  selection_children_paths:
    Image|contains:
            # Add more suspicious locations
    - ':\Users\Public\'
    - ':\Windows\Temp\'
    - ':\Temp\'
  condition: selection_parent and 1 of selection_children_*
falsepositives:
- In development environment where VsCode is used heavily. False positives may occur
  when developers use task to compile or execute different types of code. Remove or
  add processes accordingly
level: medium
notes: |
  ### Technical Context
  This detection rule identifies potentially malicious or unusual child processes that spawn from the Visual Studio Code executable (`code.exe`). The rule focuses on process creation events where `code.exe` is the parent process, inspecting its child processes for known suspicious activities often associated with code execution and potential persistence mechanisms. Such suspicious child processes may include common, benign executables like `calc.exe` or `regsvr32.exe`, which attackers could leverage for nefarious purposes. Additionally, it monitors for specific command-line patterns associated with PowerShell (`powershell.exe`, `pwsh.exe`) and command prompts (`cmd.exe`) that are indicative of potential script executions or download commands. This behavior can be tied to MITRE ATT&CK techniques, specifically related to Execution (T1202) and Defense Evasion (T1218), as adversaries could be manipulating VSCode to execute their malicious payloads under the guise of legitimate development activities.
  ### Investigation Steps
  - **Check EDR Alerts:** Review EDR alerts for any related suspicious process activity involving `code.exe`, focusing on the execution times and parent-child relationships.
  - **Review Command-Line Arguments:** Inspect the command-line arguments associated with the child processes to identify any unusual patterns, especially those containing terms like 'Invoke-Expressions' or 'DownloadString'.
  - **Analyze Process Creation Logs:** Utilize Windows Security Event Logs to cross-reference process creation events, ensuring consistent monitoring across your enterprise environment for any past anomalies.
  - **Examine Developer Actions:** If the alert pertains to a development environment, engage with the relevant developers to ascertain whether the observed behavior aligns with legitimate development practices.
  ### Prioritization
  The severity level is rated as medium due to the potential for misuse of developmental tools like Visual Studio Code by threat actors, which may lead to unauthorized execution of malicious scripts or persistence mechanisms.
  ### Blind Spots and Assumptions
  There are several acknowledged limitations with this rule. It may not fire in environments with heavy usage of Visual Studio Code for legitimate development purposes, leading to probable false positives. Additionally, malicious actors may employ obfuscation or rename the parent process, skewing the detection. Furthermore, the rule assumes consistent logging from Sysmon where process creation events are monitored, and any lapses in logging can create gaps in visibility.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
