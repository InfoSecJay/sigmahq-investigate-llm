title: UtilityFunctions.ps1 Proxy Dll
id: 0403d67d-6227-4ea8-8145-4e72db7da120
status: test
description: Detects the use of a Microsoft signed script executing a managed DLL
  with PowerShell.
references:
- https://lolbas-project.github.io/lolbas/Scripts/UtilityFunctions/
author: frack113
date: 2022-05-28
tags:
- attack.defense-evasion
- attack.t1216
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains:
    - 'UtilityFunctions.ps1'
    - 'RegSnapin '
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The "UtilityFunctions.ps1 Proxy Dll" Sigma rule is designed to detect the execution of a Microsoft signed PowerShell script that utilizes a managed DLL. The rule focuses on the use of command lines that contain specific keywords, namely 'UtilityFunctions.ps1' and 'RegSnapin'. When a PowerShell script is executed, the command line inputs are captured in process creation logs, which allows for proactive monitoring of potentially malicious activity. This rule operates under the MITRE ATT&CK tactic of "Defense Evasion" and specifically targets technique T1216, which involves the use of signed scripts to bypass security controls. By monitoring the process creation events, particularly focusing on command-line parameters, analysts can identify attempts to manipulate system behavior and evade detection.
  ### Investigation Steps
  - **Check Process Creation Logs**: Review the relevant Windows Event Logs for process creation (Event ID 4688) to identify instances of `UtilityFunctions.ps1` being executed.
  - **Analyze Command-Line Arguments**: Investigate the command-line arguments associated with the detected PowerShell execution for abnormal or suspicious parameters that may indicate malicious intent.
  - **Correlate with EDR Alerts**: Utilize EDR tools to gather additional context on the execution, including the parent process, network connections, and file operations related to the PowerShell script.
  - **Review Alternate Sources**: Analyze logs from proxies and firewall devices for outbound connections made during the script's execution to identify any data exfiltration or lateral movement attempts.
  ### Prioritization
  The severity of this alert is considered medium due to the potential for an adversary to leverage a signed script for malicious purposes, which could indicate ongoing reconnaissance or preparation for a future attack. Timely investigation is critical to detect any further indications of compromise.
  ### Blind Spots and Assumptions
  It is essential to note that this rule may not fire if the PowerShell execution is obfuscated or if the malicious actor uses different command-line parameters. Furthermore, reliance on the presence of `UtilityFunctions.ps1` means that similar tactics using other scripts or direct PowerShell commands may go undetected. Analysts should be aware that legitimate administrative activities might also trigger this detection, requiring careful contextual investigation.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
