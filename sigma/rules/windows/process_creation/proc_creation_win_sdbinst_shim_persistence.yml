title: Potential Shim Database Persistence via Sdbinst.EXE
id: 517490a7-115a-48c6-8862-1a481504d5a8
related:
- id: 18ee686c-38a3-4f65-9f44-48a077141f42
  type: similar
status: test
description: |
  Detects installation of a new shim using sdbinst.exe.
  Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims
references:
- https://www.mandiant.com/resources/blog/fin7-shim-databases-persistence
author: Markus Neis
date: 2019-01-16
modified: 2023-12-06
tags:
- attack.persistence
- attack.privilege-escalation
- attack.t1546.011
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\sdbinst.exe'
  - OriginalFileName: 'sdbinst.exe'
  selection_cli:
    CommandLine|contains: '.sdb'
  filter_optional_iis:
    ParentImage|endswith: '\msiexec.exe'
    CommandLine|contains:
            # Expected behavior for IIS Express (e.g. https://www.hybrid-analysis.com/sample/15d4ff941f77f7bdfc9dfb2399b7b952a0a2c860976ef3e835998ff4796e5e91?environmentId=120)
    - ':\Program Files (x86)\IIS Express\iisexpressshim.sdb'
    - ':\Program Files\IIS Express\iisexpressshim.sdb'
  condition: all of selection_* and not 1 of filter_optional_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled *Potential Shim Database Persistence via Sdbinst.EXE* is designed to detect malicious activities related to application shimming on Windows systems. It achieves this by monitoring process creation events specifically for the execution of `sdbinst.exe`, a legitimate Windows utility used to install shim databases. The rule focuses on instances where `sdbinst.exe` is invoked with a command line containing `.sdb`, indicating an attempt to register a potentially malicious shim that could establish persistence or elevate privileges within the system. This behavior aligns with the MITRE ATT&CK framework, specifically under the tactic of Persistence (T1546.011 
  - Event Triggered Execution).
  The detection relies on data sources such as Windows Process Creation logs, specifically tracking the image name (to confirm it’s `sdbinst.exe`) and analyzing command-line parameters for signs of anomalous behavior. It also implements an optional filter for instances where `sdbinst.exe` is launched by `msiexec.exe`, which is commonly associated with legitimate software installations to reduce false positives.
  ### Investigation Steps
  - **Review Process Creation Logs:** Examine recent process creation logs for instances of `sdbinst.exe` to confirm its execution context and any suspicious command-line arguments associated with the event.
    
  - **Validate the Context of Execution:** Contextualize the execution of `sdbinst.exe` by investigating the parent process ID (PID) and other related processes to identify any associations with known malware or unusual behavior patterns.
    
  - **Examine Shim Database Entries:** Investigate the system’s shim database entries to determine if any newly created shims are present and assess their legitimacy and source.
    
  - **Correlate with Other Logs:** Cross-reference findings with other enterprise logs, such as EDR telemetry or firewall logs, to identify any related suspicious activities that may support a broader compromise investigation.
  ### Prioritization
  The alert is marked as medium severity due to the potential for adversaries to establish persistence mechanisms or elevate privileges within an enterprise environment, which can lead to further exploitation or data breaches if successfully executed.
  ### Blind Spots and Assumptions
  This detection rule may not fire if the `sdbinst.exe` utility is executed in a legitimate context where no suspicious command-line arguments are present, potentially causing legitimate activities to go unnoticed. Additionally, attackers may disguise their use of `sdbinst.exe` under other processes or use alternative methods for persistence that do not trigger this rule. Engineers should be aware that modifications to process attributes or execution paths can render this detection ineffective against sophisticated threats.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
