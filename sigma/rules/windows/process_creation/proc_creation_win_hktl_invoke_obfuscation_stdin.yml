title: Invoke-Obfuscation STDIN+ Launcher
id: 6c96fc76-0eb1-11eb-adc1-0242ac120002
status: test
description: Detects Obfuscated use of stdin to execute PowerShell
references:
- https://github.com/SigmaHQ/sigma/issues/1009      # (Task 25)
author: Jonathan Cheong, oscd.community
date: 2020-10-15
modified: 2024-04-15
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
        # Example 1: c:\windows\sYstEm32\CmD.eXE /C"echO\Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -NoEXiT -"
        # Example 2: c:\WiNDOws\sysTEm32\cmd.EXe /C " ECHo Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -nol ${EXEcUtIONCONTeXT}.INvOkEComMANd.InvOKEScRIPt( $InpUt )"
    CommandLine|re: 'cmd.{0,5}(?:/c|/r).+powershell.+(?:\$\{?input\}?|noexit).+\"'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The Sigma rule "Invoke-Obfuscation STDIN+ Launcher" is designed to detect obfuscated usages of PowerShell that leverage the command-line interface (CLI) in a potentially malicious manner. Specifically, this rule identifies command executions where `cmd.exe` is used to execute PowerShell commands through obfuscation techniques. The detection mechanism focuses on the command line parameters associated with process creation events, monitoring for specific patterns indicative of malicious behavior, such as the use of `Invoke-Expression` in conjunction with PowerShell's `-NoExit` argument. The primary data sources for this rule include Windows process creation logs that capture the specifics of executed commands and their arguments. This rule maps to MITRE ATT&CK tactics including "Defense Evasion" (T1027) and "Execution" (T1059.001), indicating attempts to evade detection while executing script-based payloads.
  ### Investigation Steps
  - **Review Process Creations:** Check recent process creation logs in your EDR solution to identify instances of `cmd.exe` launching PowerShell with suspicious command line arguments that match the rule criteria.
  - **Examine Command Line Arguments:** Look closely at the command line parameters associated with the detected processes to confirm if they contain anomalous or obfuscated strings that warrant further investigation.
  - **Analyze Network Activity:** Utilize network logs from your NDR or firewall to assess if there were any outbound connections made to foreign IP addresses following the execution of the identified commands.
  - **Investigate User Context:** Check the user account under which the suspicious process was executed in Windows Security logs to determine if it aligns with expected user behavior or if it appears as an unauthorized account.
  ### Prioritization
  Given the high-level severity of this alert, it suggests a significant potential risk, as obfuscation is commonly used by adversaries to avoid detection while executing malicious scripts, making swift investigation critical to mitigate possible breaches.
  ### Blind Spots and Assumptions
  This rule may fail to catch advanced evasion techniques where attackers modify their command sequences beyond the specified regex patterns, or where execution occurs outside the monitored command-line interfaces. It also assumes that the telemetry for process creation is enabled and properly configured; if telemetry is lacking or misconfigured, the detection will be rendered ineffective. Additionally, it is possible that benign commands may unintentionally match the detection, necessitating human review during investigations.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
