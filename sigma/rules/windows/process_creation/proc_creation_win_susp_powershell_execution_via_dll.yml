title: Potential PowerShell Execution Via DLL
id: 6812a10b-60ea-420c-832f-dfcc33b646ba
status: test
description: |
  Detects potential PowerShell execution from a DLL instead of the usual PowerShell process as seen used in PowerShdll.
  This detection assumes that PowerShell commands are passed via the CommandLine.
references:
- https://github.com/p3nt4/PowerShdll/blob/62cfa172fb4e1f7f4ac00ca942685baeb88ff356/README.md
author: Markus Neis, Nasreddine Bencherchali (Nextron Systems)
date: 2018-08-25
modified: 2024-03-07
tags:
- attack.defense-evasion
- attack.t1218.011
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith:
    - '\InstallUtil.exe'
    - '\RegAsm.exe'
    - '\RegSvcs.exe'
    - '\regsvr32.exe'
    - '\rundll32.exe'
  - OriginalFileName:
    - 'InstallUtil.exe'
    - 'RegAsm.exe'
    - 'RegSvcs.exe'
    - 'REGSVR32.EXE'
    - 'RUNDLL32.EXE'
  selection_cli:
    CommandLine|contains:
    - 'Default.GetString'
    - 'DownloadString'
    - 'FromBase64String'
    - 'ICM '
    - 'IEX '
    - 'Invoke-Command'
    - 'Invoke-Expression'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potentially malicious PowerShell executions that are invoked in an unusual manner, specifically via Dynamic Link Libraries (DLLs) instead of the standard PowerShell executable. The rule focuses on process creation activities where specific known utilities associated with Windows are utilizedâ€”such as `rundll32.exe` and `regsvr32.exe`. It monitors for command-line parameters that are commonly used in malicious PowerShell scripts, such as `Invoke-Expression` or `IEX`, signaling that PowerShell commands are being executed indirectly. This alert ties to the MITRE ATT&CK tactic of Defense Evasion (T1218.011), which focuses on adversaries attempting to bypass security measures by using legitimate processes for malicious purposes.
  The detection involves analyzing process creation logs to identify instances where these specific images execute commands indicating PowerShell activity. The inclusion of the `OriginalFileName` property serves as an additional layer to validate that these processes are indeed legitimate Windows tools rather than a disguised malicious executable.
  ### Investigation Steps
  - **Review EDR Alerts:** Investigate any suspicious process creations flagged by your EDR solution associated with the identified DLLs (`rundll32.exe`, `regsvr32.exe`). Pay close attention to the context of these processes and the user account under which they were executed.
  - **Check Command-Line Arguments:** For alerts related to the specified processes, analyze the command-line parameters used. Look for any sequences indicative of PowerShell execution (e.g., `IEX`, `Invoke-Expression`), and determine the legitimacy of these commands.
  - **Correlate with Security Logs:** Access Windows Security logs to identify any unusual account activities concurrent with the flagged process executions. Focus on user logins, privilege escalations, or access to sensitive resources.
  - **Network Traffic Analysis:** Use your NDR tools to evaluate outbound network connections made by the suspicious processes. Monitor for attempts to communicate with known malicious IPs or domains that could indicate data exfiltration or command-and-control activities.
  ### Prioritization
  This alert is categorized as high severity due to the use of legitimate system processes to execute potentially harmful PowerShell commands. Such activities are indicative of sophisticated techniques employed by adversaries to evade detection, which could signal ongoing malicious activity within the enterprise environment.
  ### Blind Spots and Assumptions
  While this rule effectively captures many instances of abnormal PowerShell executions, there are potential blind spots where the rule may not fire. For example, if an attacker uses a different method to execute PowerShell commands or utilizes custom-built processes instead of the specified DLLs, this detection will not trigger. Additionally, false negatives may occur if a legitimate application also uses these command-line parameters for benign purposes. It is assumed that all necessary telemetry data is being collected and analyzed as part of the organization's security posture.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
