title: HackTool - DInjector PowerShell Cradle Execution
id: d78b5d61-187d-44b6-bf02-93486a80de5a
status: test
description: Detects the use of the Dinject PowerShell cradle based on the specific
  flags
references:
- https://web.archive.org/web/20211001064856/https://github.com/snovvcrash/DInjector     # Original got deleted. This is a fork
author: Florian Roth (Nextron Systems)
date: 2021-12-07
modified: 2023-02-04
tags:
- attack.defense-evasion
- attack.t1055
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains|all:
    - ' /am51'
    - ' /password'
  condition: selection
falsepositives:
- Unlikely
level: critical
notes: |
  ### Technical Context
  The "HackTool 
  - DInjector PowerShell Cradle Execution" rule is designed to identify the execution of a specific PowerShell command associated with the DInjector tool, which is often used for injecting code into running processes as a form of defense evasion. This rule works by monitoring process creation events and filtering them for specific command-line arguments indicative of the DInjector tool's usage, particularly looking for parameters such as '/am51' and '/password'. The technical data sources involved include process creation logs from Windows, which provide insights into the commands executed on the system, including any associated parameters that could indicate malicious intent. This is closely related to the MITRE ATT&CK tactic of defense evasion, specifically technique T1055, which covers process injection techniques.
  ### Investigation Steps
  - **Review Process Creation Logs:** Utilize EDR to filter process creation events based on the detected command-line parameters associated with DInjector, paying attention to the user context and parent processes.
    
  - **Analyze Network Connections:** Check for any unusual network connections or DNS queries from the host during the time of the alert, as injected processes may attempt to communicate with command and control servers.
  - **Inspect PowerShell Logs:** Examine PowerShell logs and any scripts executed around the time of the alert for additional indicators of malicious activity, including script content and prior history.
  - **Cross-reference with Threat Intelligence:** Use threat intelligence platforms to determine if the detected command-line patterns are known to be used by malicious actors, looking for reported incidents or associated malware families.
  ### Prioritization
  This alert is classified as critical due to the potential severe implication of process injection techniques, which can facilitate unauthorized access, data exfiltration, or lateral movement within the network.
  ### Blind Spots and Assumptions
  This rule may not trigger if the DInjector PowerShell cradle is executed with obfuscated command-line arguments or in a different context that does not utilize the specific flags. Additionally, if a legitimate software installation accidentally uses similar command-line arguments, it may lead to false positives. Analysts should be aware that skilled adversaries may modify their command-line usage to bypass detection, thus necessitating broader monitoring strategies for effective detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
