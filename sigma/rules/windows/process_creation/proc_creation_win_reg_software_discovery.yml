title: Detected Windows Software Discovery
id: e13f668e-7f95-443d-98d2-1816a7648a7b
related:
- id: 2650dd1a-eb2a-412d-ac36-83f06c4f2282
  type: derived
status: test
description: Adversaries may attempt to enumerate software for a variety of reasons,
  such as figuring out what security measures are present or if the compromised system
  has a version of software that is vulnerable.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1518/T1518.md
- https://github.com/harleyQu1nn/AggressorScripts     # AVQuery.cna
author: Nikita Nazarov, oscd.community
date: 2020-10-16
modified: 2022-10-09
tags:
- attack.discovery
- attack.t1518
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith: '\reg.exe'        # Example: reg query "HKEY_LOCAL_MACHINE\Software\Microsoft\Internet Explorer" /v svcVersion
    CommandLine|contains|all:
    - 'query'
    - '\software\'
    - '/v'
    - 'svcversion'
  condition: selection
falsepositives:
- Legitimate administration activities
level: medium
notes: |
  ### Technical Context
  The "Detected Windows Software Discovery" detection rule aims to identify potential enumeration of software on Windows systems. Adversaries may attempt to discover software installed on a compromised system for various reasons, including identifying existing security measures or vulnerabilities they can exploit. This rule analyzes process creation logs specifically for instances of `reg.exe`, a command-line tool used to interact with the Windows registry. The detection focuses on command lines that include the keywords "query," the path to software keys, and a specific parameter `/v svcVersion`, indicating an attempt to retrieve software version information.
  This rule falls under the MITRE ATT&CK framework tactic of Discovery (Tactic: **Discovery**, Technique: **T1518**), which encompasses activities aimed at identifying information about the environment, such as software in use. Monitoring for these specific command line patterns helps defenders understand unauthorized attempts to enumerate software, providing crucial insight into potential reconnaissance activities by adversaries.
  ### Investigation Steps
  - **Check Process Creation Logs:** Review the process creation logs in your SIEM for instances of `reg.exe` being executed with the command line containing the specified patterns. Identify the user and time of execution to ascertain context around the activity.
  - **Review EDR Alerts:** Verify if any additional Endpoint Detection and Response (EDR) alerts correlate with the time frame of the detected command. Look for indicators of compromise or suspicious behavior associated with the user or system.
  - **Analyze Network and Proxy Logs:** Check network connection logs and proxy server logs for any unusual outbound connections following the time of the software enumeration activity. This can help determine if the system was exfiltrating data or communicating with known malicious IP addresses.
  - **Inspect User Behavior and Access:** Analyze the user's recent activities to assess whether the software discovery aligns with legitimate administrative tasks or if it appears to be malicious reconnaissance. Check if other systems were similarly probed for software versions.
  ### Prioritization
  The alert is classified as medium severity due to the potential implications of software discovery activities. While this could be a legitimate administrative action, it often serves as a precursor to more malicious activities, necessitating prompt investigation to rule out unauthorized access.
  ### Blind Spots and Assumptions
  This rule may not fire in environments where the use of `reg.exe` is not common, or users are frequently performing legitimate registry queries. Additionally, adversaries might utilize custom scripts or tools that do not trigger this detection. It's plausible that legitimate administrative activities could lead to false positives, particularly in environments with extensive software management tasks. Understanding these scenarios helps refine detection efficacy and reduces the likelihood of alert fatigue among security analysts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
