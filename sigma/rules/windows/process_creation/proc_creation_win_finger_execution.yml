title: Finger.EXE Execution
id: af491bca-e752-4b44-9c86-df5680533dbc
status: test
description: |
  Detects execution of the "finger.exe" utility.
  Finger.EXE or "TCPIP Finger Command" is an old utility that is still present on modern Windows installation. It Displays information about users on a specified remote computer (typically a UNIX computer) that is running the finger service or daemon.
  Due to the old nature of this utility and the rareness of machines having the finger service. Any execution of "finger.exe" can be considered "suspicious" and worth investigating.
references:
- https://twitter.com/bigmacjpg/status/1349727699863011328?s=12
- https://app.any.run/tasks/40115012-a919-4208-bfed-41e82cb3dadf/
- http://hyp3rlinx.altervista.org/advisories/Windows_TCPIP_Finger_Command_C2_Channel_and_Bypassing_Security_Software.txt
author: Florian Roth (Nextron Systems), omkar72, oscd.community
date: 2021-02-24
modified: 2024-06-27
tags:
- attack.command-and-control
- attack.t1105
logsource:
  category: process_creation
  product: windows
detection:
  selection:
  - OriginalFileName: 'finger.exe'
  - Image|endswith: '\finger.exe'
  condition: selection
falsepositives:
- Admin activity (unclear what they do nowadays with finger.exe)
level: high
notes: |
  ### Technical Context
  The Sigma rule "Finger.EXE Execution" is designed to detect the execution of the Windows utility "finger.exe," which is generally considered outdated and rarely used in contemporary environments. The rule functions by looking for process creation logs indicating the presence of this specific executable, either by its original file name or through its file path. Since "finger.exe" is associated with querying user information on remote systems, its execution could suggest potential malicious activity, such as exploitation or reconnaissance, particularly in environments where the utility is not typically run. As specified in the MITRE ATT&CK framework, this detection relates to the tactics of Command and Control (T1105), as adversaries may use such tools to establish communication with compromised systems or gather additional intelligence.
  The primary data sources leveraged by this detection include Windows Event Logs, specifically focusing on process creation events recorded by the operating system. This allows incident responders to identify not only the execution of the application but also its context, such as the user initiating the command and any associated parameters.
  ### Investigation Steps
  - **Review Process Creation Logs**: Utilize your EDR system to analyze process creation logs for instances of "finger.exe" being executed, noting the user and the process tree associated with the execution.
  - **Correlate with Networking Events**: Check for network connections initiated by the host running "finger.exe" using NDR to see if there were any suspicious outbound connections that coincide with the execution of the utility.
  - **Assess User Activity**: Investigate the associated user account's behavior in the Windows Security logs to determine if there are any prior instances of unusual activity or if this account was compromised.
  - **Validate Against Threat Intelligence**: Cross-reference the occurrence with external threat intelligence sources to identify if similar activity has been reported and if this aligns with known attack patterns in your environment.
  ### Prioritization
  The alert is considered high severity due to the uncommon nature of "finger.exe" execution in modern enterprise environments, which raises the likelihood of malicious intent, requiring prompt investigation to mitigate any potential threats.
  ### Blind Spots and Assumptions
  One assumption inherent in the rule is that environments will not have legitimate uses for "finger.exe." In cases where legitimate admin activities involve its execution, this could lead to false positives. Additionally, if adversaries modify their tactics to disguise the execution or if the utility is renamed, the rule may fail to trigger. Other potential blind spots include environments that do not log all process creation events or utilize alternate logging methods that are not captured in traditional Windows logs.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
