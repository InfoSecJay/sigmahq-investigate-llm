title: Invoke-Obfuscation COMPRESS OBFUSCATION
id: 7eedcc9d-9fdb-4d94-9c54-474e8affc0c7
status: test
description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION
references:
- https://github.com/SigmaHQ/sigma/issues/1009     # (Task 19)
author: Timur Zinniatullin, oscd.community
date: 2020-10-18
modified: 2022-12-29
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains|all:
    - 'new-object'
    - 'text.encoding]::ascii'
    CommandLine|contains:
    - 'system.io.compression.deflatestream'
    - 'system.io.streamreader'
    - 'readtoend('
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  n
  ### Technical Context
  The Sigma rule titled "Invoke-Obfuscation COMPRESS OBFUSCATION" aims to detect the use of obfuscated PowerShell commands that may be used as a technique for evading detection during malicious activities. This rule focuses on identifying specific command-line parameters associated with PowerShell, particularly those that involve ASCII encoding and compression streams. The detection leverages process creation logs to capture instances where the command line includes terms related to the `new-object`, `system.io.compression.deflatestream`, and `system.io.streamreader`, which are common in obfuscation tactics employed by threat actors. The rule is linked to the MITRE ATT&CK tactics of Defense Evasion (T1027), Execution (T1059.001), and highlights how adversaries can mask their intentions using complex scripts to blend in with legitimate operations.
  ### Investigation Steps
  - **Review Process Creation Logs:** Check the Windows Event Logs for process creation events that match the criteria outlined in the Sigma rule, focusing on any instances of PowerShell execution.
  - **Analyze Command-Line Parameters:** Use your EDR or SIEM to examine the command-line arguments associated with the detected PowerShell execution, looking for other obfuscation patterns or suspicious activity.
  - **Correlate with Other Alerts:** Cross-reference any alerts generated by other security layers, such as AV or NDR, to identify whether this PowerShell execution is linked with known malicious behavior or campaigns.
  - **Assess Host Context:** Investigate the affected machine's context; determine if there were any recent security incidents, software installations, or user activities that might account for the obfuscated command execution.
  ### Prioritization
  The alert is assigned a medium severity level due to its association with obfuscation techniques that may indicate an attempt to execute malicious code, requiring timely investigation to prevent further compromise or lateral movement within the network.
  ### Blind Spots and Assumptions
  This rule may not fire if the obfuscated PowerShell command does not include the specified keywords or if logging is not adequately configured on the endpoints. Additionally, attackers may use alternative methods to obfuscate their commands, such as different encoding techniques or bypassing PowerShell entirely for script execution, which would not be captured by this rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
