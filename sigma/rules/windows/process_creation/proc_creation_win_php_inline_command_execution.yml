title: Php Inline Command Execution
id: d81871ef-5738-47ab-9797-7a9c90cd4bfb
status: test
description: Detects execution of php using the "-r" flag. This is could be used as
  a way to launch a reverse shell or execute live php code.
references:
- https://www.php.net/manual/en/features.commandline.php
- https://www.revshells.com/
- https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-01-02
tags:
- attack.execution
- attack.t1059
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\php.exe'
  - OriginalFileName: 'php.exe'
  selection_cli:
    CommandLine|contains: ' -r'
  condition: all of selection_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the execution of PHP scripts using the command line with the `-r` flag, which allows for inline execution of PHP code. This functionality can enable attackers to run arbitrary PHP commands directly from the command line, potentially leading to malicious activities such as launching reverse shells or executing harmful PHP code that compromises the system's security. The detection leverages event logs related to process creation on Windows, focusing specifically on instances where the PHP executable (`php.exe`) is invoked with the `-r` command line parameter. By monitoring for this particular pattern, the rule correlates with the MITRE ATT&CK technique T1059, which pertains to running code on target systems.
  ### Investigation Steps
  - **Confirm the Alert Context:** Verify the alert details in the EDR console to view the specific process creation events associated with `php.exe` and determine the user account that initiated the command.
  - **Review Command-Line Arguments:** Inspect the full command-line parameters used during execution to assess the nature of the PHP code attempted and identify any potentially malicious entries.
  - **Check Network Activity:** Utilize network logs from the NGFW or NDR to see if there were any outbound connections initiated by the process that align with common indicators of compromise, such as IP addresses belonging to known malicious infrastructure.
  - **Analyze System Logs:** Examine relevant Windows Event Logs, such as Security and Sysmon, for any additional entries that may indicate suspicious behavior linked to the execution of the PHP command, including user login times and other process interactions.
  ### Prioritization
  This alert is categorized as medium severity due to the potential risks associated with unintended PHP command execution, which could lead to a security incident. It indicates a potentially anomalous activity that warrants further investigation, especially in contexts where PHP should not be executed.
  ### Blind spots and Assumptions
  The detection may fail to fire if the adversary renames the `php.exe` executable or runs PHP scripts through a different method that does not invoke the command line with the `-r` flag. Additionally, if the environment does not have PHP installed or if it has been restricted, the rule would not trigger. It should also be noted that legitimate applications may utilize the `-r` flag, potentially generating false positives. Proper context gathering around the execution and the environment is critical for accurate alerting.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
