title: Elevated System Shell Spawned From Uncommon Parent Location
id: 178e615d-e666-498b-9630-9ed363038101
related:
- id: 61065c72-5d7d-44ef-bf41-6a36684b545f
  type: similar
status: test
description: Detects when a shell program such as the Windows command prompt or PowerShell
  is launched with system privileges from a uncommon parent location.
references:
- https://github.com/Wh04m1001/SysmonEoP
author: frack113, Tim Shelton (update fp)
date: 2022-12-05
modified: 2023-11-23
tags:
- attack.privilege-escalation
- attack.defense-evasion
- attack.execution
- attack.t1059
logsource:
  product: windows
  category: process_creation
detection:
  selection_shell:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    - '\cmd.exe'
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
    - 'Cmd.Exe'
  selection_user:
    User|contains:     # covers many language settings
    - 'AUTHORI'
    - 'AUTORI'
    LogonId: '0x3e7'
  filter_main_generic:
        # Example 1:
        #   C:\Program Files\erl-23.2\erts-11.1.4\bin\erl.exe" -service_event ErlSrv_RabbitMQ -nohup -sname rabbit@localhost -s rabbit boot -boot start_sasl +W w +MBas ageffcbf +MHas ageffcbf +MBlmbcs 512 +MHlmbcs 512 +MMmcs 30 +P 1048576 +t 5000000 +stbt db +zdbbl 128000 +sbwt none +sbwtdcpu none +sbwtdio none -kernel inet_dist_listen_min 25672 -kernel inet_dist_listen_max 25672 -lager crash_log false -lager handlers []
        # Example 2:
        #   ParentImage: C:\Program Files (x86)\Varonis\DatAdvantage\GridCollector\VrnsRealTimeAlertsSvc.exe" /appid 000000ad-cb03-500b-9459-c46d000000ad
        #   CommandLine: C:\Windows\system32\cmd.exe /c C:\Program Files "(x86)\Varonis\DatAdvantage\GridCollector\handle_scopes.cmd C:\Collector" Working Share\VaronisWorkDirectoryCollector
    ParentImage|contains:
    - ':\Program Files (x86)\'
    - ':\Program Files\'
    - ':\ProgramData\'
    - ':\Windows\System32\'
    - ':\Windows\SysWOW64\'
    - ':\Windows\Temp\'         # Installers
    - ':\Windows\WinSxS\'
  filter_optional_manageengine:
        # Example:
        #   ParentImage: C:/ManageEngine/ADManager Plus/pgsql/bin/postgres.exe" --forkarch 5380
        #   CommandLine: C:\Windows\system32\cmd.exe /c "IF EXIST archive.bat (archive.bat pg_wal\000000010000008E000000EA 000000010000008E000000EA)
    ParentImage|endswith: ':\ManageEngine\ADManager Plus\pgsql\bin\postgres.exe'
    Image|endswith: '\cmd.exe'
  filter_optional_asgard:
    CommandLine|contains: ':\WINDOWS\system32\cmd.exe /c "'
    CurrentDirectory|contains: ':\WINDOWS\Temp\asgard2-agent\'
  filter_optional_ibm_spectrumprotect:
    ParentImage|contains: ':\IBM\SpectrumProtect\webserver\scripts\'
    CommandLine|contains: ':\IBM\SpectrumProtect\webserver\scripts\'
  filter_main_parent_null:
    ParentImage:
  filter_main_parent_empty:
    ParentImage: ''
  condition: all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule aims to detect potentially malicious activities where elevated system shells, such as Windows PowerShell or CMD, are spawned from uncommon or suspicious parent processes. Specifically, it identifies instances where these shells are executed with system privileges (LogonId: '0x3e7') and filters out common parent applications such as standard installation directories. The rule looks for specific characteristics in the process creation logs, including the executable name of the shell and its parent image path, focusing on unusual locations that deviate from the expected operational environment. By correlating these data points within Windows process creation logs, the rule enhances the capacity of security teams to identify potential privilege escalation or evasion tactics used by threat actors.
  ### Investigation Steps
  - Review the related process creation logs using EDR tools to see details about the shell commands that were executed and the context of the parent process that spawned them.
  - Validate the legitimacy of the parent process by cross-referencing it with known applications, installations, or services, especially those located outside standard directories.
  - Conduct an analysis of the command-line arguments provided to the shell, checking for obfuscation or suspicious command patterns that may indicate malicious intent.
  - Examine log entries from NGFW or cloud services for any unusual outbound connections or data exfiltration attempts linked to the identified process and command execution.
