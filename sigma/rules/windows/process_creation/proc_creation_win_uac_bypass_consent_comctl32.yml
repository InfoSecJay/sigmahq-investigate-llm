title: UAC Bypass Using Consent and Comctl32 - Process
id: 1ca6bd18-0ba0-44ca-851c-92ed89a61085
status: test
description: Detects the pattern of UAC Bypass using consent.exe and comctl32.dll
  (UACMe 22)
references:
- https://github.com/hfiref0x/UACME
author: Christian Burkard (Nextron Systems)
date: 2021-08-23
modified: 2024-12-01
tags:
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1548.002
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\consent.exe'
    Image|endswith: '\werfault.exe'
    IntegrityLevel:
    - 'High'
    - 'System'
    - 'S-1-16-16384'         # System
    - 'S-1-16-12288'         # High
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect a specific technique of User Account Control (UAC) bypass via the use of `consent.exe` and `comctl32.dll`. UAC is a Windows security feature that helps prevent unauthorized changes to the operating system. The detection rule focuses on monitoring process creation events, specifically looking for instances where `consent.exe` runs as a parent process to `werfault.exe`â€”indicating that a potential UAC bypass is being attempted. The rule checks for high or system integrity levels, which are critical indicators of privilege escalation. By monitoring the `ParentImage`, `Image`, and `IntegrityLevel`, the SOC can identify potentially malicious behavior that correlates with the MITRE ATT&CK tactics of **Defense Evasion (T1548.002)** and **Privilege Escalation (T1548.002)**, leading to unauthorized access elevation.
  ### Investigation Steps
  - **Validate the Alert:**
    Check the alert in your EDR tool to corroborate the details about the `parent` and `child` process related to `consent.exe` and `werfault.exe`. Review the execution timestamps and integrity levels associated with the processes.
  - **Review Command-Line Parameters:**
    Utilize your SIEM or Sysmon logs to examine the command-line parameters used by `werfault.exe`. Look for any suspicious arguments or scripts that may indicate unauthorized actions.
  - **Correlate with Event Logs:**
    Analyze Windows Security Event Logs for other events indicating privilege escalation or unauthorized access around the time of the alert. Pay special attention to logon events and account privileges.
  - **Investigate Network Connections:**
    Explore whether `werfault.exe` initiated any outbound network connections via your firewall or proxy logs. Determine if any of these connections are to suspicious or known malicious IP addresses.
  ### Prioritization
  Given the nature of UAC bypass techniques, this alert suggests a high-severity threat due to the potential for privilege escalation, which could lead to unauthorized access to sensitive systems and data, necessitating immediate investigation.
  ### Blind Spots and Assumptions
  One limitation of this rule is that it relies on the accurate logging of process creations and integrity levels; if logging is misconfigured or if an adversary employs anti-forensic techniques, the rule may fail to trigger. Additionally, false positives could arise in legitimate scenarios where `werfault.exe` operates under `consent.exe`. Analysts should evaluate the context surrounding any alerts, as benign processes may inadvertently match the detection criteria set forth in the rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
