title: UAC Bypass via ICMLuaUtil
id: 49f2f17b-b4c8-4172-a68b-d5bf95d05130
status: test
description: Detects the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface
references:
- https://www.elastic.co/guide/en/security/current/uac-bypass-via-icmluautil-elevated-com-interface.html
author: Florian Roth (Nextron Systems), Elastic (idea)
date: 2022-09-13
modified: 2022-09-27
tags:
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1548.002
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\dllhost.exe'
    ParentCommandLine|contains:
    - '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}'
    - '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'
  filter:
  - Image|endswith: '\WerFault.exe'
  - OriginalFileName: 'WerFault.exe'
  condition: selection and not filter
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "UAC Bypass via ICMLuaUtil" aims to detect unauthorized privilege escalation attempts that exploit the User Account Control (UAC) bypass technique using the ICMLuaUtil Elevated COM interface. This rule identifies instances where a process, specifically `WerFault.exe`, is initiated as a child of another process, `dllhost.exe`, with certain command-line parameters that indicate potential abuse for elevation. The monitoring source for this detection is primarily Windows process creation logs. The relevant command-line arguments specify unique process IDs recognized within known UAC bypass scenarios. 
  This detection aligns with the MITRE ATT&CK framework, specifically the tactic of **Defense Evasion** and the technique **T1548.002**, which pertains to UAC Bypass, highlighting the persistence of threats in environments where privilege escalation mechanisms can be manipulated. Understanding the context of these interactions can help SOC analysts discern legitimate uses of these processes from potentially malicious ones conducted by adversaries.
  ### Investigation Steps
  - **Check EDR Alerts**: Review any alerts from your EDR solution that correspond to instances of `WerFault.exe` being spawned by `dllhost.exe` to identify any suspicious activity patterns related to the UAC Bypass.
  - **Analyze Process Command Lines**: Retrieve and assess the command-line parameters of the `WerFault.exe` processes involved in the incident for signs that indicate manipulation of the UAC escalation process.
  - **Review Event Logs**: Examine Windows Event Logs (particularly Security and System logs) for additional context around the time of the process creation, including user account details and the associated actions taken by the accounts involved.
  - **Correlate with Network Activity**: Use NDR or Firewall logs to check for unusual outbound connections made by `WerFault.exe` or supporting processes that could indicate further compromise.
  ### Prioritization
  Given the high severity associated with this alert, the detection indicates a serious threat, as successful UAC bypasses can lead to unauthorized system access and potential lateral movement within the enterprise environment.
  ### Blind Spots and Assumptions
  This rule assumes that relevant processes such as `dllhost.exe` and `WerFault.exe` are not typically used for legitimate administrative tasks in your environment. If an adversary employs different means of privilege escalation or utilizes legitimate processes in unexpected ways, this detection may fail to trigger. Additionally, environments with heavily customized or secured endpoint configurations might not generate the expected telemetry needed for effective monitoring against this rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
