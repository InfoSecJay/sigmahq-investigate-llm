title: C# IL Code Compilation Via Ilasm.EXE
id: 850d55f9-6eeb-4492-ad69-a72338f65ba4
status: test
description: Detects the use of "Ilasm.EXE" in order to compile C# intermediate (IL)
  code to EXE or DLL.
references:
- https://lolbas-project.github.io/lolbas/Binaries/Ilasm/
- https://www.echotrail.io/insights/search/ilasm.exe
author: frack113, Nasreddine Bencherchali (Nextron Systems)
date: 2022-05-07
modified: 2022-05-16
tags:
- attack.defense-evasion
- attack.t1127
logsource:
  product: windows
  category: process_creation
detection:
  selection_img:
  - Image|endswith: '\ilasm.exe'
  - OriginalFileName: 'ilasm.exe'
  selection_cli:
    CommandLine|contains:
    - ' /dll'
    - ' /exe'
  condition: all of selection_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule detects the execution of the `Ilasm.EXE` application, which is used to compile C# intermediate language (IL) code into executable (EXE) or dynamic-link library (DLL) formats. The detection mechanism relies on monitoring process creation logs, specifically looking for instances where the process `Ilasm.EXE` is executed with command-line parameters that indicate compilation (`/dll` or `/exe`). This could signal potentially malicious activity as attackers may use legitimate development tools to create backdoor applications or execute defense-evasion tactics. The rule aligns with the MITRE ATT&CK framework, specifically under the `Defense Evasion` tactic and the `T1127` technique, which focuses on the use of trusted binary for execution.
  ### Investigation Steps
  - **Verify Process Execution:** Review the process creation logs in the EDR to confirm the execution of `Ilasm.EXE` and analyze its creation time, parent process, and user context.
  - **Inspect Command-Line Arguments:** Check the command-line lines used when `Ilasm.EXE` was invoked. Look specifically for the flags `/dll` or `/exe` as indicators of potential misuse.
  - **Analyze File Activity:** Cross-reference with file operation logs to identify any newly created or modified files that match the expected output from the compilation process, i.e., EXE or DLL files.
  - **Review Network Activity:** If the suspicious compilation activity is tied to any network connections, use NDR logs to examine outbound connections from the newly created binaries for potential communication with malicious external hosts.
  ### Prioritization
  The alert generated by this rule is of **medium severity** since while the legitimate use of `Ilasm.EXE` can be benign, its presence can also indicate a sophisticated attempt by adversaries to create malicious payloads without raising immediate alarms.
  ### Blind Spots and Assumptions
  This rule may not fire if `Ilasm.EXE` is executed with modified file names or paths to evade detection. Additionally, if an adversary uses other tools or methods that do not involve `Ilasm.EXE` for code execution, this rule will not capture such activities. Another assumption is that standard logging configurations are in place; if logging is misconfigured or insufficient, relevant data may be absent.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environments and operational needs. Please communicate any changes to the detection engineering team.
