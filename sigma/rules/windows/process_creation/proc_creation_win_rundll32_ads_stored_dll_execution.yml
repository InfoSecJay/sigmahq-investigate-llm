title: Potential Rundll32 Execution With DLL Stored In ADS
id: 9248c7e1-2bf3-4661-a22c-600a8040b446
status: test
description: Detects execution of rundll32 where the DLL being called is stored in
  an Alternate Data Stream (ADS).
references:
- https://lolbas-project.github.io/lolbas/Binaries/Rundll32
author: Harjot Singh, '@cyb3rjy0t'
date: 2023-01-21
modified: 2023-02-08
tags:
- attack.defense-evasion
- attack.t1564.004
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\rundll32.exe'
  - OriginalFileName: 'RUNDLL32.EXE'
  selection_cli:
        # Example:
        #   rundll32 "C:\ads\file.txt:ADSDLL.dll",DllMain
        # Note: This doesn't cover the use case where a full path for the DLL isn't used. As it requires a more expensive regex
    CommandLine|re: '[Rr][Uu][Nn][Dd][Ll][Ll]32(\.[Ee][Xx][Ee])? \S+?\w:\S+?:'
  condition: all of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule is aimed at identifying potentially malicious use of the `rundll32.exe` executable to load dynamic link libraries (DLLs) stored in Alternate Data Streams (ADS). Attackers may employ this technique to execute code embedded in files without raising typical file-system alerts because alternate data streams can be hidden from standard file browsing operations. By monitoring the command-line parameters for `rundll32.exe`, the rule specifically looks for indications that a DLL located in an ADS is being invoked, such as the pattern of the command line containing a file path that hints at the use of an ADS. This technique aligns with the MITRE ATT&CK tactic of Defense Evasion, specifically technique T1564.004, which addresses the evasion methods attackers might use to avoid detection.
  The data sources involved in this rule include process creation logs that provide details about executed processes and their associated command-line arguments. By analyzing these logs, analysts can discern potentially suspicious activity where `rundll32.exe` is initiated with paths indicating the use of ADS, allowing for the identification of potential threats effectively.
  ### Investigation Steps
  - **Check Process Creation Logs**: Use your EDR tool to investigate recent `rundll32.exe` executions. Pay attention to their command-line parameters and identify any entries that reference alternate data streams.
  - **Analyze Command-line Parameters**: Verify the contents of the command line for unusual file paths or parameter patterns that might suggest an attempt to execute a DLL from an ADS.
  - **Inspect Related Processes**: Investigate any parent processes associated with `rundll32.exe`. Understanding the context of its invocation can reveal whether it is part of a legitimate usage or malicious behavior.
  - **Verify File Integrity**: Utilize your file integrity monitoring tools to check if the DLLs being called have unexpected changes or are associated with known malicious indicators.
  ### Prioritization
  The alert is classified as high severity due to the potential for serious security implications stemming from malicious code execution that could lead to data exfiltration, system compromise, or lateral movement within the environment. Quick identification and analysis of such alerts are critical to minimizing impact.
  ### Blind Spots and Assumptions
  This rule may not fire in cases where the invoked DLL is not stored in an ADS or where the command-line parameters do not fit the specified regex pattern. Additionally, if an adversary uses a different method for loading DLLs (e.g., via legitimate applications without utilizing `rundll32.exe`), the detection may be ineffective. Furthermore, the efficacy of this rule depends on the proper functioning and completeness of the process creation logging; if logging is misconfigured or missing, it could fail to capture relevant evidence.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
