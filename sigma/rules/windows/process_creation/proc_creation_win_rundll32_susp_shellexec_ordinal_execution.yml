title: Suspicious ShellExec_RunDLL Call Via Ordinal
id: 8823e85d-31d8-473e-b7f4-92da070f0fc6
related:
- id: d87bd452-6da1-456e-8155-7dc988157b7d
  type: derived
status: experimental
description: |
  Detects suspicious call to the "ShellExec_RunDLL" exported function of SHELL32.DLL through the ordinal number to launch other commands.
  Adversary might only use the ordinal number in order to bypass existing detection that alert on usage of ShellExec_RunDLL on CommandLine.
references:
- https://redcanary.com/blog/raspberry-robin/
- https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/
- https://github.com/SigmaHQ/sigma/issues/1009
- https://strontic.github.io/xcyclopedia/library/shell32.dll-65DA072F25DE83D9F83653E3FEA3644D.html
author: Swachchhanda Shrawan Poudel
date: 2024-12-01
tags:
- attack.defense-evasion
- attack.t1218.011
logsource:
  category: process_creation
  product: windows
detection:
  selection_parent_img:
    ParentCommandLine|contains: 'SHELL32.DLL'
  selection_parent_ordinal:
    ParentCommandLine|contains:
            # Note: The ordinal number may differ depending on the DLL version
            # Example: rundll32 SHELL32.DLL,#572 "cmd.exe" "/c calc.exe"
    - '#568'
    - '#570'
    - '#572'
    - '#576'
  selection_susp_cli_parent:
        # Note: Add additional binaries and suspicious paths to increase coverage
  - ParentCommandLine|contains:
    - 'comspec'
    - 'iex'
    - 'Invoke-'
    - 'msiexec'
    - 'odbcconf'
    - 'regsvr32'
  - ParentCommandLine|contains:
    - '\Desktop\'
    - '\ProgramData\'
    - '\Temp\'
    - '\Users\Public\'
  selection_susp_child_img:
    Image|endswith:
    - '\bash.exe'
    - '\bitsadmin.exe'
    - '\cmd.exe'
    - '\cscript.exe'
    - '\curl.exe'
    - '\mshta.exe'
    - '\msiexec.exe'
    - '\msxsl.exe'
    - '\odbcconf.exe'
    - '\powershell.exe'
    - '\pwsh.exe'
    - '\regsvr32.exe'
    - '\schtasks.exe'
    - '\wmic.exe'
    - '\wscript.exe'
  condition: all of selection_parent_* and 1 of selection_susp_*
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The Sigma rule "Suspicious ShellExec_RunDLL Call Via Ordinal" is designed to detect potentially malicious activity involving the `ShellExec_RunDLL` function exported by `SHELL32.DLL` using ordinal numbers. This technique can be employed by adversaries to obscure their intentions and bypass conventional detection engines that monitor command-line usage, as the calls are made through the ordinal rather than explicit function names. The rule focuses on process creation logs where `ParentCommandLine` includes specific criteria indicating that a process is attempting to execute commands via `ShellExec_RunDLL` with a known ordinal number. This behavior is relevant to the MITRE ATT&CK tactic of Defense Evasion (T1218.011), where the goal is to execute payloads without attracting detection.
  The detection is based on several key components in log data, such as parent process command lines that contain known DLL names and ordinals. It also looks for the execution of suspicious child processes that may be associated with malicious activity. By analyzing these data points, incident responders can identify and investigate potential threats leveraging this method to execute unauthorized commands on a system.
  ### Investigation Steps
  - **Review Process Creation Logs:** Check the Windows Security logs for events related to the specified process creation to identify whether any suspicious `ShellExec_RunDLL` calls have occurred and corroborate with the detected alert.
  - **Examine Suspicious Parent Processes:** Use EDR tools to analyze the parent processes listed in the alert to determine the legitimacy and history of the parent process that initiated the suspicious actions.
  - **Analyze Network Activity:** Investigate any network connections initiated by the processes in question using NDR tools to determine if external communications were attempted, which could indicate data exfiltration or command and control activities.
  - **Inspect File System Activity:** Utilize file access logs to check for any unusual modifications or the creation of files in paths like `\Temp\`, `\Users\Public\`, and other known locations often targeted by adversaries.
  ### Prioritization
  The alert is tagged with a high severity level due to the potential implications of attackers using this technique for delivering malware or executing unauthorized commands, which may lead to a larger security incident if not addressed promptly in an enterprise environment.
  ### Blind Spots and Assumptions
  This detection rule assumes that the telemetry monitoring is properly configured to capture relevant Windows process creation events and that the necessary conditions for the alert to fire are met. However, it may not fire in scenarios where the adversary uses non-standard DLLs or modifies the command-line arguments in an unexpected manner, effectively obfuscating their actions. Additionally, if the execution environment lacks proper logging capabilities or if there are filtering settings that suppress legitimate alarms, this technique may go unnoticed.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and precision, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
