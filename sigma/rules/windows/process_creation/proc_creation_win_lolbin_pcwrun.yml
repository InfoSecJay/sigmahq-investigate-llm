title: Indirect Command Execution By Program Compatibility Wizard
id: b97cd4b1-30b8-4a9d-bd72-6293928d52bc
status: test
description: Detect indirect command execution via Program Compatibility Assistant
  pcwrun.exe
references:
- https://twitter.com/pabraeken/status/991335019833708544
- https://lolbas-project.github.io/lolbas/Binaries/Pcwrun/
author: A. Sungurov , oscd.community
date: 2020-10-12
modified: 2021-11-27
tags:
- attack.defense-evasion
- attack.t1218
- attack.execution
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    ParentImage|endswith: '\pcwrun.exe'
  condition: selection
fields:
- ComputerName
- User
- ParentCommandLine
- CommandLine
falsepositives:
- Need to use extra processing with 'unique_count' / 'filter' to focus on outliers
  as opposed to commonly seen artifacts
- Legit usage of scripts
level: low
notes: |
  ### Technical Context
  The Sigma rule "Indirect Command Execution By Program Compatibility Wizard" is designed to detect instances of command execution that occur indirectly through the Program Compatibility Wizard (PCW), specifically via the `pcwrun.exe` process. The rule focuses on identifying process creation events where the parent process is `pcwrun.exe`, which enables programs to run in compatibility mode for different versions of Windows. This can pose a risk, as adversaries may leverage this legitimate tool to execute potentially malicious commands indirectly, thereby evading traditional detection methods.
  The primary data sources involved in this detection include Windows Process Creation logs, which capture details about the execution of all processes on the system. When the rule matches, it indicates that something suspicious occurred under the benign name of the Program Compatibility Wizard, aligning it with the MITRE ATT&CK technique T1218 (Signed Binary Proxy Execution) under the defense evasion tactic. This highlights the need for vigilance in scrutinizing commands run under such processes.
  ### Investigation Steps
  - **Evaluate Process Details**: Review the alerts in the EDR tool to gather details about the `pcwrun.exe` executions, including timestamps, user accounts, and associated process hierarchies. 
  - **Analyze Command Lines**: Investigate the command-line arguments that were executed alongside `pcwrun.exe` for any signs of malicious activity or unexpected commands. This can be done through the security logs on the host.
  - **Correlate Other Logs**: Cross-reference network connection logs or PowerShell logs to identify any unusual outbound connections or script executions that coincide with the time of the alert. This can help in understanding the context of the execution.
  - **Review User Activity**: Examine the user activity logs to assess whether the user associated with the alert had legitimate reasons for running commands through the compatibility wizard or if thereâ€™s evidence of lateral movement or compromise.
  ### Prioritization
  The alert is categorized as low severity due to the possibility of legitimate use cases for `pcwrun.exe`, which may lead to false positives. However, it should still be investigated as malicious actors might employ this method to execute commands discreetly.
  ### Blind Spots and Assumptions
  This rule may not fire in cases where an adversary  uses alternative methods of execution outside of `pcwrun.exe`, such as directly invoking PowerShell or using other benign programs. Additionally, there is an assumption that the standard execution paths have not been altered by potential attackers to bypass detection. Engineers should be aware that legitimate processes like `pcwrun.exe` can frequently run in enterprise environments, making it necessary to incorporate contextual analysis to mitigate false positive alerts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
