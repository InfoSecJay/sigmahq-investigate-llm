title: Suspicious PowerShell Encoded Command Patterns
id: b9d9cc83-380b-4ba3-8d8f-60c0e7e2930c
status: test
description: Detects PowerShell command line patterns in combincation with encoded
  commands that often appear in malware infection chains
references:
- https://app.any.run/tasks/b9040c63-c140-479b-ad59-f1bb56ce7a97/
author: Florian Roth (Nextron Systems)
date: 2022-05-24
modified: 2023-01-05
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  - OriginalFileName:
    - 'PowerShell.Exe'
    - 'pwsh.dll'
  selection_flags:
    CommandLine|contains:
    - ' -e '
    - ' -en '
    - ' -enc '
    - ' -enco'
  selection_encoded:
    CommandLine|contains:
    - ' JAB'
    - ' SUVYI'
    - ' SQBFAFgA'
    - ' aWV4I'
    - ' IAB'
    - ' PAA'
    - ' aQBlAHgA'
  filter_gcworker:
    ParentImage|contains:
    - 'C:\Packages\Plugins\Microsoft.GuestConfiguration.ConfigurationforWindows\'
    - '\gc_worker.exe'
  condition: all of selection_* and not 1 of filter_*
falsepositives:
- Other tools that work with encoded scripts in the command line instead of script
  files
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potentially malicious usage of PowerShell by monitoring specific command-line patterns indicative of encoded commands. When a process creation event occurs, the rule looks for instances of `powershell.exe` or `pwsh.exe` with command lines that contain flags typically used for encoding commands, such as `-e`, `-en`, `-enc`, or `-enco`. Additionally, it inspects the command line for known encoded string patterns that are often associated with malware, such as `JAB` and `SUVYI`. The detection includes a filter to exclude events from specific legitimate sources, particularly those related to Microsoft's Guest Configuration service, minimizing false positives and improving the efficacy of the alert.
  This rule relies primarily on process creation logs from Windows, allowing SOC analysts to pinpoint potential malicious activity derived from PowerShell, which is frequently exploited for execution in various malware infection chains. Prompt investigation of alerts generated by this detection can help to thwart ongoing attacks and mitigate the risks of further compromise.
  ### Investigation Steps
  - Review the relevant process creation logs in your EDR solution to identify the details of the PowerShell command that triggered the alert, including the full command line and the image name.
  - Correlate the alert with other telemetry sources, such as the network traffic logs from your NDR, to determine if there are any related commands or connections that could indicate malfeasance.
  - Check for any anomalies or suspicious user activity associated with the machine generating the alert, utilizing SIEM data to assess user actions leading up to the execution of the PowerShell command.
  - Conduct a thorough investigation of the affected endpoint with your AV tool to check for known malware signatures or behavioral indicators that may corroborate the suspected malicious activity.
