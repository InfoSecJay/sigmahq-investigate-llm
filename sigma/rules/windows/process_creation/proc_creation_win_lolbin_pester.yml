title: Execute Code with Pester.bat as Parent
id: 18988e1b-9087-4f8a-82fe-0414dce49878
related:
- id: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e
  type: similar
status: test
description: Detects code execution via Pester.bat (Pester - Powershell Modulte for
  testing)
references:
- https://twitter.com/Oddvarmoe/status/993383596244258816
- https://twitter.com/_st0pp3r_/status/1560072680887525378
author: frack113, Nasreddine Bencherchali
date: 2022-08-20
tags:
- attack.execution
- attack.t1059.001
- attack.defense-evasion
- attack.t1216
logsource:
  category: process_creation
  product: windows
detection:
  selection_module:
    ParentImage|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    ParentCommandLine|contains: '\WindowsPowerShell\Modules\Pester\'
  selection_cli:
    ParentCommandLine|contains:
    - '{ Invoke-Pester -EnableExit ;'
    - '{ Get-Help "'
  condition: all of selection_*
falsepositives:
- Legitimate use of Pester for writing tests for Powershell scripts and modules
level: medium
notes: |
  n
  ### Technical Context
  This Sigma rule detects suspicious code execution patterns that involve the `Pester.bat` script, a PowerShell module often used for running tests on PowerShell scripts and modules. The rule identifies instances where a `powershell.exe` or `pwsh.exe` process is invoked as a parent process with command-line parameters indicating a call to `Pester`. Specifically, it looks for command lines containing `Invoke-Pester -EnableExit` or `Get-Help` that have `Pester` in their path. The relevant technical data sources for this detection include process creation logs which detail the relationship between processes and their invocation commands. This detection ties into the MITRE ATT&CK framework under the tactics of execution (T1059.001) and defense evasion (T1216).
  ### Investigation Steps
  - **Review Process Creation Logs:** Check the Windows Event Logs for process creation events detailing the invocation of `powershell.exe` or `pwsh.exe` as a parent process along with their associated command-line arguments.
  - **Analyze Parent-Child Process Relationships:** Utilize EDR tools to visualize and confirm relationships between the detected `Pester.bat` execution and any child processes spawned from `powershell.exe`.
  - **Confirm Legitimate Use Cases:** Investigate whether the alert pertains to legitimate use of `Pester` by reviewing scheduled tasks, saved scripts, or development tools within the environment that may utilize Pester for testing purposes.
  - **Correlate with Other Logs:** Query additional logs from your SIEM for corresponding network connections, file activities, or user logins around the time of the detected execution to gather context on potential malicious behavior.
  ### Prioritization
  The severity level for this alert is considered medium due to the dual nature of `Pester` as a legitimate testing tool that can also be exploited for executing malicious scripts, necessitating careful investigation.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where attackers evade detection via obfuscation techniques or alter the process hierarchy to avoid direct invocation of `Pester.bat`. Additionally, legitimate use cases may lead to false positives, particularly if development environments heavily utilize `Pester` for testing. It assumes that `Pester` is typically used in a standard manner and does not account for advanced adversarial techniques that might modify the PowerShell execution context or environment variables to bypass detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
