title: AspNetCompiler Execution
id: a01b8329-5953-4f73-ae2d-aa01e1f35f00 # Exec
related:
- id: 9ccba514-7cb6-4c5c-b377-700758f2f120     # SuspChild
  type: similar
- id: 4c7f49ee-2638-43bb-b85b-ce676c30b260     # TMP File
  type: similar
- id: 9f50fe98-fe5c-4a2d-86c7-fad7f63ed622     # Susp Paths
  type: similar
status: test
description: Detects execution of "aspnet_compiler.exe" which can be abused to compile
  and execute C# code.
references:
- https://lolbas-project.github.io/lolbas/Binaries/Aspnet_Compiler/
- https://ijustwannared.team/2020/08/01/the-curious-case-of-aspnet_compiler-exe/
author: frack113
date: 2021-11-24
modified: 2023-08-14
tags:
- attack.defense-evasion
- attack.t1127
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|contains:
    - 'C:\Windows\Microsoft.NET\Framework\'
    - 'C:\Windows\Microsoft.NET\Framework64\'
    Image|endswith: '\aspnet_compiler.exe'
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  n
  ### Technical Context
  The Sigma rule titled "AspNetCompiler Execution" is designed to detect the execution of the `aspnet_compiler.exe` binary, which is part of the Microsoft .NET Framework. This tool can be exploited by attackers to compile and run C# code on Windows systems, thus creating potential security vulnerabilities. The detection rule specifically looks for process creation events that include paths to the .NET Framework directories and that end with the executable name `aspnet_compiler.exe`. The primary technical data sources leveraged in this detection include Windows process creation logs, which provide insights into the executable paths and parameters used during the execution of processes. The rule is associated with the MITRE ATT&CK tactic "Defense Evasion" and specifically the technique "T1127: Execution via `aspnet_compiler`".
  ### Investigation Steps
  - **Verify Process Details:** Use your EDR tool to identify the details of the `aspnet_compiler.exe` process execution, including the user context and command-line arguments.
  - **Examine Parent Process:** Investigate the parent process that invoked `aspnet_compiler.exe` to understand the context in which it was executed and determine if it was initiated by a legitimate application.
  - **Check for Unauthorized Modifications:** Review any suspicious file modifications or creations in directories typically associated with .NET applications, particularly in the ASP.NET and temporary directories.
  - **Analyze Network Activity:** Assess any outbound network connections from the host where `aspnet_compiler.exe` was executed. Determine if any unauthorized or suspicious connections were established during that time.
  ### Prioritization
  Given that the execution of `aspnet_compiler.exe` can indicate potential unauthorized code execution on a server, it is recommended to treat this alert with medium severity, warranting immediate investigation, particularly in environments that host web applications.
  ### Blind Spots and Assumptions
  This rule assumes that the Windows process creation logs are enabled and can capture relevant events. There exists a possibility that legitimate applications may use `aspnet_compiler.exe` for its intended purpose, resulting in potential false positives. Additionally, if attackers operate in a highly obscured environment or employ custom methods of execution, the rule may fail to detect those activities. Understanding these limitations is critical for an effective response.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
