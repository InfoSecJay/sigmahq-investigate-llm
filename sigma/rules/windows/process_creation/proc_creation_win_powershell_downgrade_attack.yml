title: Potential PowerShell Downgrade Attack
id: b3512211-c67e-4707-bedc-66efc7848863
related:
- id: 6331d09b-4785-4c13-980f-f96661356249
  type: derived
status: test
description: Detects PowerShell downgrade attack by comparing the host versions with
  the actually used engine version 2.0
references:
- http://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/
- https://github.com/r00t-3xp10it/hacking-material-books/blob/43cb1e1932c16ff1f58b755bc9ab6b096046853f/obfuscation/simple_obfuscation.md#bypass-or-avoid-amsi-by-version-downgrade-
author: Harish Segar (rule)
date: 2020-03-20
modified: 2023-01-04
tags:
- attack.defense-evasion
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith: '\powershell.exe'
    CommandLine|contains:
    - ' -version 2 '
    - ' -versio 2 '
    - ' -versi 2 '
    - ' -vers 2 '
    - ' -ver 2 '
    - ' -ve 2 '
    - ' -v 2 '
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The “Potential PowerShell Downgrade Attack” rule is designed to detect instances where attackers may attempt to execute PowerShell commands using an intentionally lower version of the PowerShell engine, specifically version 2.0. This is significant because PowerShell 2.0 lacks many security features introduced in later versions, making it a target for evasion tactics. The rule looks for process creation events, specifically monitoring the execution of `powershell.exe` and checking the command-line parameters for indicators of a version downgrade, such as flags like `-version 2` or similar variants. By correlating these command-line inputs with the actual version of PowerShell installed on the host machine, the rule can effectively identify potential downgrade attacks in real-time, aiding in the defense against exploitation attempts that leverage outdated PowerShell functionalities.
  ### Investigation Steps
  - Review process creation logs in your EDR to identify the `powershell.exe` instances that match the downgrade criteria. Focus on the command-line arguments used during these executions.
  - Check system logs or PowerShell logs to determine the current version of PowerShell installed on the affected host. This will help confirm whether the observed downgrade behavior is valid.
  - Cross-reference any detected activities with the network logs to identify any abnormal outbound connections that may coincide with the downgrade detection.
  - Utilize your AV or endpoint protection tools to scan for scripts or binaries that were executed following the detected downgrade, which may provide further insight into malicious intent.
