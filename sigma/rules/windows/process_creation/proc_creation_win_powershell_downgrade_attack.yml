title: Potential PowerShell Downgrade Attack
id: b3512211-c67e-4707-bedc-66efc7848863
related:
- id: 6331d09b-4785-4c13-980f-f96661356249
  type: derived
status: test
description: Detects PowerShell downgrade attack by comparing the host versions with
  the actually used engine version 2.0
references:
- http://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/
- https://github.com/r00t-3xp10it/hacking-material-books/blob/43cb1e1932c16ff1f58b755bc9ab6b096046853f/obfuscation/simple_obfuscation.md#bypass-or-avoid-amsi-by-version-downgrade-
author: Harish Segar (rule)
date: 2020-03-20
modified: 2023-01-04
tags:
- attack.defense-evasion
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith: '\powershell.exe'
    CommandLine|contains:
    - ' -version 2 '
    - ' -versio 2 '
    - ' -versi 2 '
    - ' -vers 2 '
    - ' -ver 2 '
    - ' -ve 2 '
    - ' -v 2 '
  condition: selection
falsepositives:
- Unknown
level: medium
notes: |
  n
  ### Technical Context
  The "Potential PowerShell Downgrade Attack" detection rule aims to identify instances where a potentially malicious actor attempts to exploit older, less secure versions of PowerShell by intentionally invoking PowerShell version 2.0. This is a common tactic employed to bypass security measures such as the Anti-Malware Scan Interface (AMSI) which offers enhanced protections in newer iterations of PowerShell. The rule works by monitoring process creation events on Windows systems, specifically looking for instances of `powershell.exe` that are executed with command-line parameters indicating an attempt to call an earlier version of PowerShell, specifically using the `-version` flag. The applicable MITRE ATT&CK techniques for this rule include the `T1059.001` (Command and Scripting Interpreter: Windows PowerShell) under the Defense Evasion and Execution tactics.
  ### Investigation Steps
  - **Review Process Creation Logs**: Use EDR tools to filter process creation logs for instances of `powershell.exe` executed with the version flag indicating a downgrade (e.g., `-version 2`).
  - **Examine Command-Line Parameters**: Analyze the command-line arguments associated with the flagged process creation events to assess whether any suspicious or unauthorized scripts were executed.
  - **Check User and Host Context**: Investigate the user accounts that executed the downgraded PowerShell commands, as well as the host machines, to identify any signs of compromise, especially if they are sensitive servers.
  - **Correlate with Security Events**: Review additional security logs (e.g., Windows Security and Sysmon logs) around the time of the detected event for concurrent anomalous activities that might indicate a broader attack.
  ### Prioritization
  This alert is considered medium severity as PowerShell downgrade attacks can enable the execution of malicious scripts while evading standard security controls, potentially leading to deeper compromises within the system or network.
  ### Blind Spots and Assumptions
  This rule assumes that all relevant cmdlets can only be executed through properly secured PowerShell versions. However, the rule may fail to fire if an attacker uses a custom-built script that does not include the version flag or if PowerShell is being invoked indirectly (e.g., by another process). There is also reliance on accurate logging and the capabilities of the monitoring solution; if logs are modified or not captured accurately due to configuration issues, detection may be bypassed.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
