title: PowerShell Get-Process LSASS
id: b2815d0d-7481-4bf0-9b6c-a4c48a94b349
status: test
description: Detects a "Get-Process" cmdlet and it's aliases on lsass process, which
  is in almost all cases a sign of malicious activity
references:
- https://web.archive.org/web/20220205033028/https://twitter.com/PythonResponder/status/1385064506049630211
author: Florian Roth (Nextron Systems)
date: 2021-04-23
modified: 2023-01-05
tags:
- attack.credential-access
- attack.t1552.004
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains:
            # You can add more permutation as you see fit
    - 'Get-Process lsas'
    - 'ps lsas'
    - 'gps lsas'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the execution of the PowerShell cmdlet `Get-Process` targeting the Local Security Authority Subsystem Service (LSASS), which is critical for managing system security policies. The LSASS process handles sensitive information such as user credentials, making it a prime target for malicious actors attempting to steal authentication tokens or perform credential dumping. The detection is triggered when processes are initiated with command lines containing specific strings related to querying the LSASS process, such as `Get-Process lsas`, `ps lsas`, or `gps lsas`. The rule primarily utilizes data sourced from Windows process creation logs, providing insights into command-line arguments and associated process IDs. This rule aligns with the MITRE ATT&CK framework under the Credential Access tactic (T1552.004), specifically focusing on the collection of sensitive information from the LSASS process.
  ### Investigation Steps
  - **Check Process Creation Logs:** Review the Windows Security Event Logs, specifically Event ID 4688, to identify any recent process creations that match the suspicious command lines detected by this rule.
  - **Inspect PowerShell Execution:** Use EDR tools to analyze the details of the PowerShell execution, including parent-child relationship mappings and any unusual parent process actions that led to the command execution.
  - **Examine LSASS Access:** Lookup memory access attempts to the LSASS process using Sysmon logs for any process attempting to read memory related to LSASS. This can help uncover other potentially malicious activities.
  - **Analyze Network Traffic:** Look into network logs for any abnormal traffic patterns linked to the machine from which the suspicious command originated, to detect potential data exfiltration activities.
  ### Prioritization
  The alert is categorized as high severity due to the critical nature of the LSASS process, with any unauthorized access or querying potentially indicating an advanced threat actor attempting to exfiltrate credentials or other sensitive information.
  ### Blind Spots and Assumptions
  This rule may not fire in the presence of effective mitigations such as endpoint protection solutions that block or limit script execution of PowerShell commands. Additionally, the rule assumes that the monitored environment processes all relevant data, implying that a lack of coverage in logging—either due to configuration issues or restrictive logging policies—can lead to missed detections. Attackers could also use obfuscation techniques that modify the command-line strings enough to bypass the detection logic.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
