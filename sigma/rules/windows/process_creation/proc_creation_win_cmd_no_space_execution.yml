title: Cmd.EXE Missing Space Characters Execution Anomaly
id: a16980c2-0c56-4de0-9a79-17971979efdd
status: test
description: |
  Detects Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe.
  This could be a sign of obfuscation of a fat finger problem (typo by the developer).
references:
- https://twitter.com/cyb3rops/status/1562072617552678912
- https://ss64.com/nt/cmd.html
author: Florian Roth (Nextron Systems)
date: 2022-08-23
modified: 2023-03-06
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection1:    # missing space before the /c
    CommandLine|contains:
    - 'cmd.exe/c'
    - '\cmd/c'          # just cmd/c would be prone to false positives
    - '"cmd/c'
    - 'cmd.exe/k'
    - '\cmd/k'          # just cmd/k would be prone to false positives
    - '"cmd/k'
    - 'cmd.exe/r'
    - '\cmd/r'          # just cmd/r would be prone to false positives
    - '"cmd/r'
  selection2:   # special cases verified via Virustotal Enterprise search
    CommandLine|contains:
    - '/cwhoami'
    - '/cpowershell'
    - '/cschtasks'
    - '/cbitsadmin'
    - '/ccertutil'
    - '/kwhoami'
    - '/kpowershell'
    - '/kschtasks'
    - '/kbitsadmin'
    - '/kcertutil'
  selection3:    # missing space after the /c
    CommandLine|contains:
    - 'cmd.exe /c'
    - 'cmd /c'
    - 'cmd.exe /k'
    - 'cmd /k'
    - 'cmd.exe /r'
    - 'cmd /r'
  filter_generic:
    CommandLine|contains:
    - 'cmd.exe /c '
    - 'cmd /c '
    - 'cmd.exe /k '
    - 'cmd /k '
    - 'cmd.exe /r '
    - 'cmd /r '
  filter_fp:
  - CommandLine|contains: 'AppData\Local\Programs\Microsoft VS Code\resources\app\node_modules'
  - CommandLine|endswith: 'cmd.exe/c .'
  - CommandLine: 'cmd.exe /c'
  condition: 1 of selection* and not 1 of filter_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect potential anomalies in command-line executions involving `cmd.exe` on Windows systems. It specifically focuses on command lines that either miss a space character before or after the `/c`, `/k`, or `/r` flags, leading to syntactical issues that might signify obfuscation techniques or simple user typing errors. The rule examines process creation logs, particularly the `CommandLine` parameter, to identify instances where these flags are not properly formatted. By catching these irregularities, the rule can help security analysts detect possible attempts to execute malicious commands or scripts that could harm the system.
  The rule's detection logic is built around multiple selections based on different patterns of improperly formatted command-line inputs, while also integrating filters to reduce false positives from known benign commands. This comprehensive approach allows for focused investigations into potentially problematic command executions that traditional monitoring solutions might overlook.
  ### Investigation Steps
  - Review the process creation logs in the EDR tool to locate the detected instances of `cmd.exe` command executions featuring the problematic command line formats.
  - Check the associated user account and network activity around the time of the alert for any suspicious access patterns or unauthorized privileges.
  - Cross-reference the detected commands with historical data in the AV or NDR systems to see if similar patterns have previously resulted in security incidents.
  - Utilize cloud logging platforms (e.g., AWS CloudTrail or Azure Monitor) to audit any related events or resource changes that correlate with the abnormal command execution times.
