title: Cmd.EXE Missing Space Characters Execution Anomaly
id: a16980c2-0c56-4de0-9a79-17971979efdd
status: test
description: |
  Detects Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe.
  This could be a sign of obfuscation of a fat finger problem (typo by the developer).
references:
- https://twitter.com/cyb3rops/status/1562072617552678912
- https://ss64.com/nt/cmd.html
author: Florian Roth (Nextron Systems)
date: 2022-08-23
modified: 2023-03-06
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection1:    # missing space before the /c
    CommandLine|contains:
    - 'cmd.exe/c'
    - '\cmd/c'          # just cmd/c would be prone to false positives
    - '"cmd/c'
    - 'cmd.exe/k'
    - '\cmd/k'          # just cmd/k would be prone to false positives
    - '"cmd/k'
    - 'cmd.exe/r'
    - '\cmd/r'          # just cmd/r would be prone to false positives
    - '"cmd/r'
  selection2:   # special cases verified via Virustotal Enterprise search
    CommandLine|contains:
    - '/cwhoami'
    - '/cpowershell'
    - '/cschtasks'
    - '/cbitsadmin'
    - '/ccertutil'
    - '/kwhoami'
    - '/kpowershell'
    - '/kschtasks'
    - '/kbitsadmin'
    - '/kcertutil'
  selection3:    # missing space after the /c
    CommandLine|contains:
    - 'cmd.exe /c'
    - 'cmd /c'
    - 'cmd.exe /k'
    - 'cmd /k'
    - 'cmd.exe /r'
    - 'cmd /r'
  filter_generic:
    CommandLine|contains:
    - 'cmd.exe /c '
    - 'cmd /c '
    - 'cmd.exe /k '
    - 'cmd /k '
    - 'cmd.exe /r '
    - 'cmd /r '
  filter_fp:
  - CommandLine|contains: 'AppData\Local\Programs\Microsoft VS Code\resources\app\node_modules'
  - CommandLine|endswith: 'cmd.exe/c .'
  - CommandLine: 'cmd.exe /c'
  condition: 1 of selection* and not 1 of filter_*
falsepositives:
- Unknown
level: high
notes: |
  n
  ### Technical Context
  The “Cmd.EXE Missing Space Characters Execution Anomaly” rule aims to identify potentially malicious uses of the Windows command interpreter (cmd.exe) by detecting command lines that exhibit unusual patterns. Specifically, it looks for instances where there is a missing space before or after the "/c" flag, along with other variations such as "/k" and "/r". These missed spaces can be indicative of obfuscation techniques or simple typos, but they can also suggest an attempt to evade detection systems by manipulating command syntax. The detection logic leverages Windows process creation logs, focusing on command-line parameters specified in the command line itself. By checking for these anomalies, the rule aligns with the MITRE ATT&CK framework under the Execution tactic (T1059.001), which covers command and scripting interpreter usage.
  ### Investigation Steps
  - **Review Process Creation Logs:** Use the EDR or SIEM to investigate the specific process creation logs that triggered the alert, closely examining the command line and its parameters.
  - **Analyze Source of Command Execution:** Determine the source from which the command was executed—whether it's a user-initiated action, automated script, or potential malware activity to assess the context.
  - **Cross-Reference with User Activity:** Check user activity logs and correlate with the timing of the command execution to see if it aligns with known user behavior or scheduled tasks.
  - **Inspect Related Network Connections:** Use the NDR to evaluate any network connections initiated as a result of the command execution, looking for suspicious or unrecognized endpoints.
  ### Prioritization
  This alert is classified as high severity due to the potential for valid usage to mask malicious activity, suggesting that the execution could be part of a larger attack or exploitation attempt.
  ### Blind Spots and Assumptions
  This rule may not trigger in situations where malicious actors employ entirely different command structures to avoid detection, such as using decoy executables or alternative command interpreters. Additionally, legitimate software development activity or misconfigurations could generate false positives. Engineers should be aware that commands run with administrative privileges may not yield the same indicators, complicating detection efforts. Adversaries might also employ techniques to execute commands from within legitimate applications, further obfuscating the command line.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
