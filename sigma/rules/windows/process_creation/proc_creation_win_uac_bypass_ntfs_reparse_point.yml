title: UAC Bypass Using NTFS Reparse Point - Process
id: 39ed3c80-e6a1-431b-9df3-911ac53d08a7
status: test
description: Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe
  DLL hijacking (UACMe 36)
references:
- https://github.com/hfiref0x/UACME
author: Christian Burkard (Nextron Systems)
date: 2021-08-30
modified: 2024-12-01
tags:
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1548.002
logsource:
  category: process_creation
  product: windows
detection:
  selection1:
    CommandLine|startswith: '"C:\Windows\system32\wusa.exe"  /quiet C:\Users\'
    CommandLine|endswith: '\AppData\Local\Temp\update.msu'
    IntegrityLevel:
    - 'High'
    - 'System'
    - 'S-1-16-16384'         # System
    - 'S-1-16-12288'         # High
  selection2:
    ParentCommandLine: '"C:\Windows\system32\dism.exe" /online /quiet /norestart /add-package
      /packagepath:"C:\Windows\system32\pe386" /ignorecheck'
    IntegrityLevel:
    - 'High'
    - 'System'
    CommandLine|contains|all:
    - 'C:\Users\'
    - '\AppData\Local\Temp\'
    - '\dismhost.exe {'
    Image|endswith: '\DismHost.exe'
  condition: 1 of selection*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule focuses on identifying potential User Account Control (UAC) bypass attempts leveraging NTFS reparse points in conjunction with the Windows Update Standalone Installer (wusa.exe) and DISM (Deployment Image Service and Management Tool). UAC bypass techniques, such as the one referenced in the UACMe repository, exploit system utilities to execute malicious payloads with elevated privileges. The rule looks for specific command line patterns associated with wusa.exe and DISM, which may indicate attempts to run unauthorized or unexpected software in a high-security context. The relevant data sources include process creation logs, particularly monitoring command line parameters and integrity levels, where the commands executed indicate possible privilege escalation efforts.
  This detection is aligned with the MITRE ATT&CK framework, specifically targeting the tactics of defense evasion and privilege escalation using the technique T1548.002. Understanding this context enhances the readiness of incident responders to detect potential threats exploiting Windows' UAC.
  ### Investigation Steps
  - **Review Process Creation Logs**: Utilize EDR to analyze all process creation logs related to wusa.exe and dism.exe. Look for the integrity levels and command line arguments to determine if they match patterns consistent with UAC bypass attempts.
  - **Inspect Parent Processes**: Check the parent processes of the detected instances, especially those invoking dism.exe. Investigate the legitimacy of the originating process and any connections it may have with user activity.
  - **Analyze Recent Security Events**: Access Windows Security and Sysmon logs to correlate any failed or unexpected security events leading up to the detection. This can reveal prior attempts to modify system files or execute unauthorized commands.
  - **Examine File System for Reparse Points**: Investigate any NTFS reparse points in the Userâ€™s AppData directory that appear suspicious or out of standard operating conditions. Evaluate if legitimate file paths have been altered or if there are hidden files indicative of a tampering attempt.
  ### Prioritization
  The alert is categorized as high severity because UAC bypass attempts can lead to unauthorized escalation of privileges, potentially allowing attackers to execute malicious code with administrative rights. Prompt investigation is crucial to mitigate risks against systems and sensitive data.
  ### Blind Spots and Assumptions
  This rule may not trigger in situations where the command line parameters are obfuscated or altered slightly by the adversary to evade detection. Additionally, if the wusa.exe or dism.exe processes are executed in approved or legitimate scenarios, it can lead to false negatives. Assumptions include the reliance on standard paths and execution patterns, which may not hold if the processes are executed from non-standard locations or through modified parameters. Furthermore, the detection assumes the presence of Sysmon and appropriate logging configurations to capture the required event types.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
