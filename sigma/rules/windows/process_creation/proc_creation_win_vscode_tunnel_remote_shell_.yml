title: Visual Studio Code Tunnel Shell Execution
id: f4a623c2-4ef5-4c33-b811-0642f702c9f1
status: test
description: Detects the execution of a shell (powershell, bash, wsl...) via Visual
  Studio Code tunnel. Attackers can abuse this functionality to establish a C2 channel
  and execute arbitrary commands on the system.
references:
- https://ipfyx.fr/post/visual-studio-code-tunnel/
- https://badoption.eu/blog/2023/01/31/code_c2.html
- https://code.visualstudio.com/docs/remote/tunnels
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-10-25
tags:
- attack.command-and-control
- attack.t1071.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_parent:
    ParentImage|contains: '\servers\Stable-'
    ParentImage|endswith: '\server\node.exe'
    ParentCommandLine|contains: '.vscode-server'     # Technically one can host its own local server instead of using the VsCode one. And that would probably change the name (requires further research)
    # Note: Child processes (ie: shells) can be whatever technically (with some efforts)
  selection_child_1:
    Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    CommandLine|contains: '\terminal\browser\media\shellIntegration.ps1'
  selection_child_2:
    Image|endswith:
    - '\wsl.exe'
    - '\bash.exe'
  condition: selection_parent and 1 of selection_child_*
falsepositives:
- Legitimate use of Visual Studio Code tunnel and running code from there
level: medium
notes: |
  ### Technical Context
  This detection rule focuses on identifying the execution of shell processes via the Visual Studio Code (VS Code) tunnel feature, specifically looking for instances where attackers may exploit this functionality to establish command and control (C2) channels. The rule utilizes Windows process creation logs to monitor for parent processes that match the characteristics of VS Code's tunnel service (for example, `node.exe` operating from a specific directory) and examines child processes that are common for shell execution, such as PowerShell or WSL. By filtering for command-line parameters which are unique to VS Code's shell integration, the rule aims to detect potentially malicious activity stemming from legitimate development tools.
  The key data sources for this rule include process creation logs that capture both parent-child relationships between processes as well as details like image paths and command-line arguments that can indicate suspicious or unauthorized behavior.
  ### Investigation Steps
  - Examine the process creation logs in your EDR solution to identify the parent process and its command line parameters associated with the detected shell execution.
  - Investigate the children's execution context by looking for deviations in normal operations, such as unusual command line arguments or times of execution that may suggest malicious intent.
  - Review any logs generated by the Visual Studio Code tunnel feature to gain further insight into the remote connections that might have been established during the timeframe of the alert.
  - Check network activity logs in your NGFW or NDR platforms to identify any outgoing connections that align with known C2 behavior or that are associated with the detected processes.
