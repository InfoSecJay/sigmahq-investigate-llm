title: Visual Studio Code Tunnel Shell Execution
id: f4a623c2-4ef5-4c33-b811-0642f702c9f1
status: test
description: Detects the execution of a shell (powershell, bash, wsl...) via Visual
  Studio Code tunnel. Attackers can abuse this functionality to establish a C2 channel
  and execute arbitrary commands on the system.
references:
- https://ipfyx.fr/post/visual-studio-code-tunnel/
- https://badoption.eu/blog/2023/01/31/code_c2.html
- https://code.visualstudio.com/docs/remote/tunnels
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-10-25
tags:
- attack.command-and-control
- attack.t1071.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_parent:
    ParentImage|contains: '\servers\Stable-'
    ParentImage|endswith: '\server\node.exe'
    ParentCommandLine|contains: '.vscode-server'     # Technically one can host its own local server instead of using the VsCode one. And that would probably change the name (requires further research)
    # Note: Child processes (ie: shells) can be whatever technically (with some efforts)
  selection_child_1:
    Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    CommandLine|contains: '\terminal\browser\media\shellIntegration.ps1'
  selection_child_2:
    Image|endswith:
    - '\wsl.exe'
    - '\bash.exe'
  condition: selection_parent and 1 of selection_child_*
falsepositives:
- Legitimate use of Visual Studio Code tunnel and running code from there
level: medium
notes: |
  ### Technical Context
  The "Visual Studio Code Tunnel Shell Execution" Sigma rule is designed to detect potentially malicious activity associated with the execution of shell commands (e.g., PowerShell, Bash, WSL) through Visual Studio Code's tunneling feature. Attackers can exploit this functionality to create a command-and-control (C2) channel, enabling them to execute arbitrary commands on a compromised system without detection. The rule uses Windows process creation logs to identify specific patterns, particularly focusing on processes spawned by the `node.exe` parent process associated with Visual Studio Code servers. The detection specifically looks for child processes that match known shell executables (like `powershell.exe` or `bash.exe`) when they have command line arguments that suggest they are leveraging shell integration features within Visual Studio Code.
  This rule aligns with the MITRE ATT&CK framework under the tactic "Command and Control" (TA0011) and technique "Application Layer Protocol" (T1071.001), indicating the use of standard application protocols to establish a C2 channel. By leveraging Sysmon logs for detailed process creation information, the detection aims to uncover suspicious behaviors indicative of unauthorized access or exploitation.
  ### Investigation Steps
  - **Check Process Trees:** Investigate the parent-child relationships in the process tree to confirm if the detected shell execution is indeed initiated by `node.exe` under Visual Studio Code. Use EDR tools to visualize and analyze process hierarchies.
    
  - **Analyze Command Line Arguments:** Review the command line parameters associated with the detected shell processes. Verify if any unusual scripts or commands are being executed that deviate from expected legitimate usage.
  - **Correlate with User Activity:** Identify the user account that initiated the action, and cross-reference their activity logs in Windows Security Event Logs. Determine whether the user has a legitimate reason for using Visual Studio Code with tunneling capabilities.
  - **Examine Network Traffic:** Utilize NDR or firewall logs to monitor any outbound connections originating from the suspicious shell processes. Look for connections to known C2 servers or any anomalies in the network traffic pattern that may correlate with the detection.
  ### Prioritization
  The alert generated by this rule is classified as medium severity due to the potential risk of a C2 channel being established, which can lead to further exploitation and compromise of network integrity. Incident responders should consider the context of the alert, as legitimate usage of Visual Studio Code tunneling is common among developers.
  ### Blind Spots and Assumptions
  One notable blind spot of this rule is the possibility of legitimate activities being misclassified as suspicious, particularly if development teams utilize Visual Studio Code tunnels without proper governance. Additionally, the rule may not fire if attackers employ custom servers or rename executables, thereby evading detection through anomalous process creation patterns not covered by the rule. Moreover, the detection relies heavily on Sysmon and process creation logs; if these logs are not configured correctly or if logging is disabled, the rule will not work effectively.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
