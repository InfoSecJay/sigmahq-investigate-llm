title: PowerShell Base64 Encoded Reflective Assembly Load
id: 62b7ccc9-23b4-471e-aa15-6da3663c4d59
related:
- id: 9c0295ce-d60d-40bd-bd74-84673b7592b1
  type: similar
status: test
description: Detects base64 encoded .NET reflective loading of Assembly
references:
- https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar
- https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/
author: Christian Burkard (Nextron Systems), pH-T (Nextron Systems)
date: 2022-03-01
modified: 2023-01-30
tags:
- attack.execution
- attack.t1059.001
- attack.defense-evasion
- attack.t1027
- attack.t1620
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    CommandLine|contains:
            # [Reflection.Assembly]::Load(
    - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'
    - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'
    - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'
            # [reflection.assembly]::("Load")
    - 'AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC'
    - 'BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp'
    - 'AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK'
            # [Reflection.Assembly]::("Load")
    - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ'
    - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA'
    - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA'
            # [reflection.assembly]::Load(
    - 'WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'
    - 'sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'
    - 'bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'
  condition: selection
fields:
- CommandLine
falsepositives:
- Unlikely
level: high
notes: |
  n
  ### Technical Context
  This Sigma rule is designed to detect the use of Base64 encoded reflective assembly loading in PowerShell, a technique often leveraged by attackers to evade detection while executing malicious .NET assemblies. The rule looks for specific patterns in the command line arguments of process creation events that include references to `[Reflection.Assembly]::Load(` followed by encoded stringsâ€”indicative of an attempt to load an assembly directly from memory rather than from disk. Command line logs from Windows Event Logs (specifically in the process creation category) are critical data sources for this detection. The corresponding MITRE ATT&CK techniques involved are `T1059.001` (PowerShell) and `T1620` (Reflective DLL Injection), which highlight an execution tactic and a method of defense evasion, respectively. This rule aims to help analysts identify potentially malicious behavior that could compromise enterprise systems.
  ### Investigation Steps
  - **Check Process Creation Logs:** Review the Windows Security Event Logs specifically for Event IDs related to process creation to find the complete command line used when the alert was triggered.
  - **Analyze PowerShell History:** Use PowerShell transcripts or history logs to investigate the commands run prior to the alert being triggered to determine if there was contextual benign usage or if it was executed as part of a suspect activity.
  - **Cross-reference with EDR Alerts:** Check your EDR tool for any corresponding alerts related to abnormal behavior or trends in process creations around the same time frame, which may indicate other malicious activities.
  - **Review Network Activity:** Analyze Network Connection logs to look for any suspicious outbound connections or data exfiltration attempts that may align with the execution of the PowerShell scripts in question.
  ### Prioritization
  Given the potential for significant security implications associated with the execution of Base64 encoded assemblies, this alert is prioritized as high severity. Such activities can represent attempts to bypass standard security controls, indicating a rapidly evolving threat landscape.
  ### Blind spots and Assumptions
  This rule assumes that all PowerShell executions are being logged comprehensively. However, if logging is misconfigured or disabled on certain endpoints, there is a risk of missing alerts. Additionally, legitimate applications may occasionally use similar techniques for benign purposes; thus, false positives may occur. Attackers may also employ obfuscation methods to evade detection, which means enhanced tuning of the rule may be needed to reduce noise while maintaining detection capabilities.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
