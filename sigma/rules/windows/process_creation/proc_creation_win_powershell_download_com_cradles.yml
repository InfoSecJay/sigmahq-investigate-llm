title: Potential COM Objects Download Cradles Usage - Process Creation
id: 02b64f1b-3f33-4e67-aede-ef3b0a5a8fcf
related:
- id: 3c7d1587-3b13-439f-9941-7d14313dbdfe
  type: similar
status: test
description: Detects usage of COM objects that can be abused to download files in
  PowerShell by CLSID
references:
- https://learn.microsoft.com/en-us/dotnet/api/system.type.gettypefromclsid?view=net-7.0
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=57
author: frack113
date: 2022-12-25
tags:
- attack.command-and-control
- attack.t1105
logsource:
  product: windows
  category: process_creation
detection:
  selection_1:
    CommandLine|contains: '[Type]::GetTypeFromCLSID('
  selection_2:
    CommandLine|contains:
    - '0002DF01-0000-0000-C000-000000000046'
    - 'F6D90F16-9C73-11D3-B32E-00C04F990BB4'
    - 'F5078F35-C551-11D3-89B9-0000F81FE221'
    - '88d96a0a-f192-11d4-a65f-0040963251e5'
    - 'AFBA6B42-5692-48EA-8141-DC517DCF0EF1'
    - 'AFB40FFD-B609-40A3-9828-F88BBE11E4E3'
    - '88d96a0b-f192-11d4-a65f-0040963251e5'
    - '2087c2f4-2cef-4953-a8ab-66779b670495'
    - '000209FF-0000-0000-C000-000000000046'
    - '00024500-0000-0000-C000-000000000046'
  condition: all of selection_*
falsepositives:
- Legitimate use of the library
level: medium
notes: |
  n
  ### Technical Context
  This Sigma rule aims to detect potentially malicious usage of Component Object Model (COM) objects that can be exploited for file downloads via PowerShell. Specifically, it identifies process creation events where the command line contains "[Type]::GetTypeFromCLSID(", which is a PowerShell command used to retrieve the type of a COM object based on its CLSID (Class ID). The rule also looks for known malicious CLSIDs associated with abuse in command-and-control contexts. The primary data sources leveraged for detection are Windows process creation logs, which provide information on how processes are initiated, along with their command-line arguments. The rule aligns with the MITRE ATT&CK technique T1105 (Ingress Tool Transfer), denoting the tactic of Command and Control.
  ### Investigation Steps
  - **Review Process Creation Logs**: Utilize EDR tools to identify the specific processes initiated by the suspected PowerShell commands and analyze their parent-child process relationships for abnormal patterns.
  - **Analyze Command-Line Arguments**: Inspect the command-line arguments of flagged processes to confirm the presence of COM object references or known CLSIDs associated with potential abuse.
  - **Correlate with Other Data Sources**: Check network connection logs to identify any outbound communication attempts by the flagged processes, paying particular attention to any unusual domains or IP addresses.
  - **Assess User Context**: Evaluate the accounts and contexts under which the flagged processes ran to determine if the actions align with legitimate business activities or indicate potential compromise.
  ### Prioritization
  This alert is classified with a medium severity level due to the potential for COM object abuses in the enterprise environment. Although not all detected instances indicate malicious activity, the use of known CLSIDs for command-and-control is a recognized tactic that warrants further investigation.
  ### Blind Spots and Assumptions
  The rule may not fire in environments where users have legitimate needs for accessing the monitored COM objects, potentially leading to false positives. Additionally, sophisticated adversaries may disguise their usage of COM object downloads or use alternative methods to transfer tools, rendering this detection ineffective. Assumptions include that adversaries will use common or known CLSIDs, which may not always be the case.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
