title: HackTool - Default PowerSploit/Empire Scheduled Task Creation
id: 56c217c3-2de2-479b-990f-5c109ba8458f
status: test
description: Detects the creation of a schtask via PowerSploit or Empire Default Configuration.
references:
- https://github.com/0xdeadbeefJERKY/PowerSploit/blob/8690399ef70d2cad10213575ac67e8fa90ddf7c3/Persistence/Persistence.psm1
- https://github.com/EmpireProject/Empire/blob/08cbd274bef78243d7a8ed6443b8364acd1fc48b/lib/modules/powershell/persistence/userland/schtasks.py
author: Markus Neis, @Karneades
date: 2018-03-06
modified: 2023-03-03
tags:
- attack.execution
- attack.persistence
- attack.privilege-escalation
- attack.s0111
- attack.g0022
- attack.g0060
- car.2013-08-001
- attack.t1053.005
- attack.t1059.001
logsource:
  product: windows
  category: process_creation
detection:
  selection:
    ParentImage|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    Image|endswith: '\schtasks.exe'
    CommandLine|contains|all:
    - '/Create'
    - 'powershell.exe -NonI'
    - '/TN Updater /TR'
    CommandLine|contains:
    - '/SC ONLOGON'
    - '/SC DAILY /ST'
    - '/SC ONIDLE'
    - '/SC HOURLY'
  condition: selection
falsepositives:
- Unlikely
level: high
notes: |
  ### Technical Context
  This detection rule is designed to identify the creation of scheduled tasks using PowerSploit or Empireâ€”a type of post-exploitation framework commonly employed by attackers for persistence on Windows systems. Specifically, it examines process creation logs for instances where PowerShell (`powershell.exe` or `pwsh.exe`) is the parent process of the `schtasks.exe` command. The rule looks for command line parameters indicative of task creation, such as `/Create`, with a specific focus on task scheduling options like `/SC ONLOGON`, `/SC DAILY /ST`, `/SC ONIDLE`, and `/SC HOURLY`. These parameters suggest an intent to establish a scheduled task that may execute malicious code under various contexts.
  Technically, the critical data sources include Windows process creation logs that capture details about which process initiated another (in this case, PowerShell launching `schtasks.exe`), as well as command-line arguments that can reveal the specific operations being performed. This detection aligns with the MITRE ATT&CK framework, particularly focusing on the Execution Tactic under the `T1053.005` technique (Scheduled Task/Job) and `T1059.001` (PowerShell), providing a robust framework for understanding potential adversarial persistence mechanisms.
  ### Investigation Steps
  - **Identify the Alert**: Review the alert generated by the detection rule in your SIEM to determine which system and user account triggered the event.
  - **Analyze Process Creation Logs**: Utilize EDR tools to investigate process creation events around the time of the alert, looking specifically for instances of `schtasks.exe` launched by `powershell.exe`.
  - **Command Line Review**: Check the command line parameters of the running task for suspicious or unauthorized parameters that could indicate malicious intent, such as unusual task names or execution schedules.
  - **Correlate with User Activity**: Examine user activity logs (Windows Security or other relevant sources) to assess if the user account associated with the scheduled task creation has any known malicious behavior or anomalies that require further investigation.
  ### Prioritization
  Given the high severity level associated with this alert, it is important to acknowledge that the creation of scheduled tasks can facilitate persistent access to systems, enabling further malicious actions without detection. This kind of behavior is commonly observed in advanced attacks and warrants immediate investigation.
  ### Blind Spots and Assumptions
  This detection rule assumes that malicious actors will utilize the noteworthy command line options outlined in the detection criteria. However, it may not be capable of detecting alternative methods of scheduled task creation that do not involve `powershell.exe`, such as direct calls to `schtasks.exe` from other scripts or executable files. Additionally, if an adversary uses obfuscation techniques to hide their commands, or executes code in a way that does not follow the established patterns of task creation, the alert may fail to trigger. Responders should also consider possible administrative or legitimate uses of these commands which could lead to false positives.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
