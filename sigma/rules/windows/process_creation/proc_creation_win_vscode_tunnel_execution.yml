title: Visual Studio Code Tunnel Execution
id: 90d6bd71-dffb-4989-8d86-a827fedd6624
status: test
description: Detects Visual Studio Code tunnel execution. Attackers can abuse this
  functionality to establish a C2 channel
references:
- https://ipfyx.fr/post/visual-studio-code-tunnel/
- https://badoption.eu/blog/2023/01/31/code_c2.html
- https://code.visualstudio.com/docs/remote/tunnels
author: Nasreddine Bencherchali (Nextron Systems), citron_ninja
date: 2023-10-25
tags:
- attack.command-and-control
- attack.t1071.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_only_tunnel:
    OriginalFileName:
    CommandLine|endswith: '.exe tunnel'
  selection_tunnel_args:
    CommandLine|contains|all:
    - '.exe tunnel'
    - '--name '
    - '--accept-server-license-terms'
  selection_parent_tunnel:
    ParentCommandLine|endswith: ' tunnel'
    Image|endswith: '\cmd.exe'
    CommandLine|contains|all:
    - '/d /c '
    - '\servers\Stable-'
    - 'code-server.cmd'
  condition: 1 of selection_*
falsepositives:
- Legitimate use of Visual Studio Code tunnel
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Visual Studio Code Tunnel Execution" is designed to identify potential abuse of Visual Studio Code's tunneling functionality, which attackers could exploit to establish a command-and-control (C2) channel within the enterprise environment. This rule looks for specific patterns in process creation logs, particularly focusing on command-line arguments indicative of a tunnel execution. It checks for instances where the command line either ends with ".exe tunnel" or uses parameters that relate to tunnel execution and accept server license terms. By leveraging these indicators, the rule aims to detect possibly unauthorized use of Visual Studio Code's tunneling feature, which is documented in the MITRE ATT&CK framework under the Command and Control tactic with the technique ID T1071.001.
  The telemetry sources involved in this detection include Windows process creation logs, specifically monitoring attributes like `CommandLine`, `OriginalFileName`, and `ParentCommandLine`. These data points are crucial for determining whether a Visual Studio Code tunnel execution has been initiated and if it aligns with normal operating procedures. Anomalies in these logs may warrant further investigation by SOC analysts.
  ### Investigation Steps
  - **Review Process Creation Logs:** Examine the process creation logs in your EDR solution for any instances involving Visual Studio Code with command lines containing ".exe tunnel" or related parameters. This helps confirm if the execution is legitimate or potentially malicious.
  - **Assess Parent Process:** Investigate the parent process of the detected tunnel execution. Check if it is initiated by legitimate processes like `cmd.exe`, and analyze the complete command line arguments to assess the context of execution.
  - **Correlate with Network Activity:** Utilize network detection and response tools to verify if any unusual external connections were made following the tunnel execution event. This step can indicate if a C2 communication channel was established.
  - **Validate with User Context:** Look into user account activities surrounding the detected event in logs from your identity management systems. Confirm whether the user normally utilizes Visual Studio Code and assess if their behavior aligns with typical usage patterns.
  ### Prioritization
  The alert generated by this rule should be treated with medium severity due to the potential risk associated with unapproved C2 channels established through exploited tunneling functionalities. Such activities can lead to data exfiltration and unauthorized access to internal systems.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where legitimate use of Visual Studio Code tunneling is prevalent in the enterprise during authorized development activities. Additionally, advanced adversaries could bypass detection by using non-standard command-line arguments or employing obfuscation techniques. It is assumed that basic scripting or tool usage would not conflict with usual Visual Studio Operations, and therefore the rule may miss actions not directly associated with `.exe tunnel` processes if attackers adapt their methods.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
