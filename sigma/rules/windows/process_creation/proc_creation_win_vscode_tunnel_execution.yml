title: Visual Studio Code Tunnel Execution
id: 90d6bd71-dffb-4989-8d86-a827fedd6624
status: test
description: Detects Visual Studio Code tunnel execution. Attackers can abuse this
  functionality to establish a C2 channel
references:
- https://ipfyx.fr/post/visual-studio-code-tunnel/
- https://badoption.eu/blog/2023/01/31/code_c2.html
- https://code.visualstudio.com/docs/remote/tunnels
author: Nasreddine Bencherchali (Nextron Systems), citron_ninja
date: 2023-10-25
tags:
- attack.command-and-control
- attack.t1071.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_only_tunnel:
    OriginalFileName:
    CommandLine|endswith: '.exe tunnel'
  selection_tunnel_args:
    CommandLine|contains|all:
    - '.exe tunnel'
    - '--name '
    - '--accept-server-license-terms'
  selection_parent_tunnel:
    ParentCommandLine|endswith: ' tunnel'
    Image|endswith: '\cmd.exe'
    CommandLine|contains|all:
    - '/d /c '
    - '\servers\Stable-'
    - 'code-server.cmd'
  condition: 1 of selection_*
falsepositives:
- Legitimate use of Visual Studio Code tunnel
level: medium
notes: |
  ### Technical Context
  This Sigma rule is designed to detect the execution of Visual Studio Code (VS Code) tunneling capabilities, which can be exploited by attackers to establish command and control (C2) channels. The rule identifies suspicious process creation events by analyzing command-line parameters and the names of executables associated with the VS Code tunnel functionality. It specifically looks for instances where processes are launched with command-line arguments containing '.exe tunnel', as well as specific parameters such as '--name' and '--accept-server-license-terms'. Additional context is gathered by examining the parent process of the VS Code tunnel, where potential abuse might occur when executed from a command prompt (cmd.exe) with characteristics that suggest C2 activities.
  ### Investigation Steps
  - Verify the source of the alert by checking process creation logs within your EDR for any instances of the version of Visual Studio Code in question, particularly focusing on the timestamps when these processes were initiated.
  - Review the command-line parameters associated with these processes in the EDR to determine if they include the potentially malicious arguments identified by this rule, noting any unusual or unexpected values.
  - Investigate parent processes in the same timeframe to understand the context in which the tunnel was initiated, especially looking for any `cmd.exe` instances that may have spawned the tunnel command.
  - Conduct a network analysis using your NDR tool to monitor traffic for any outbound connections associated with the tunnel execution, particularly focusing on communication patterns that might indicate C2 activities.
