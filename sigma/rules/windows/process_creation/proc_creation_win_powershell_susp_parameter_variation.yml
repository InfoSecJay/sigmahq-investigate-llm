title: Suspicious PowerShell Parameter Substring
id: 36210e0d-5b19-485d-a087-c096088885f0
status: test
description: Detects suspicious PowerShell invocation with a parameter substring
references:
- http://www.danielbohannon.com/blog-1/2017/3/12/powershell-execution-argument-obfuscation-how-it-can-make-detection-easier
author: Florian Roth (Nextron Systems), Daniel Bohannon (idea), Roberto Rodriguez
  (Fix)
date: 2019-01-16
modified: 2022-07-14
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    CommandLine|contains:
    - ' -windowstyle h '
    - ' -windowstyl h'
    - ' -windowsty h'
    - ' -windowst h'
    - ' -windows h'
    - ' -windo h'
    - ' -wind h'
    - ' -win h'
    - ' -wi h'
    - ' -win h '
    - ' -win hi '
    - ' -win hid '
    - ' -win hidd '
    - ' -win hidde '
    - ' -NoPr '
    - ' -NoPro '
    - ' -NoProf '
    - ' -NoProfi '
    - ' -NoProfil '
    - ' -nonin '
    - ' -nonint '
    - ' -noninte '
    - ' -noninter '
    - ' -nonintera '
    - ' -noninterac '
    - ' -noninteract '
    - ' -noninteracti '
    - ' -noninteractiv '
    - ' -ec '
    - ' -encodedComman '
    - ' -encodedComma '
    - ' -encodedComm '
    - ' -encodedCom '
    - ' -encodedCo '
    - ' -encodedC '
    - ' -encoded '
    - ' -encode '
    - ' -encod '
    - ' -enco '
    - ' -en '
    - ' -executionpolic '
    - ' -executionpoli '
    - ' -executionpol '
    - ' -executionpo '
    - ' -executionp '
    - ' -execution bypass'
    - ' -executio bypass'
    - ' -executi bypass'
    - ' -execut bypass'
    - ' -execu bypass'
    - ' -exec bypass'
    - ' -exe bypass'
    - ' -ex bypass'
    - ' -ep bypass'
    - ' /windowstyle h '
    - ' /windowstyl h'
    - ' /windowsty h'
    - ' /windowst h'
    - ' /windows h'
    - ' /windo h'
    - ' /wind h'
    - ' /win h'
    - ' /wi h'
    - ' /win h '
    - ' /win hi '
    - ' /win hid '
    - ' /win hidd '
    - ' /win hidde '
    - ' /NoPr '
    - ' /NoPro '
    - ' /NoProf '
    - ' /NoProfi '
    - ' /NoProfil '
    - ' /nonin '
    - ' /nonint '
    - ' /noninte '
    - ' /noninter '
    - ' /nonintera '
    - ' /noninterac '
    - ' /noninteract '
    - ' /noninteracti '
    - ' /noninteractiv '
    - ' /ec '
    - ' /encodedComman '
    - ' /encodedComma '
    - ' /encodedComm '
    - ' /encodedCom '
    - ' /encodedCo '
    - ' /encodedC '
    - ' /encoded '
    - ' /encode '
    - ' /encod '
    - ' /enco '
    - ' /en '
    - ' /executionpolic '
    - ' /executionpoli '
    - ' /executionpol '
    - ' /executionpo '
    - ' /executionp '
    - ' /execution bypass'
    - ' /executio bypass'
    - ' /executi bypass'
    - ' /execut bypass'
    - ' /execu bypass'
    - ' /exec bypass'
    - ' /exe bypass'
    - ' /ex bypass'
    - ' /ep bypass'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to detect suspicious PowerShell invocations that utilize partial parameter substrings, often indicative of attempts to obfuscate malicious scripts or actions. The rule focuses on PowerShell (either `powershell.exe` or `pwsh.exe`) command-line executions that exhibit certain patterns in their parameters. For example, common flags such as `-windowstyle`, `-NoProfile`, or `-ExecutionPolicy` may be shortened or altered to evade detection. By monitoring these specific command-line patterns, the detection rule aims to flag potentially unauthorized or malicious PowerShell activities that align with the MITRE ATT&CK tactic of Execution (T1059.001). The primary data sources leveraged for this rule include process creation logs, specifically capturing the image path and command-line arguments of the executing process.
  ### Investigation Steps
  - **Review EDR Alerts**: Utilize your endpoint detection and response (EDR) tool to analyze the alerts for any suspicious PowerShell activities. Look specifically at the command-line parameters for obfuscation tactics.
  - **Correlate with Security Events**: Cross-reference the identified suspicious PowerShell execution with Windows Security event logs for additional context, such as user logins or triggered security policies.
  - **Analyze Network Traffic**: Use Network Detection and Response (NDR) capabilities to inspect outbound connections initiated by the PowerShell process. This may reveal attempts to connect to known malicious IPs or domains.
  - **Check for File Creation Events**: Investigate the file system for newly-created files or scripts that may coincide with the suspicious PowerShell execution. Use the Sysmon logs to identify file creations linked to the alert.
  ### Prioritization
  The severity level of this alert is categorized as high due to the nature of PowerShell as a powerful administrative tool that can be easily abused by attackers for executing malicious code and bypassing security measures.
  ### Blind Spots and Assumptions
  This detection rule relies on the assumption that PowerShell usage will exhibit the outlined obfuscation patterns, which may not be applicable to all environments. Additionally, legitimate system administrators may use similarly structured commands during routine tasks, leading to potential false positives. Furthermore, if an adversary uses different command-line manipulations or utilizes alternatives to PowerShell (e.g., creating binaries or using other scripting languages), the rule may not trigger, creating blind spots in detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
