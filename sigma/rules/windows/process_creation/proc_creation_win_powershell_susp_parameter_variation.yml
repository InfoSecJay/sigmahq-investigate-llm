title: Suspicious PowerShell Parameter Substring
id: 36210e0d-5b19-485d-a087-c096088885f0
status: test
description: Detects suspicious PowerShell invocation with a parameter substring
references:
- http://www.danielbohannon.com/blog-1/2017/3/12/powershell-execution-argument-obfuscation-how-it-can-make-detection-easier
author: Florian Roth (Nextron Systems), Daniel Bohannon (idea), Roberto Rodriguez
  (Fix)
date: 2019-01-16
modified: 2022-07-14
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
    Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    CommandLine|contains:
    - ' -windowstyle h '
    - ' -windowstyl h'
    - ' -windowsty h'
    - ' -windowst h'
    - ' -windows h'
    - ' -windo h'
    - ' -wind h'
    - ' -win h'
    - ' -wi h'
    - ' -win h '
    - ' -win hi '
    - ' -win hid '
    - ' -win hidd '
    - ' -win hidde '
    - ' -NoPr '
    - ' -NoPro '
    - ' -NoProf '
    - ' -NoProfi '
    - ' -NoProfil '
    - ' -nonin '
    - ' -nonint '
    - ' -noninte '
    - ' -noninter '
    - ' -nonintera '
    - ' -noninterac '
    - ' -noninteract '
    - ' -noninteracti '
    - ' -noninteractiv '
    - ' -ec '
    - ' -encodedComman '
    - ' -encodedComma '
    - ' -encodedComm '
    - ' -encodedCom '
    - ' -encodedCo '
    - ' -encodedC '
    - ' -encoded '
    - ' -encode '
    - ' -encod '
    - ' -enco '
    - ' -en '
    - ' -executionpolic '
    - ' -executionpoli '
    - ' -executionpol '
    - ' -executionpo '
    - ' -executionp '
    - ' -execution bypass'
    - ' -executio bypass'
    - ' -executi bypass'
    - ' -execut bypass'
    - ' -execu bypass'
    - ' -exec bypass'
    - ' -exe bypass'
    - ' -ex bypass'
    - ' -ep bypass'
    - ' /windowstyle h '
    - ' /windowstyl h'
    - ' /windowsty h'
    - ' /windowst h'
    - ' /windows h'
    - ' /windo h'
    - ' /wind h'
    - ' /win h'
    - ' /wi h'
    - ' /win h '
    - ' /win hi '
    - ' /win hid '
    - ' /win hidd '
    - ' /win hidde '
    - ' /NoPr '
    - ' /NoPro '
    - ' /NoProf '
    - ' /NoProfi '
    - ' /NoProfil '
    - ' /nonin '
    - ' /nonint '
    - ' /noninte '
    - ' /noninter '
    - ' /nonintera '
    - ' /noninterac '
    - ' /noninteract '
    - ' /noninteracti '
    - ' /noninteractiv '
    - ' /ec '
    - ' /encodedComman '
    - ' /encodedComma '
    - ' /encodedComm '
    - ' /encodedCom '
    - ' /encodedCo '
    - ' /encodedC '
    - ' /encoded '
    - ' /encode '
    - ' /encod '
    - ' /enco '
    - ' /en '
    - ' /executionpolic '
    - ' /executionpoli '
    - ' /executionpol '
    - ' /executionpo '
    - ' /executionp '
    - ' /execution bypass'
    - ' /executio bypass'
    - ' /executi bypass'
    - ' /execut bypass'
    - ' /execu bypass'
    - ' /exec bypass'
    - ' /exe bypass'
    - ' /ex bypass'
    - ' /ep bypass'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule focuses on identifying potentially malicious PowerShell commands by monitoring process creation logs for specific PowerShell invocations. It looks for executions of PowerShell binaries (`powershell.exe` and `pwsh.exe`) that contain certain suspicious parameter substrings indicative of evasion techniques or obfuscation tactics often employed by threat actors. The command-line parameters monitored include variations of flags related to window styles, non-interactive execution, and encoded commandsâ€”all of which are often used in malicious scripts to evade detection or to conduct attacks.
  The rule leverages process creation logs as its primary data source, which includes critical details such as the command-line arguments used during the execution of PowerShell. By capturing these parameters, the detection rule aims to flag instances where PowerShell may be used in a way that deviates from standard operational behavior, allowing incident responders to investigate further for possible security incidents.
  ### Investigation Steps
  - Review the EDR logs for the specific process creation event associated with the flagged PowerShell execution to identify the user and the context of the command.
  - Examine the command-line parameters for any unusual or unexpected flags alongside a full command history to ascertain the intent behind the execution.
  - Check the associated parent processes in the incident timeline to analyze how the PowerShell command was triggered, which may reveal any preceding suspicious activities.
  - Utilize threat intelligence platforms or existing blocklists to verify whether the detected command pattern aligns with known malicious techniques or previously flagged behaviors.
