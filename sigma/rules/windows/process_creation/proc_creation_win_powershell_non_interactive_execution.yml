title: Non Interactive PowerShell Process Spawned
id: f4bbd493-b796-416e-bbf2-121235348529
status: test
description: Detects non-interactive PowerShell activity by looking at the "powershell"
  process with a non-user GUI process such as "explorer.exe" as a parent.
references:
- https://web.archive.org/web/20200925032237/https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190410151110.html
author: Roberto Rodriguez @Cyb3rWard0g (rule), oscd.community (improvements)
date: 2019-09-12
modified: 2023-09-07
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
  filter_main_generic:
    ParentImage|endswith:
    - ':\Windows\explorer.exe'
    - ':\Windows\System32\CompatTelRunner.exe'
    - ':\Windows\SysWOW64\explorer.exe'
  filter_main_windows_update:
    ParentImage: ':\$WINDOWS.~BT\Sources\SetupHost.exe'     # During Windows updates/upgrades
        # CommandLine: powershell.exe -ExecutionPolicy Restricted -Command Write-Host 'Final result: 1';
  filter_optional_vscode:
        # Triggered by VsCode when you open a Shell inside the workspace
    ParentImage|endswith: '\AppData\Local\Programs\Microsoft VS Code\Code.exe'
    ParentCommandLine|contains: ' --ms-enable-electron-run-as-node '
  filter_optional_terminal:
    ParentImage|contains: ':\Program Files\WindowsApps\Microsoft.WindowsTerminal_'
    ParentImage|endswith: '\WindowsTerminal.exe'
  condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- Likely. Many admin scripts and tools leverage PowerShell in their BAT or VB scripts
  which may trigger this rule often. It is best to add additional filters or use this
  to hunt for anomalies
level: low
notes: |
  ### Technical Context
  This detection rule is designed to identify non-interactive PowerShell activity within a Windows environment. Specifically, it focuses on instances where the `powershell.exe` or `pwsh.exe` processes are spawned as children of interfaces typically associated with user environmentsâ€”most notably `explorer.exe`. The key intent here is to detect potentially malicious scripts running without user interaction, which can be indicative of automated attacks or remote management attempts. The rule leverages process creation logs as its primary data source, analyzing the properties of spawned processes to determine their parent-child relationships. A successful match will show the PowerShell process ending with the specified executable paths while ensuring that the parent does not belong to a typical user-interactive context or authorized applications.
  ### Investigation Steps
  - Review the process creation logs in your EDR for instances where `powershell.exe` or `pwsh.exe` has been spawned by `explorer.exe` or similar non-interactive processes. 
  - Check the command-line parameters associated with these PowerShell executions. Look for unusual commands or scripts that could indicate malicious intent.
  - Utilize the SIEM to correlate these alerts with user activity logs, identifying any legitimate user sessions or actions occurring at the time of the alert.
  - Investigate the system for related artifacts or digital traces, such as temporary files or registry modifications, that may provide further context on the execution of the PowerShell command.
