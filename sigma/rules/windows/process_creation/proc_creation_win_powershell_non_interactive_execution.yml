title: Non Interactive PowerShell Process Spawned
id: f4bbd493-b796-416e-bbf2-121235348529
status: test
description: Detects non-interactive PowerShell activity by looking at the "powershell"
  process with a non-user GUI process such as "explorer.exe" as a parent.
references:
- https://web.archive.org/web/20200925032237/https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190410151110.html
author: Roberto Rodriguez @Cyb3rWard0g (rule), oscd.community (improvements)
date: 2019-09-12
modified: 2023-09-07
tags:
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
  filter_main_generic:
    ParentImage|endswith:
    - ':\Windows\explorer.exe'
    - ':\Windows\System32\CompatTelRunner.exe'
    - ':\Windows\SysWOW64\explorer.exe'
  filter_main_windows_update:
    ParentImage: ':\$WINDOWS.~BT\Sources\SetupHost.exe'     # During Windows updates/upgrades
        # CommandLine: powershell.exe -ExecutionPolicy Restricted -Command Write-Host 'Final result: 1';
  filter_optional_vscode:
        # Triggered by VsCode when you open a Shell inside the workspace
    ParentImage|endswith: '\AppData\Local\Programs\Microsoft VS Code\Code.exe'
    ParentCommandLine|contains: ' --ms-enable-electron-run-as-node '
  filter_optional_terminal:
    ParentImage|contains: ':\Program Files\WindowsApps\Microsoft.WindowsTerminal_'
    ParentImage|endswith: '\WindowsTerminal.exe'
  condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*
falsepositives:
- Likely. Many admin scripts and tools leverage PowerShell in their BAT or VB scripts
  which may trigger this rule often. It is best to add additional filters or use this
  to hunt for anomalies
level: low
notes: |
  n
  ### Technical Context
  This detection rule identifies instances of non-interactive PowerShell processes initiated by GUI-based parent processes, such as `explorer.exe`. By scrutinizing the properties of PowerShell process invocations (specifically `powershell.exe` and `pwsh.exe`) and their parent processes, the rule aims to pinpoint potentially malicious activity that uses PowerShell for execution without user interaction. The primary data sources leveraged for this detection include process creation logs, which capture details like the process image, original file name, and parent image attributes. The associated MITRE ATT&CK tactics are execution (T1059.001) and are particularly relevant in scenarios where adversaries attempt to leverage PowerShell to carry out their operations stealthily under the guise of legitimate processes.
  ### Investigation Steps
  - **Validate the Alert in EDR**: Utilize your EDR solution to search for the detected PowerShell process, reviewing its execution context, such as command-line arguments and parent process details to determine legitimacy.
  - **Examine PowerShell Logs**: Check for any command history or transcript logs in PowerShell to look for unusual commands that may indicate malicious activity linked to the detected alert.
  - **Analyze Network Connections**: Use network logs to identify any outbound connections initiated by the PowerShell process to external IP addresses or domains, which may suggest data exfiltration or command-and-control communication.
  - **Review User Activity Logs**: Confirm if the user associated with the alert was active during the time of the alert, and investigate any potential unauthorized access to workstations or system compromise that led to the PowerShell execution.
  ### Prioritization
  The alert carries a low severity level as non-interactive PowerShell instances can frequently arise from legitimate administrative tasks or scripts. However, it should not be dismissed entirely, as it warrants further investigation to rule out any potential misuse.
  ### Blind spots and Assumptions
  This rule might not trigger in scenarios where PowerShell is invoked via different parent processes or through legitimate scheduled tasks that do not involve user interaction. Furthermore, it assumes that PowerShell logging is enabled on the endpoints, which may not always be the case. Essentially, if an attacker employs alternative methods, such as using different scripting languages or invoking PowerShell in a more interactive manner, the rule may fail to trigger.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and relevance, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
