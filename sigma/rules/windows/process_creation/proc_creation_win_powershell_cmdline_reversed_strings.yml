title: Potential PowerShell Obfuscation Via Reversed Commands
id: b6b49cd1-34d6-4ead-b1bf-176e9edba9a4
status: test
description: Detects the presence of reversed PowerShell commands in the CommandLine.
  This is often used as a method of obfuscation by attackers
references:
- https://2019.offzone.moscow/ru/report/hunting-for-powershell-abuses/
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=66
author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton
date: 2020-10-11
modified: 2023-05-31
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
  selection_cli:
    CommandLine|contains:
    - 'hctac'
    - 'kaerb'
    - 'dnammoc'
    - 'ekovn'         # Also covers 'ekovni'
    - 'eliFd'
    - 'rahc'
    - 'etirw'
    - 'golon'
    - 'tninon'
    - 'eddih'
    - 'tpircS'
    - 'ssecorp'
    - 'llehsrewop'
    - 'esnopser'
    - 'daolnwod'
    - 'tneilCbeW'
    - 'tneilc'
    - 'ptth'
    - 'elifotevas'
    - '46esab'
    - 'htaPpmeTteG'
    - 'tcejbO'
    - 'maerts'
    - 'hcaerof'
    - 'retupmoc'
  filter_main_encoded_keyword:
        # We exclude usage of encoded commands as they might generate FPs as shown here:
        #   https://github.com/SigmaHQ/sigma/pull/2720
        #   https://github.com/SigmaHQ/sigma/issues/4270
    CommandLine|contains:
    - ' -EncodedCommand '
    - ' -enc '
  condition: all of selection_* and not 1 of filter_main_*
falsepositives:
- Unlikely
level: high
notes: |
  ### Technical Context
  The Sigma rule titled "Potential PowerShell Obfuscation Via Reversed Commands" is designed to detect potential obfuscation techniques commonly employed by attackers using PowerShell. This detection focuses on identifying PowerShell or pwsh (PowerShell Core) processes that execute commands reversed in their alphabetical order, which is a tactic used to obscure intent and execution flow from security monitoring. The rule monitors process creation logs for specific reverse string patterns that are indicative of such activities, while also filtering out known encoded command invocations to minimize false positives. This detection relies on data sources such as Windows Security Event Logs, specifically focusing on process creation events regarding PowerShell executions. The relevant MITRE ATT&CK techniques associated with this rule include `T1027` (Obfuscated Files or Information) and `T1059.001` (Command and Scripting Interpreter: PowerShell), which provide a framework for understanding the broader context of the detected activity.
  ### Investigation Steps
  - **Check PowerShell Execution History**: Review the PowerShell console logs and execution history on the affected endpoint to identify any recently run commands and their parameters for suspicious activity.
  - **Analyze Process Parent Relationships**: Use EDR tools to examine the parent-child relationships of the identified PowerShell process. This can help uncover if the execution was initiated by a legitimate process or an unexpected adversary-controlled entity.
  - **Inspect Network Connections**: Query network logs (NDR/Firewall) to understand if the PowerShell command led to any unusual outbound connections that might indicate potential data exfiltration or command-and-control activity.
  - **Review User Activity**: Analyze Windows Event Logs, particularly for user logins and activities, to ascertain if the user account executing the PowerShell commands is legitimate or if there has been account compromise.
  ### Prioritization
  This alert is classified as high severity due to the potential for misuse of PowerShell for malicious activities such as data exfiltration or system compromise. The presence of reversed commands often indicates an attempt to bypass traditional defenses, warranting a swift and thorough investigation.
  ### Blind Spots and Assumptions
  This detection rule could potentially miss legitimate use cases where users employ reverse strings for automation or educational purposes. Furthermore, adversaries might adapt their techniques by using more sophisticated encoding or leverage legitimate applications to execute commands without triggering alerts. It is assumed that all PowerShell activity will be logged, hence machines or environments with PowerShell logging disabled may fail to generate alerts as expected.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
