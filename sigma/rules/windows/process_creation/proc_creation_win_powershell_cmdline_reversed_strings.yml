title: Potential PowerShell Obfuscation Via Reversed Commands
id: b6b49cd1-34d6-4ead-b1bf-176e9edba9a4
status: test
description: Detects the presence of reversed PowerShell commands in the CommandLine.
  This is often used as a method of obfuscation by attackers
references:
- https://2019.offzone.moscow/ru/report/hunting-for-powershell-abuses/
- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=66
author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton
date: 2020-10-11
modified: 2023-05-31
tags:
- attack.defense-evasion
- attack.t1027
- attack.execution
- attack.t1059.001
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
  - OriginalFileName:
    - 'PowerShell.EXE'
    - 'pwsh.dll'
  selection_cli:
    CommandLine|contains:
    - 'hctac'
    - 'kaerb'
    - 'dnammoc'
    - 'ekovn'         # Also covers 'ekovni'
    - 'eliFd'
    - 'rahc'
    - 'etirw'
    - 'golon'
    - 'tninon'
    - 'eddih'
    - 'tpircS'
    - 'ssecorp'
    - 'llehsrewop'
    - 'esnopser'
    - 'daolnwod'
    - 'tneilCbeW'
    - 'tneilc'
    - 'ptth'
    - 'elifotevas'
    - '46esab'
    - 'htaPpmeTteG'
    - 'tcejbO'
    - 'maerts'
    - 'hcaerof'
    - 'retupmoc'
  filter_main_encoded_keyword:
        # We exclude usage of encoded commands as they might generate FPs as shown here:
        #   https://github.com/SigmaHQ/sigma/pull/2720
        #   https://github.com/SigmaHQ/sigma/issues/4270
    CommandLine|contains:
    - ' -EncodedCommand '
    - ' -enc '
  condition: all of selection_* and not 1 of filter_main_*
falsepositives:
- Unlikely
level: high
notes: |
  ### Technical Context
  This detection rule focuses on identifying potential obfuscation techniques in PowerShell command execution, specifically looking for reversed command strings often used by attackers to evade detection. The rule captures instances where either `powershell.exe` or `pwsh.exe` is invoked with specific command-line arguments that are the reverse of common PowerShell commands. By parsing the command-line parameters in process creation logs, this rule can highlight obfuscated PowerShell usage that may otherwise go unnoticed. Additionally, the rule excludes commands that are known to use encoded execution (`-EncodedCommand` or `-enc`), which are less likely to be malicious when detected without obfuscation.
  ### Investigation Steps
  - Investigate the process creation logs within your EDR tool to pinpoint the details of the PowerShell or pwsh command, including the timing and initiating user account.
  - Examine the command-line parameters for any reversed strings that may indicate evasion techniques, and check for other unusual or unexpected arguments.
  - Cross-reference any malicious indicators found in the command line with threat intelligence databases to see if similar patterns have been reported in known attacks, specifically regarding PowerShell abuses.
  - Check the network traffic logs via your NDR tool for any suspicious outbound connections that correlate with the identified PowerShell commands, which may indicate command and control activity.
