title: Binary Proxy Execution Via Dotnet-Trace.EXE
id: 9257c05b-4a4a-48e5-a670-b7b073cf401b
status: test
description: Detects commandline arguments for executing a child process via dotnet-trace.exe
references:
- https://twitter.com/bohops/status/1740022869198037480
author: Jimmy Bayne (@bohops)
date: 2024-01-02
tags:
- attack.execution
- attack.defense-evasion
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\dotnet-trace.exe'
  - OriginalFileName: 'dotnet-trace.dll'
  selection_cli:
    CommandLine|contains|all:
    - '-- '
    - 'collect'
  condition: all of selection_*
falsepositives:
- Legitimate usage of the utility in order to debug and trace a program.
level: medium
notes: |
  n
  ### Technical Context
  The Sigma rule titled "Binary Proxy Execution Via Dotnet-Trace.EXE" is designed to detect attempts to execute a child process using `dotnet-trace.exe`, a legitimate .NET diagnostic tool. This rule focuses on command-line execution patterns where `dotnet-trace.exe` is invoked with specific arguments that suggest potential misuse in an attack scenario. The rule looks for process creation events specifically involving `dotnet-trace.exe`, alongside the original file name indicating `dotnet-trace.dll` and command-line parameters that contain the strings '-
  - ' and 'collect'. By analyzing these parameters, the detection identifies executions that may deviate from standard usage, aligning with tactics from the MITRE ATT&CK framework under the Execution category, specifically technique T1218, which refers to "Signed Binary Proxy Execution."
  ### Investigation Steps
  - **Review Related Process Logs**: Use the EDR tool to gather detailed process creation logs related to `dotnet-trace.exe`. Analyze the parent-child process relationships to identify if other potentially malicious processes were spawned.
  - **Examine Network Connections**: Check any network activity logs for connections initiated by `dotnet-trace.exe`. Look for unusual outbound traffic, particularly to known malicious domains or IPs.
  - **Inspect Command-Line Parameters**: Cross-reference the command-line parameters captured in Windows Event Logs with known and expected usages of `dotnet-trace.exe`. Investigate any anomalies that suggest circular execution or unwanted debugging efforts.
  - **Audit User Activities**: Analyze user behavior around the time of the alert to confirm if the execution of `dotnet-trace.exe` aligns with expected activities, such as legitimate debugging or development tasks.
  ### Prioritization
  This alert is considered medium severity as there is a possibility of legitimate debugging activities that utilize `dotnet-trace.exe`. However, the presence of specific command-line parameters may indicate evasive actions taken by an adversary.
  ### Blind Spots and Assumptions
  This detection rule may not trigger if `dotnet-trace.exe` is executed without the specified command-line arguments or if it is launched by a process that the rule does not capture. Additionally, legitimate applications or scripts that utilize this command may create noise, leading to false positives. Engineers should be aware that adversaries may utilize other .NET tracing tools or custom scripts to avoid detection, and thus the absence of logs related to `dotnet-trace.exe` does not necessarily indicate safe activity.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and applicability, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
