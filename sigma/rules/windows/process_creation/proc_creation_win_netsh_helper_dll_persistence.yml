title: Potential Persistence Via Netsh Helper DLL
id: 56321594-9087-49d9-bf10-524fe8479452
related:
- id: c90362e0-2df3-4e61-94fe-b37615814cb1
  type: similar
- id: e7b18879-676e-4a0e-ae18-27039185a8e7
  type: similar
status: test
description: |
  Detects the execution of netsh with "add helper" flag in order to add a custom helper DLL. This technique can be abused to add a malicious helper DLL that can be used as a persistence proxy that gets called when netsh.exe is executed.
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.007/T1546.007.md
- https://github.com/outflanknl/NetshHelperBeacon
- https://web.archive.org/web/20160928212230/https://www.adaptforward.com/2016/09/using-netshell-to-execute-evil-dlls-and-persist-on-a-host/
author: Victor Sergeev, oscd.community
date: 2019-10-25
modified: 2023-11-28
tags:
- attack.privilege-escalation
- attack.persistence
- attack.t1546.007
- attack.s0108
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - OriginalFileName: 'netsh.exe'
  - Image|endswith: '\netsh.exe'
  selection_cli:
    CommandLine|contains|all:
    - 'add'
    - 'helper'
  condition: all of selection_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Potential Persistence Via Netsh Helper DLL" is designed to detect the execution of the `netsh.exe` utility with the specific command-line options "add helper." `netsh` (Network Shell) is a command-line scripting utility used to manage network configurations and settings on Windows. Malicious actors can exploit this utility to create persistence mechanisms by loading custom dynamic link libraries (DLLs) when `netsh` is invoked. The rule functions by monitoring process creation logs for the execution of `netsh.exe` with the relevant command-line parameters that indicate an attempt to add a helper DLL. The detection primarily relies on process creation logs, capturing essential details such as the command-line arguments and the image name of the executing process.
  This rule aligns with the MITRE ATT&CK technique T1546.007 (Event Triggered Execution: DLL Search Order Hijacking) under the tactics of both 'Persistence' and 'Privilege Escalation.' By identifying such potentially harmful command invocations, SOC analysts can intervene before the malicious DLL is loaded, thus preventing potential system compromise or further exploits.
  ### Investigation Steps
  - **Check Process Creation Logs:** Review Windows Event Logs for process creation events related to `netsh.exe` to confirm the context of the execution and identify the user account associated with it.
    
  - **Analyze Command-Line Arguments:** Investigate the command-line parameters used in `netsh.exe` execution, specifically looking for "add" and "helper" to ascertain the intent and legitimate use case.
    
  - **Review Recent DLLs Loaded:** Use EDR solutions to examine recently loaded DLLs on the host, particularly focusing on any unnamed or suspicious DLLs that may have been injected or loaded through the persistence mechanism.
    
  - **Conduct Network Monitoring:** Check Network Traffic Analysis (NTA) logs for any unusual outbound connections or patterns that could suggest the presence of a backdoor or exfiltration activity related to the suspicious `netsh` command execution.
  ### Prioritization
  The alert is marked as medium severity due to the potential for substantial impact on system integrity and security. While not a direct indicator of compromise, the execution patterns captured by this rule suggest that an investigation is warranted to assess the potential risk.
  ### Blind Spots and Assumptions
  The rule may not fire if the `netsh` command is executed in a legitimate context, as the parameters being monitored could be part of standard network administration activities. Additionally, if an adversary alters the command arguments or uses an alternative method to invoke `netsh`, it may bypass detection. Analysts should be aware that updates or replacements to the tool itself may create variations in behavior that could avoid detection under this rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
