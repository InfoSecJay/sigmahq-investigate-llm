title: Process Memory Dump Via Dotnet-Dump
id: 53d8d3e1-ca33-4012-adf3-e05a4d652e34
status: test
description: |
  Detects the execution of "dotnet-dump" with the "collect" flag. The execution could indicate potential process dumping of critical processes such as LSASS.
references:
- https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-dump#dotnet-dump-collect
- https://twitter.com/bohops/status/1635288066909966338
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-03-14
tags:
- attack.defense-evasion
- attack.t1218
logsource:
  category: process_creation
  product: windows
detection:
  selection_img:
  - Image|endswith: '\dotnet-dump.exe'
  - OriginalFileName: 'dotnet-dump.dll'
  selection_cli:
    CommandLine|contains: 'collect'
  condition: all of selection_*
falsepositives:
- Process dumping is the expected behavior of the tool. So false positives are expected
  in legitimate usage. The PID/Process Name of the process being dumped needs to be
  investigated
level: medium
notes: |
  ### Technical Context
  The Sigma rule titled "Process Memory Dump Via Dotnet-Dump" targets the execution of the "dotnet-dump" tool with the "collect" flag, which can indicate suspicious activities such as the unauthorized memory dumping of sensitive processes, like LSASS (Local Security Authority Subsystem Service). Memory dumping is a technique that attackers may use to extract sensitive information from a running process. The rule leverages process creation logs from Windows environments to identify instances where "dotnet-dump.exe" is executed with the specified command-line parameters. It inspects both the image name and the original file name to ensure that the execution is legitimate while also checking if the "collect" argument is present in the command line. This aligns with the MITRE ATT&CK defense evasion tactic, specifically under technique T1218, which details methods used to bypass defenses or conceal adversarial activities.
  ### Investigation Steps
  - **Review EDR Alerts**: Check the EDR for alerts related to the execution of "dotnet-dump.exe" and identify any correlated activities or unusual behaviors occurring around the same time.
  - **Analyze Command-Line Parameters**: Examine the command-line parameters associated with the process creation event. Look specifically for the "collect" flag, and note the Process ID of the target process being dumped.
  - **Check Process Memory Access Logs**: Utilize Windows Security and System logs to investigate if there were any access attempts to sensitive processes like LSASS prior to the execution of "dotnet-dump."
  - **Network Activity Monitoring**: Utilize NDR and proxy logs to look for any suspicious outbound connections that may have occurred during or after the execution of the memory dump, as this could indicate potential exfiltration.
  ### Prioritization
  The alert is classified as medium severity due to the potential for sensitive data exposure through memory dumping techniques. The presence of "dotnet-dump" with the "collect" flag should trigger immediate investigation, especially if it is detected in sensitive environments.
  ### Blind Spots and Assumptions
  This rule may not fire if the "dotnet-dump" tool is used in legitimate scenarios, as false positives are expected when the tool is utilized for valid debugging purposes. Additionally, if the tool is renamed or executed through non-standard methods, the detection may fail. There may also be situations where an adversary employs similar tools or scripts that do not match the specific criteria set in the rule, evading detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
