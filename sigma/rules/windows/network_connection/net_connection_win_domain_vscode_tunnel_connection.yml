title: Network Connection Initiated To Visual Studio Code Tunnels Domain
id: 4b657234-038e-4ad5-997c-4be42340bce4
related:
- id: 9501f8e6-8e3d-48fc-a8a6-1089dd5d7ef4     # Net Connection DevTunnels
  type: similar
- id: b3e6418f-7c7a-4fad-993a-93b65027a9f1     # DNS VsCode
  type: similar
- id: 1cb0c6ce-3d00-44fc-ab9c-6d6d577bf20b     # DNS DevTunnels
  type: similar
status: test
description: |
  Detects network connections to Visual Studio Code tunnel domains initiated by a process on a system. Attackers can abuse that feature to establish a reverse shell or persistence on a machine.
references:
- https://ipfyx.fr/post/visual-studio-code-tunnel/
- https://badoption.eu/blog/2023/01/31/code_c2.html
- https://cydefops.com/vscode-data-exfiltration
author: Kamran Saifullah
date: 2023-11-20
tags:
- attack.exfiltration
- attack.t1567.001
logsource:
  category: network_connection
  product: windows
detection:
  selection:
    Initiated: 'true'
    DestinationHostname|endswith: '.tunnels.api.visualstudio.com'
  condition: selection
falsepositives:
- Legitimate use of Visual Studio Code tunnel will also trigger this.
level: medium
notes: |
  ### Technical Context
  This SigmaHQ rule is designed to detect unauthorized network connections to Visual Studio Code Tunnel domains, specifically targeting those initiated from malicious processes on a Windows system. Attackers may exploit Visual Studio Code's tunnel feature to create reverse shells, thereby facilitating remote access or establishing persistence within an environment. The rule checks for established network connections where the destination hostname ends with `.tunnels.api.visualstudio.com`, indicating a potential use of the tunnel service for nefarious purposes. The primary data source for this detection is network connection logs, which allow the identification of any outbound attempts to this domain. The rule is associated with the MITRE ATT&CK technique T1567.001, which focuses on data exfiltration through application layer protocols.
  ### Investigation Steps
  - **Verify the Process:** Check the process that initiated the connection using EDR. Validate whether it is a known legitimate application or if there are any anomalies associated with it.
  - **Check Outbound Traffic Logs:** Use your network monitoring tools to review outbound traffic logs corresponding to the time of the alert. Identify if any unusual data transfers were completed during that timeframe.
  - **Analyze Sysmon Logs:** Examine Sysmon logs for additional context regarding process creation and network connections related to the alert. Focus on the command-line arguments and parent process ID to ascertain how the tunnel was initiated.
  - **Correlate with Other Alerts:** Look for any correlated alerts indicating suspicious activities around the time this connection was initiated. This may provide insight into a broader attack campaign or help identify the threat actor's methods.
  ### Prioritization
  This alert is rated as medium severity since while the detection can indicate potential malicious activity, legitimate uses of Visual Studio Code tunnels also exist, necessitating careful analysis before determining a true threat.
  ### Blind Spots and Assumptions
  This rule may not fire if attackers use different domains to establish tunnels or if they obliterate logs post-connection. Thereâ€™s also an assumption that network monitoring is appropriately set up to log traffic comprehensively; without complete visibility, this detection may fail. Furthermore, if the Visual Studio Code tunnels feature is not widely used in your environment, legitimate traffic might generate false positives, complicating investigations. 
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
