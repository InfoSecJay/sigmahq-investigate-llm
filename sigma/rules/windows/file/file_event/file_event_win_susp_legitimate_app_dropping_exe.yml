title: Legitimate Application Dropped Executable
id: f0540f7e-2db3-4432-b9e0-3965486744bc
status: test
description: Detects programs on a Windows system that should not write executables
  to disk
references:
- https://github.com/Neo23x0/sysmon-config/blob/3f808d9c022c507aae21a9346afba4a59dd533b9/sysmonconfig-export-block.xml#L1326
author: frack113, Florian Roth (Nextron Systems)
date: 2022-08-21
modified: 2023-06-22
tags:
- attack.defense-evasion
- attack.t1218
logsource:
  product: windows
  category: file_event
detection:
  selection:
    Image|endswith:
            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4
    - '\eqnedt32.exe'
    - '\wordpad.exe'
    - '\wordview.exe'
            # LOLBINs that can be used to download executables
    - '\certutil.exe'
    - '\certoc.exe'
    - '\CertReq.exe'
            # - \bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)
    - '\Desktopimgdownldr.exe'
    - '\esentutl.exe'
            # - \expand.exe
    - '\mshta.exe'
            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)
    - '\AcroRd32.exe'
    - '\RdrCEF.exe'
    - '\hh.exe'
    - '\finger.exe'
    TargetFilename|endswith:
    - '.exe'
    - '.dll'
    - '.ocx'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The "Legitimate Application Dropped Executable" detection rule aims to identify potential malicious activity wherein legitimate applications on a Windows system unexpectedly write executable files to disk. This behavior is often indicative of an attacker's attempt to bypass security mechanisms by leveraging trusted binaries to execute harmful payloads. The rule specifically targets known applications that are either commonly abused for executing arbitrary code, such as `mshta.exe` and `certutil.exe`, or those applications which should strictly not create executable files under normal circumstances, such as `AcroRd32.exe` and `wordpad.exe`. 
  To generate alerts, the rule analyzes file event logs for any instances where the filename of the dropped file ends with `.exe`, `.dll`, or `.ocx` and originates from these specified legitimate applications. By monitoring these logs, security teams can pivot from alerts to investigate potentially harmful behaviors in line with the MITRE ATT&CK tactic "Defense Evasion" (Tactic: TA0040) and the technique "Script Proxy" (Technique: T1218).
  ### Investigation Steps
  - **Review EDR Alerts:** Start by querying the EDR for any alerts regarding the specified applications and correlate with the timestamps of the dropped executables to identify any abnormal behavior.
  - **Analyze File System Changes:** Utilize file event logs to track the paths where the executables were written and assess whether the behavior aligns with normal operational process flows for the identified applications.
  - **Inspect Command-Line Parameters:** Check command-line executions for the applications involved to determine if any suspicious parameters are used, which might indicate potential abuse or compromise.
  - **Conduct Process Tree Analysis:** Investigate the parent-child process relational structure using Sysmon logs to identify how legitimate applications may have been exploited to spawn potentially malicious processes.
  ### Prioritization
  Given the nature of the rule, alerts generated are classified as high severity because the unexpected creation of executable files by typically benign applications can signify serious security incidents, including malware deployment or eventual system compromise.
  ### Blind Spots and Assumptions
  One recognized issue with this rule is the possibility of legitimate applications being misconfigured or updated in ways that lead to unusual executable file creation. Additionally, there are assumptions that all recorded activities from the applications are indeed malicious, which might not always be the case. Moreover, if an adversary uses renamed utilities or other customized applications that are not covered in this rule, their activity may go undetected. Understanding that behavioral patterns may differ across environments is crucial for detection engineers implementing this rule.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
