title: Legitimate Application Dropped Script
id: 7d604714-e071-49ff-8726-edeb95a70679
status: test
description: Detects programs on a Windows system that should not write scripts to
  disk
references:
- https://github.com/Neo23x0/sysmon-config/blob/3f808d9c022c507aae21a9346afba4a59dd533b9/sysmonconfig-export-block.xml#L1326
author: frack113, Florian Roth (Nextron Systems)
date: 2022-08-21
modified: 2023-06-22
tags:
- attack.defense-evasion
- attack.t1218
logsource:
  product: windows
  category: file_event
detection:
  selection:
    Image|endswith:
            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4
    - \eqnedt32.exe
    - \wordpad.exe
    - \wordview.exe
            # LOLBINs that can be used to download executables
    - \certutil.exe
    - \certoc.exe
    - \CertReq.exe
            # - \bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)
    - \Desktopimgdownldr.exe
    - \esentutl.exe
            # - \expand.exe
    - '\mshta.exe'
            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)
    - '\AcroRd32.exe'
    - '\RdrCEF.exe'
    - '\hh.exe'
    - '\finger.exe'
    TargetFilename|endswith:
    - '.ps1'
    - '.bat'
    - '.vbs'
    - '.scf'
    - '.wsf'
    - '.wsh'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The "Legitimate Application Dropped Script" detection rule identifies potentially malicious behavior where specific legitimate applications, typically used for productivity or other common tasks, are detected writing script files (such as PowerShell scripts, batch files, or visual basic scripts) to disk. This behavior can indicate an attempt to execute malicious code via these scripts, often associated with defense evasion techniques. The rule primarily focuses on monitoring file events and is triggered when particular applications, known for their utility but potentially misused in attack scenarios, initiate actions that result in script file creation. Laptop and desktop environments often use common tools like Microsoft Office applications and various legitimate command-line utilities (often referred to as LOLBins 
  - Living Off the Land Binaries) to bypass standard defense measures. By leveraging Sysmon log data, specifically File Creation events, this rule aligns with the MITRE ATT&CK technique [T1218: Signed Binary Proxy Execution], highlighting both the use of trusted applications and the risk posed by their manipulation in malicious contexts.
  ### Investigation Steps
  - **Check Sysmon Logs:** Review the Sysmon File Creation events for the identified applications to confirm if a script file was created. Pay close attention to the file paths and timestamps to correlate with potential malicious activity.
    
  - **Analyze EDR Data:** Use your EDR tool to trace the process execution chain, focusing on the application writing scripts. Look for any anomalous process spawning or unusual command-line arguments associated with those applications.
  - **Correlate with Other Logs:** Examine logs from other sources like Proxy or VPN to identify potential external communications initiated by the flagged applications right after script creation, which could suggest command and control activity.
  - **Assess Endpoint Security Alerts:** Review alerts generated by Antivirus or other endpoint security solutions that may indicate malicious behavior on endpoints involved. Look for any flagged scripts or known IOCs that link back to the incident.
  ### Prioritization
  The severity level of this alert is classified as high because the creation of scripts by trusted applications often indicates an ongoing attack or pre-attack behavior, significantly raising the risk of malware deployment and persistence in the environment.
  ### Blind Spots and Assumptions
  This rule may not fire if the legitimate applications in question are not permitted to execute script writing in certain environments, or if the threat actor compromises lesser-known tools that do not trigger this detection. Additionally, if an application is misconfigured not to log file creation events or if Sysmon is not properly deployed, this detection will fail. Furthermore, some skilled attackers may spoof valid applications or use direct file manipulation techniques to evade detection, highlighting the importance of comprehensive monitoring across all vectors.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and relevance, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
