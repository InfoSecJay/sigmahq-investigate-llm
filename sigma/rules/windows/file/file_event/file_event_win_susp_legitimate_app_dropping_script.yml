title: Legitimate Application Dropped Script
id: 7d604714-e071-49ff-8726-edeb95a70679
status: test
description: Detects programs on a Windows system that should not write scripts to
  disk
references:
- https://github.com/Neo23x0/sysmon-config/blob/3f808d9c022c507aae21a9346afba4a59dd533b9/sysmonconfig-export-block.xml#L1326
author: frack113, Florian Roth (Nextron Systems)
date: 2022-08-21
modified: 2023-06-22
tags:
- attack.defense-evasion
- attack.t1218
logsource:
  product: windows
  category: file_event
detection:
  selection:
    Image|endswith:
            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4
    - \eqnedt32.exe
    - \wordpad.exe
    - \wordview.exe
            # LOLBINs that can be used to download executables
    - \certutil.exe
    - \certoc.exe
    - \CertReq.exe
            # - \bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)
    - \Desktopimgdownldr.exe
    - \esentutl.exe
            # - \expand.exe
    - '\mshta.exe'
            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)
    - '\AcroRd32.exe'
    - '\RdrCEF.exe'
    - '\hh.exe'
    - '\finger.exe'
    TargetFilename|endswith:
    - '.ps1'
    - '.bat'
    - '.vbs'
    - '.scf'
    - '.wsf'
    - '.wsh'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This Sigma rule is designed to identify suspicious behavior on Windows systems where certain legitimate applications create script files on disk, which is not typical for these programs. The detection focuses primarily on the file event logs, looking for specific executables known as "LOLbins" (Living Off the Land Binaries) that, due to their common usage, can bypass security controls when abused. The rule checks for processes like `wordpad.exe`, `mshta.exe`, and several others ending in `.ps1`, `.bat`, `.vbs`, and similar extensions, authors have identified as risky when executed by these applications. By monitoring these behaviors, security teams can detect potential misuse of trusted applications for executing malicious scripts, aiding in defense against threat actors employing evasion techniques.
  ### Investigation Steps
  - Review EDR logs to identify which executable initiated the script creation, along with the parent process to understand the context of its execution. 
  - Analyze command-line parameters used by the identified process to determine if there are any unusual or unexpected flags that indicate malicious intent.
  - Check file creation timestamps and modifications using the file event logs to correlate with other suspicious activities on the system.
  - Use threat intelligence tools to assess whether the application behavior aligns with known attack patterns or if it has been observed in recent incidents.
