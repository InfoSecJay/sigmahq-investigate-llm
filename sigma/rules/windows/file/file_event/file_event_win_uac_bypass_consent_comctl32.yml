title: UAC Bypass Using Consent and Comctl32 - File
id: 62ed5b55-f991-406a-85d9-e8e8fdf18789
status: test
description: Detects the pattern of UAC Bypass using consent.exe and comctl32.dll
  (UACMe 22)
references:
- https://github.com/hfiref0x/UACME
author: Christian Burkard (Nextron Systems)
date: 2021-08-23
modified: 2022-10-09
tags:
- attack.defense-evasion
- attack.privilege-escalation
- attack.t1548.002
logsource:
  category: file_event
  product: windows
detection:
  selection:
    TargetFilename|startswith: 'C:\Windows\System32\consent.exe.@'
    TargetFilename|endswith: '\comctl32.dll'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The UAC Bypass Using Consent and Comctl32 detection rule focuses on detecting an unusual file event that exploits vulnerabilities in the User Account Control (UAC) mechanism on Windows systems. Specifically, it looks for attempts to leverage `consent.exe` in conjunction with `comctl32.dll`, which may indicate an unauthorized elevation of privileges through UAC evasion techniques. When an attacker executes a payload that interacts with these components, it may enable them to bypass the user consent that is typically required to run processes with elevated privileges. The rule specifically examines the TargetFilename to identify file operations that indicate potential misuse. The primary logs involved in this detection are Windows file events where telemetry from the applicable sources can pinpoint suspicious activity associated with UAC bypasses. This detection aligns with the MITRE ATT&CK tactics of Defense Evasion and Privilege Escalation, particularly the technique T1548.002.
  ### Investigation Steps
  - **Review File Event Logs:** Cross-reference the detected `consent.exe` and `comctl32.dll` activities in the Windows file event logs to determine if they align with known benign processes or if they indicate suspicious behavior.
  - **Analyze Process Creation Events:** Utilize EDR tools to trace the parent process of any identified `consent.exe` activities, identifying the origins of the execution and any associated commands that may indicate malicious intent.
  - **Examine User Account Activity:** Investigate any recent user account changes or unusual login patterns that coincide with the timestamps of the detection, looking for unauthorized access or attempts to escalate privileges.
  - **Correlate with Other Security Tools:** Check for alerts from AV, NDR, and other security solutions that may have flagged related activities, forming a comprehensive overview of any potential compromise.
  ### Prioritization
  This alert is classified as high severity due to the potential for privilege escalation and evasion of security controls, indicating a serious risk to the security posture of the enterprise environment.
  ### Blind spots and Assumptions
  The detection may not fire if the activities associated with UAC bypass are performed using alternate methods or files not explicitly covered in the current pattern. Additionally, if an adversary conducts their actions rapidly and with high precision, they may evade detection. Misconfigured logging settings or missing files in the monitored directory could also prevent the rule from triggering. As such, incident responders should be aware of the evolving tactics employed by adversaries and adjust correlational investigations accordingly. 
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
