title: PowerShell Module File Created By Non-PowerShell Process
id: e3845023-ca9a-4024-b2b2-5422156d5527
status: test
description: Detects the creation of a new PowerShell module ".psm1", ".psd1", ".dll",
  ".ps1", etc. by a non-PowerShell process
references:
- Internal Research
- https://learn.microsoft.com/en-us/powershell/scripting/developer/module/understanding-a-windows-powershell-module?view=powershell-7.3
author: Nasreddine Bencherchali (Nextron Systems)
date: 2023-05-09
modified: 2023-10-18
tags:
- attack.persistence
logsource:
  category: file_event
  product: windows
detection:
  selection:
    TargetFilename|contains:
    - '\WindowsPowerShell\Modules\'
    - '\PowerShell\7\Modules\'
  filter_main_pwsh:
    Image|endswith:
    - ':\Program Files\PowerShell\7-preview\pwsh.exe'
    - ':\Program Files\PowerShell\7\pwsh.exe'
    - ':\Windows\System32\poqexec.exe'         # https://github.com/SigmaHQ/sigma/issues/4448
    - ':\Windows\System32\WindowsPowerShell\v1.0\powershell_ise.exe'
    - ':\Windows\System32\WindowsPowerShell\v1.0\powershell.exe'
    - ':\Windows\SysWOW64\poqexec.exe'         # https://github.com/SigmaHQ/sigma/issues/4448
    - ':\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell_ise.exe'
    - ':\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe'
  condition: selection and not 1 of filter_main_*
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This Sigma rule focuses on detecting the creation of PowerShell module files (such as ".psm1", ".psd1", ".dll", and ".ps1") by processes that are not classified as PowerShell executables. The underlying premise is that while PowerShell modules are typically created and manipulated through PowerShell itself, the creation of these files by other processes may indicate suspicious activity, potentially related to malicious intent or attempts at persistence. The rule utilizes file event logs from Windows where it looks for changes in specific directories associated with PowerShell modules while excluding entries generated by standard PowerShell executables.
  In essence, the detection mechanism begins by monitoring the target filename for occurrences within known PowerShell module directories and then employs filters to ensure that the triggering process is not an instance of legitimate PowerShell or associated tools. If such activity is detected, it raises a flag indicating a deviation from typical PowerShell usage patterns, thereby prompting further investigation.
  ### Investigation Steps
  - Examine EDR logs to identify the non-PowerShell process responsible for the module creation, including the process ID and parent process relationships.
  - Review command-line arguments from the detected event in EDR to ascertain the context in which the process executed.
  - Check file integrity and ownership of the created PowerShell module using Windows file system logs to determine if this file should be trusted.
  - Correlate the incident with Proxy and VPN logs to track any suspicious network activity originating from the affected host, which might indicate exfiltration or additional compromise attempts.
