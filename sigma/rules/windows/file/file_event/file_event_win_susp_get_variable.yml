title: Suspicious Get-Variable.exe Creation
id: 0c3fac91-5627-46e8-a6a8-a0d7b9b8ae1b
status: test
description: |
  Get-Variable is a valid PowerShell cmdlet
  WindowsApps is by default in the path where PowerShell is executed.
  So when the Get-Variable command is issued on PowerShell execution, the system first looks for the Get-Variable executable in the path and executes the malicious binary instead of looking for the PowerShell cmdlet.
references:
- https://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/
- https://www.joesandbox.com/analysis/465533/0/html
author: frack113
date: 2022-04-23
tags:
- attack.persistence
- attack.t1546
- attack.defense-evasion
- attack.t1027
logsource:
  product: windows
  category: file_event
detection:
  selection:
    TargetFilename|endswith: 'Local\Microsoft\WindowsApps\Get-Variable.exe'
  condition: selection
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  The "Suspicious Get-Variable.exe Creation" detection rule is designed to identify instances where a malicious binary masquerades as the legitimate PowerShell cmdlet `Get-Variable`. In a typical Windows environment, PowerShell runs commands from the user's `WindowsApps` directory, which is the default search path for executables. When an attacker creates a malicious executable named `Get-Variable.exe`, it could be executed instead of the intended PowerShell cmdlet, potentially facilitating persistence or executing harmful commands without the user's knowledge. This rule utilizes file event logs to capture file creation activities specifically targeting the `Local\Microsoft\WindowsApps` directory. By monitoring the creation of files with this specific naming convention, we can identify potential misuse that aligns with the MITRE ATT&CK techniques T1546 (Event Triggered Execution) and T1027 (Obfuscated Files or Information). 
  ### Investigation Steps
  - **Review EDR Alerts**: Check for associated EDR alerts on the endpoint where the `Get-Variable.exe` file was created. Pay attention to any anomalous behavior that correlates with the file creation event.
  - **Examine Process Activity**: Investigate the process creation logs and system events that occurred around the time of the suspicious file creation to determine if PowerShell was invoked and how it may have executed the malicious binary.
  - **Analyze Network Connections**: Utilize network data logs to identify any outbound connections made by the process after it was executed. Look for anomalies or connections to known malicious IPs or domains.
  - **Verify System Integrity**: Check for any other suspicious files within the `WindowsApps` directory or related locations to ensure no additional persistence mechanisms have been established.
  ### Prioritization
  Given the high severity level associated with this alert, it indicates an increased risk of persistence and potential system compromise. The presence of a suspicious executable in a trusted directory warrants immediate investigation to mitigate potential damage.
  ### Blind Spots and Assumptions
  This rule relies on the assumption that the malicious `Get-Variable.exe` file will indeed be created in the specified directory under typical conditions. However, if an adversary uses obfuscation techniques or generates the executable under a different name or path, this rule may not trigger. Additionally, environments configured with strict application whitelisting or where PowerShell execution policies are highly regulated may reduce the likelihood of this attack. There may also be instances of false positives from legitimate software that introduces files with similar naming conventions.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
