title: LSASS Process Memory Dump Files
id: a5a2d357-1ab8-4675-a967-ef9990a59391
related:
- id: db2110f3-479d-42a6-94fb-d35bc1e46492
  type: obsolete
- id: 5e3d3601-0662-4af0-b1d2-36a05e90c40a
  type: obsolete
status: test
description: Detects creation of files with names used by different memory dumping
  tools to create a memory dump of the LSASS process memory, which contains user credentials.
references:
- https://www.google.com/search?q=procdump+lsass
- https://medium.com/@markmotig/some-ways-to-dump-lsass-exe-c4a75fdc49bf
- https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/credential_access_lsass_memdump_file_created.toml
- https://www.whiteoaksecurity.com/blog/attacks-defenses-dumping-lsass-no-mimikatz/
- https://github.com/helpsystems/nanodump
- https://github.com/CCob/MirrorDump
- https://github.com/safedv/RustiveDump/blob/1a9b026b477587becfb62df9677cede619d42030/src/main.rs#L35
- https://github.com/ricardojoserf/NativeDump/blob/01d8cd17f31f51f5955a38e85cd3c83a17596175/NativeDump/Program.cs#L258
author: Florian Roth (Nextron Systems)
date: 2021-11-15
modified: 2024-10-08
tags:
- attack.credential-access
- attack.t1003.001
logsource:
  product: windows
  category: file_event
detection:
  selection_1:
    TargetFilename|endswith:
    - '\Andrew.dmp'
    - '\Coredump.dmp'
    - '\lsass.dmp'
    - '\lsass.rar'
    - '\lsass.zip'
    - '\NotLSASS.zip'          # https://github.com/CCob/MirrorDump
    - '\PPLBlade.dmp'          # https://github.com/tastypepperoni/PPLBlade
    - '\rustive.dmp'         # https://github.com/safedv/RustiveDump/blob/main/src/main.rs#L35
  selection_2:
    TargetFilename|contains:
    - '\lsass_2'          # default format of procdump v9.0 is lsass_YYMMDD_HHmmss.dmp
    - '\lsassdmp'
    - '\lsassdump'
  selection_3:
    TargetFilename|contains|all:
    - '\lsass'
    - '.dmp'
  selection_4:
    TargetFilename|contains: 'SQLDmpr'
    TargetFilename|endswith: '.mdmp'
  selection_5:
    TargetFilename|contains:
    - '\nanodump'
    - '\proc_'         # NativeDump pattern https://github.com/ricardojoserf/NativeDump/blob/01d8cd17f31f51f5955a38e85cd3c83a17596175/NativeDump/Program.cs#L258
    TargetFilename|endswith: '.dmp'
  condition: 1 of selection_*
falsepositives:
- Unknown
level: high
notes: |
  ### Technical Context
  This detection rule is designed to identify suspicious file creations that are indicative of attacks targeting the LSASS (Local Security Authority Subsystem Service) process memory. LSASS is critical for handling authentication and credential management in Windows; therefore, dumping its memory can reveal sensitive information such as user credentials. The rule looks for specific file names and extensions commonly used by various memory-dumping utilities like ProcDump, NativeDump, and others that attackers may employ to steal credentials. The relevant data sources for detection include file event logs and potentially process creation logs to correlate the activities leading up to the detection. This rule is related to the MITRE ATT&CK framework under the tactic "Credential Access" and the technique "Credential Dumping" (T1003.001), highlighting its relevance in identifying credential theft attempts.
  ### Investigation Steps
  - **Check Process Creation Logs:** Review Windows Event Logs (Sysmon or Security) for any suspicious processes that were active at the time the dump file was created. Look for known memory dumping tools and their invocation details.
    
  - **Analyze File Creation Events:** Use SIEM and file event logs to examine the context of the file creation. Investigate the user account and process responsible for the creation to establish legitimacy or potential compromise.
  - **Verify Network Activity:** Assess EDR or Network Security logs to determine if there was any unusual outbound activity related to the same user or process that may indicate data exfiltration following the LSASS dump file creation.
  - **Review Account Activity Logs:** Check VPN, Proxy, or other user activity logs to trace the actions of the user account involved at the time of the suspicious file creation. Look for unusual logins or access patterns that could signify an unauthorized user.
  ### Prioritization
  The alert for the creation of LSASS process memory dump files is categorized as high severity due to the potential risk of credential theft and unauthorized access to sensitive systems and data. Given the critical role of LSASS in Windows security, any indications of memory dumping should be treated with urgency and investigated promptly.
  ### Blind Spots and Assumptions
  This rule may not fire in some scenarios, particularly if an adversary uses non-standard or custom file naming conventions to mask their activities. Additionally, legitimate applications or administrative scripts that create LSASS dumps for authorized troubleshooting purposes might also trigger false positives. Awareness of the operational environment and its unique applications is vital for accurate identification of actual threats vs. benign activity. Other engineers should remain cognizant of possible evasion techniques employed by attackers, such as the use of encryption or obscured file names.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
