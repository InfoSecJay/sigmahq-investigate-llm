title: Files With System DLL Name In Unsuspected Locations
id: 13c02350-4177-4e45-ac17-cf7ca628ff5e
status: test
description: |
  Detects the creation of a file with the ".dll" extension that has the name of a System DLL in uncommon or unsuspected locations. (Outisde of "System32", "SysWOW64", etc.).
  It is highly recommended to perform an initial baseline before using this rule in production.
references:
- Internal Research
author: Nasreddine Bencherchali (Nextron Systems)
date: 2024-06-24
tags:
- attack.defense-evasion
- attack.t1036.005
logsource:
  category: file_event
  product: windows
detection:
  selection:
    TargetFilename|endswith:
            # Note: Add more System DLL that can be abused for DLL sideloading to increase coverage
    - '\secur32.dll'
    - '\tdh.dll'
  filter_main_generic:
        # Note: It is recommended to use a more robust filter instead of this generic one, to avoid false negatives.
    TargetFilename|contains:
            # - '\SystemRoot\System32\'
    - 'C:\$WINDOWS.~BT\'
    - 'C:\$WinREAgent\'
    - 'C:\Windows\SoftwareDistribution\'
    - 'C:\Windows\System32\'
    - 'C:\Windows\SysWOW64\'
    - 'C:\Windows\WinSxS\'
    - 'C:\Windows\uus\'
  condition: selection and not 1 of filter_main_*
falsepositives:
- Third party software might bundle specific versions of system DLLs.
# Note: Upgrade to high after an initial baseline to your environement.
level: medium
notes: |
  ### Technical Context
  The detection rule titled "Files With System DLL Name In Unsuspected Locations" aims to identify potentially malicious activity involving the creation of dynamically linked libraries (DLLs) with system DLL names located in directories that are not standard for operating system files, such as "C:\Windows\System32" or "C:\Windows\SysWOW64". This technique targets defenders using the MITRE ATT&CK framework technique T1036.005, which pertains to defense evasion tactics where attackers might leverage DLL sideloading to execute malicious code while masquerading as legitimate processes. The rule analyzes Windows file event logs for creation events where the filename ends with the extension ".dll" and matches system DLL names but is located in atypical directories. These logs provide insights into changes made to the system files, helping analysts determine suspicious behavior.
  To implement this rule effectively, it is crucial to monitor appropriate file_event logs alongside filtering mechanisms that exclude typical system paths. This detection is particularly sensitive to the contextual placement of DLLs, as adversaries often exploit such files to integrate their code stealthily into the environment. Ensuring a comprehensive baseline assessment of normal file creation patterns is recommended before deploying this rule in an operational environment, as it can help minimize false positives and improve detection accuracy.
  ### Investigation Steps
  - **Check Suspicious DLL Creation Events:** Review the details of any flagged file creation events in the file event logs using your SIEM, focusing on the filename and path to assess if the creation was authorized.
  - **Correlate with Process Activity:** Utilize EDR tools to correlate the DLL creation events with process creation logs, confirming whether any unusual processes executed around the same time as the suspected DLL file was created.
  - **Analyze Historical Baselines:** Compare flagged DLL creation events to historical baselines of legitimate activity within your environment, particularly looking for patterns that diverge from standard operational behavior.
  - **Examine Network Connections:** Review network connection logs to identify any outbound activity related to the suspicious DLLs, which may indicate a compromised system attempting to communicate with an external command and control server.
  ### Prioritization
  This alert is rated as medium severity due to the potential for malicious activity associated with DLL sideloading, which can lead to significant exploitation of the system if not addressed promptly. A timely investigation is crucial to prevent further compromise or data exfiltration.
  ### Blind Spots and Assumptions
  This rule may fail to fire in instances where legitimate software installations or updates take place, as third-party applications could create system DLLs in non-standard paths without malicious intent. Additionally, if new legitimate application directories are introduced into the environment, these might not be accounted for in the filter, leading to false negatives. Analysts should also be aware that sophisticated adversaries may employ techniques to obfuscate their DLL files further or use similar filenames in acceptable directories, complicating detection efforts.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
