title: Potential Initial Access via DLL Search Order Hijacking
id: dbbd9f66-2ed3-4ca2-98a4-6ea985dd1a1c
status: test
description: Detects attempts to create a DLL file to a known desktop application
  dependencies folder such as Slack, Teams or OneDrive and by an unusual process.
  This may indicate an attempt to load a malicious module via DLL search order hijacking.
references:
- https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-5d46dd4ac6866b4337ec126be8cee0e115467b3e8703794ba6f6df6432c806bc
- https://posts.specterops.io/automating-dll-hijack-discovery-81c4295904b0
author: Tim Rauch (rule), Elastic (idea)
date: 2022-10-21
tags:
- attack.t1566
- attack.t1566.001
- attack.initial-access
- attack.t1574
- attack.t1574.001
- attack.defense-evasion
logsource:
  product: windows
  category: file_event
detection:
  selection:
    Image|endswith:
            # add more processes when you find them
    - '\winword.exe'
    - '\excel.exe'
    - '\powerpnt.exe'
    - '\MSACCESS.EXE'
    - '\MSPUB.EXE'
    - '\fltldr.exe'
    - '\cmd.exe'
    - '\certutil.exe'
    - '\mshta.exe'
    - '\cscript.exe'
    - '\wscript.exe'
    - '\curl.exe'
    - '\powershell.exe'
    - '\pwsh.exe'
    TargetFilename|endswith: '.dll'
    TargetFilename|contains|all:
    - '\Users\'
    - '\AppData\'
    TargetFilename|contains:
            # add more suspicious paths when you find them
    - '\Microsoft\OneDrive\'
    - '\Microsoft OneDrive\'
    - '\Microsoft\Teams\'
    - '\Local\slack\app-'
    - '\Local\Programs\Microsoft VS Code\'
  filter:
    Image|endswith: '\cmd.exe'
    TargetFilename|contains|all:
    - '\Users\'
    - '\AppData\'
    - '\Microsoft\OneDrive\'
    - '\api-ms-win-core-'
  condition: selection and not filter
falsepositives:
- Unknown
level: medium
notes: |
  ### Technical Context
  This detection rule identifies potential attempts to exploit DLL Search Order Hijacking, a technique used by adversaries to load malicious Dynamic Link Libraries (DLLs) into legitimate processes. Specifically, the rule looks for instances where processes such as `winword.exe`, `excel.exe`, or `powershell.exe` (among others) attempt to create DLL files within application-specific folders typical for desktop applications like Slack, Teams, or OneDrive. It uses telemetry derived from Windows file events to monitor for unusual process behaviors, where the lifecycle of a DLL file creation can point towards an unauthorized attempt to subvert a trusted application. 
  The key data sources for this rule include file creation logs that track the `TargetFilename` and the `Image` (i.e., the initiating process). By correlating these elements, this detection is linked to the MITRE ATT&CK framework under the tactics of Initial Access (T1566) and Defense Evasion (T1574) which aim to exploit legitimate applications to execute malicious payloads without detection.
  ### Investigation Steps
  - **Verify Process Activity**: Check the EDR for detailed logs on the initiating process and its activity around the time of the alert. Look for any abnormal patterns in process execution, such as parent-child relationships that seem out of place.
  - **Analyze File Creation**: Review the logs associated with the created DLL file to determine its origin and legitimacy. This can be supplemented by checking hash values against known malware databases or running the file through an antivirus or threat intelligence platform.
  - **Review Application Integrity**: Confirm the integrity of the applications like Teams or OneDrive to ensure they have not been tampered with. Use tools such as Application Control or Integrity Monitoring to check for unauthorized changes in the application directory.
  - **Investigate User Activity**: Examine user logins and activities around the alert's timestamp, especially if the affected applications are remote-access tools. This can help identify any unusual access patterns or account compromise indicators.
  ### Prioritization
  Given that this alert indicates a potential initial access attempt through a well-known technique, it should be treated with medium to high priority. Quick response is essential to mitigate risk and prevent further exploitation of the application ecosystem if a malicious DLL is actually loaded.
  ### Blind Spots and Assumptions
  This rule may not fire in cases where the DLL creation occurs in a non-monitored directory, or when legitimate processes are mimicked by adversarial actors (e.g., using process hollowing techniques). Additionally, if the applications are run in a sandboxed or containerized environment, the typical telemetry may not capture relevant events. The assumption here is that the environment has adequate logging in place, and that no configuration changes have been made to bypass standard monitoring practices.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality and completeness, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
