title: HackTool - Powerup Write Hijack DLL
id: 602a1f13-c640-4d73-b053-be9a2fa58b96
status: test
description: |
  Powerup tool's Write Hijack DLL exploits DLL hijacking for privilege escalation.
  In it's default mode, it builds a self deleting .bat file which executes malicious command.
  The detection rule relies on creation of the malicious bat file (debug.bat by default).
references:
- https://powersploit.readthedocs.io/en/latest/Privesc/Write-HijackDll/
author: Subhash Popuri (@pbssubhash)
date: 2021-08-21
modified: 2024-06-27
tags:
- attack.persistence
- attack.privilege-escalation
- attack.defense-evasion
- attack.t1574.001
logsource:
  category: file_event
  product: windows
detection:
  selection:
    Image|endswith:
    - '\powershell.exe'
    - '\pwsh.exe'
    TargetFilename|endswith: '.bat'
  condition: selection
falsepositives:
- Any powershell script that creates bat files     # highly unlikely (untested)
level: high
notes: |
  n
  ### Technical Context
  This Sigma rule is designed to detect the use of the Powerup tool's Write Hijack DLL, which is associated with privilege escalation tactics. It identifies the creation of a specific batch file (debug.bat) that is generated by Powerup for executing malicious commands. The rule specifically looks for processes running either PowerShell or PowerShell Core that result in the creation of batch files, an action often exploited for malicious purpose. The relevant technical data sources involved are Windows Sysmon event logs, particularly focusing on process creation events (`process_creation`) and file events (`file_*`). This rule aligns with the MITRE ATT&CK tactics of Persistence, Privilege Escalation, and Defense Evasion, specifically under the technique T1574.001, which involves DLL hijacking.
  ### Investigation Steps
  - **Check Process Creation Logs:** Use EDR tools to investigate the history of `powershell.exe` and `pwsh.exe` processes that created batch files. Verify if the parent process behavior was consistent with Powerup tool usage.
  - **Review File Events:** Access the file event logs to look for the creation of any `.bat` files, focusing on timestamps and paths that correlate with exhibited suspicious behavior or known malicious indicators.
  - **Analyze Command-Line Arguments:** Review command-line parameters associated with the PowerShell processes to identify any commands executed that may provide insight into the actions being performed by the batch file.
  - **Consult AV and Threat Intelligence:** Run the filename and related hashes through your anti-virus (AV) solutions and threat intelligence databases to check if any known signatures or indicators of compromise (IoCs) are flagged.
  ### Prioritization
  The alert is classified as high severity due to the potential for privilege escalation, which can allow attackers to gain unauthorized access to sensitive areas of the network. Prompt investigation is crucial as this type of activity can lead to further compromise of critical systems.
  ### Blind Spots and Assumptions
  This rule may not trigger if the attacker uses a different process or method to create batch files, or if legitimate PowerShell scripts employ similar techniques without malicious intent, leading to potential false positives. It assumes that all relevant PowerShell executions are logged properly and that the environments are configured to collect the required Sysmon and file event logs effectively.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
