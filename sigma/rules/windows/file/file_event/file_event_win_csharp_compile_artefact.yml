title: Dynamic CSharp Compile Artefact
id: e4a74e34-ecde-4aab-b2fb-9112dd01aed0
status: test
description: |
  When C# is compiled dynamically, a .cmdline file will be created as a part of the process.
  Certain processes are not typically observed compiling C# code, but can do so without touching disk.
  This can be used to unpack a payload for execution
references:
- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1027.004/T1027.004.md#atomic-test-2---dynamic-c-compile
author: frack113
date: 2022-01-09
modified: 2023-02-17
tags:
- attack.defense-evasion
- attack.t1027.004
logsource:
  product: windows
  category: file_event
detection:
  selection:
    TargetFilename|endswith: '.cmdline'
  condition: selection
falsepositives:
- Unknown
level: low
notes: |
  ### Technical Context
  The "Dynamic CSharp Compile Artefact" detection rule is designed to identify instances where a dynamic C# compilation process generates a `.cmdline` file. This rule flags such occurrences because they may indicate potentially malicious activity, particularly when executed by processes that traditionally do not compile C# code. The ability to compile C# dynamically allows cyber adversaries to execute code in memory without writing it to disk, which is a common method employed to evade detection mechanisms. 
  In this context, the detection works by analyzing file events on Windows systems for new files that have a `.cmdline` extension. This file represents a command-line argument capturing the context of a dynamically compiled C# script and can serve as an indicator of advanced evasion techniques such as those described in the MITRE ATT&CK framework under the tactic of Defense Evasion (Technique T1027.004). The main data source involved in this detection rule is the Windows Security event logs that track file creation events.
  ### Investigation Steps
  - **Check File Creation Logs:** Investigate the Windows Security logs for the creation of the `.cmdline` file. Look for additional logs that provide context on who created the file and the associated process.
  - **Analyze Process Tree:** Utilize Endpoint Detection and Response (EDR) tools to examine the process tree and identify the parent process related to the file's creation. Confirm whether any unusual or untrusted processes were present during the incident.
  - **Review Network Activity:** Check for any outbound network connections or suspicious DNS queries linked to the process that generated the `.cmdline` file. This can provide insight into whether the process is communicating with known malicious infrastructure.
  - **Investigate Related Artifacts:** Search for other indicators such as registry changes or additional files created around the same time. This can provide more context and potential links to wider malicious activity.
  ### Prioritization
  The alert is assigned a low severity level due to the nature of dynamic compilation being a legitimate feature in some workflows. However, it should still be taken seriously as it may indicate a strategy used by an adversary to bypass security measures.
  ### Blind Spots and Assumptions
  This rule may not fire if the dynamic compilation occurs in processes that do not generate a `.cmdline` file or if file creation events are disabled on the monitoring system. Assumptions include that the monitoring tools are properly configured and that anomalous process behaviors are not obscured by prevalent legitimate processes using dynamic compilation for benign purposes. Additionally, sophisticated threats may leverage custom tools to avoid typical detection patterns.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
