title: Process Deletion of Its Own Executable
id: f01d1f70-cd41-42ec-9c0b-26dd9c22bf29
status: experimental
description: |
  Detects the deletion of a process's executable by itself. This is usually not possible without workarounds and may be used by malware to hide its traces.
references:
- https://github.com/joaoviictorti/RustRedOps/tree/ce04369a246006d399e8c61d9fe0e6b34f988a49/Self_Deletion
author: Max Altgelt (Nextron Systems)
date: 2024-09-03
tags:
- attack.defense-evasion
logsource:
  product: windows
  category: file_delete
detection:
  selection:
    TargetFilename|fieldref: Image
  condition: selection
falsepositives:
- Some false positives are to be expected from uninstallers.
level: medium
notes: |
  ### Technical Context
  The "Process Deletion of Its Own Executable" Sigma rule is designed to detect instances where a running process attempts to delete its own executable file. This activity is unusual and typically not allowed under normal operations, as a process cannot delete itself without employing some form of circumvention, which may indicate malicious behavior or the presence of malware attempting to erase its trace post-execution. The rule primarily operates by monitoring Windows logs for file deletion events, specifically looking at the `TargetFilename` field where the executable's path is specified. The relevant MITRE ATT&CK tactic associated with this detection is **Defense Evasion (T1140)**, as the act of self-deletion is a technique that adversaries might leverage to hide their presence in the environment.
  ### Investigation Steps
  - **Review EDR Alerts:** Check for the EDR alerts associated with the process identified in the file deletion event, noting any unusual behavior or suspicious activities that might support investigative leads.
  - **Examine Process Creation Logs:** Utilize Windows Sysmon logs to analyze the process creation events prior to the deletion, focusing on the command line and parent process to track potential malicious origins.
  - **Analyze Network Connections:** Investigate any network activities through NDR logs around the same timeframe, as certain malware may rely on external commands or control over the network to execute such operations.
  - **Check for Other Related Activity:** Review recent application and security logs to uncover any other unusual file modifications or system changes that could provide context or indicate a larger compromise.
  ### Prioritization
  This alert is considered medium priority within an enterprise environment due to its potential implications for system integrity and the possibility of a compromised process engaging in evasion tactics. The detection of such behavior warrants immediate investigation to determine if it is indeed indicative of malicious activity.
  ### Blind Spots and Assumptions
  This rule may not fire in scenarios where legitimate applications, such as uninstallers, delete their own executables, leading to false positives. Additionally, if malware employs new techniques to bypass standard deletions or uses other processes to delete its executable, the rule may not activate. Analysts should also consider that self-deletion may not occur if the system settings or permissions prevent such actions, thus leaving a potential blind spot for detection.
  > **Disclaimer:** This investigation guide was created using generative AI technology and has not been reviewed for its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit specific environment and operational needs. Please communicate any changes to the detection engineering team.
