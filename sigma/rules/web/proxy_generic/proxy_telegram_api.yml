title: Telegram API Access
id: b494b165-6634-483d-8c47-2026a6c52372
status: test
description: Detects suspicious requests to Telegram API without the usual Telegram
  User-Agent
references:
- https://researchcenter.paloaltonetworks.com/2018/03/unit42-telerat-another-android-trojan-leveraging-telegrams-bot-api-to-target-iranian-users/
- https://blog.malwarebytes.com/threat-analysis/2016/11/telecrypt-the-ransomware-abusing-telegram-api-defeated/
- https://www.welivesecurity.com/2016/12/13/rise-telebots-analyzing-disruptive-killdisk-attacks/
author: Florian Roth (Nextron Systems)
date: 2018-06-05
modified: 2023-05-18
tags:
- attack.defense-evasion
- attack.command-and-control
- attack.t1071.001
- attack.t1102.002
logsource:
  category: proxy
detection:
  selection:
    cs-host: 'api.telegram.org'     # Often used by Bots
  filter:
    c-useragent|contains:
            # Used https://core.telegram.org/bots/samples for this list
    - 'Telegram'
    - 'Bot'
  condition: selection and not filter
fields:
- ClientIP
- c-uri
- c-useragent
falsepositives:
- Legitimate use of Telegram bots in the company
level: medium
notes: |
  ### Technical Context
  This detection rule identifies suspicious requests made to the Telegram API that are not using the standard User-Agents associated with legitimate Telegram clients or bots. By monitoring web traffic through the organization's Proxy logs, the rule specifically flags requests to `api.telegram.org` that lack the typical "Telegram" or "Bot" identifiers in the User-Agent string. The intent behind this detection is to catch potential abuse of the Telegram API, such as by malware or unauthorized applications attempting to utilize Telegram's infrastructure for command-and-control purposes. The rule leverages the fields related to client IP addresses, requested URIs, and User-Agent strings to facilitate effective detection.
  ### Investigation Steps
  - Check EDR logs for any processes executing from client machines that correspond with the flagged IP addresses attempting to access Telegram API services.
  - Review Proxy logs surrounding the time of the alert for additional suspicious requests or unusual traffic patterns, specifically any high volumes or regular intervals.
  - Investigate user account activity in cloud environments (e.g., AWS, Azure) to determine if there are any unauthorized integrations or usage of Telegram bots that could signal a breach.
  - Perform a network analysis to identify if the flagged requests are linked to known malware or threat actors, cross-referencing with threat intelligence feeds.
